GNU gdb (Ubuntu 7.7.1-0ubuntu5~14.04.2) 7.7.1
Copyright (C) 2014 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /usr/bin/vim...Reading symbols from /usr/lib/debug//usr/bin/vim.basic...done.
done.
All defined functions:

File arabic.c:
int arabic_shape(int, int *, int *, int, int, int);
static int A_is_f(int);
static int A_is_ok(int);
static int A_is_s(int);
static int A_is_valid(int);
static int chg_c_a2i(int);
static int chg_c_a2s(int);

File blowfish.c:
void bf_crypt_decode(char_u *, long);
void bf_crypt_encode(char_u *, size_t, char_u *);
void bf_crypt_init_keys(char_u *);
void bf_crypt_restore(void);
void bf_crypt_save(void);
void bf_key_init(char_u *, char_u *, int);
void bf_ofb_init(char_u *, int);
int blowfish_self_test(void);
static int bf_check_tables(UINT32_T *, UINT32_T (*)[256], UINT32_T);
static void bf_e_block(UINT32_T *, UINT32_T *);
static void bf_e_cblock(char_u *);

File buffer.c:
int ExpandBufnames(char_u *, int *, char_u ***, int);
char_u *alist_name(aentry_T *);
void buf_addsign(buf_T *, int, linenr_T, int);
linenr_T buf_change_sign_type(buf_T *, int, int);
void buf_clear_file(buf_T *);
int buf_contents_changed(buf_T *);
void buf_delete_all_signs(void);
void buf_delete_signs(buf_T *);
linenr_T buf_delsign(buf_T *, int);
int buf_findsign(buf_T *, int);
int buf_findsign_id(buf_T *, linenr_T);
int buf_findsigntype_id(buf_T *, linenr_T, int);
void buf_freeall(buf_T *, int);
int buf_getsigntype(buf_T *, linenr_T, int);
void buf_name_changed(buf_T *);
void buf_set_name(int, char_u *);
void buf_setino(buf_T *);
char_u *buf_spname(buf_T *);
int buf_valid(buf_T *);
int buflist_add(char_u *, int);
void buflist_altfpos(win_T *);
pos_T *buflist_findfpos(buf_T *);
linenr_T buflist_findlnum(buf_T *);
buf_T *buflist_findname(char_u *);
buf_T *buflist_findname_exp(char_u *);
buf_T *buflist_findnr(int);
int buflist_findpat(char_u *, char_u *, int, int, int);
int buflist_getfile(int, linenr_T, int, int);
void buflist_getfpos(void);
void buflist_list(exarg_T *);
int buflist_name_nr(int, char_u **, linenr_T *);
buf_T *buflist_new(char_u *, char_u *, linenr_T, int);
char_u *buflist_nr2name(int, int, int);
int build_stl_str_hl(win_T *, char_u *, size_t, char_u *, int, int, int, struct stl_hlrec *, struct stl_hlrec *);
void close_buffer(win_T *, buf_T *, int, int);
void col_print(char_u *, size_t, int, int);
void do_arg_all(int, int, int);
void do_autochdir(void);
char_u *do_bufdel(int, char_u *, int, int, int, int);
int do_buffer(int, int, int, int, int);
void do_modelines(int);
void enter_buffer(buf_T *);
void ex_buffer_all(exarg_T *);
void fileinfo(int, int, int);
int find_win_for_buf(buf_T *, win_T **, tabpage_T **);
char_u *fix_fname(char_u *);
void fname_expand(buf_T *, char_u **, char_u **);
void free_buf_options(buf_T *, int);
void get_rel_pos(win_T *, char_u *, int);
void get_winopts(buf_T *);
char_u *getaltfname(int);
void goto_buffer(exarg_T *, int, int, int);
void handle_swap_exists(buf_T *);
void maketitle(void);
int open_buffer(int, exarg_T *, int);
int otherfile(char_u *);
int read_viminfo_bufferlist(vir_T *, int);
void resettitle(void);
void set_buflisted(int);
void set_curbuf(buf_T *, int);
buf_T *setaltfname(char_u *, char_u *, linenr_T);
int setfname(buf_T *, char_u *, char_u *, int);
void sign_list_placed(buf_T *);
void sign_mark_adjust(linenr_T, linenr_T, long, long);
void wipe_buffer(buf_T *, int);
void write_viminfo_bufferlist(FILE *);
static int append_arg_number(char_u *, int, int, win_T *, win_T *);
static buf_T *buflist_findname_stat(char_u *, struct stat *);
static void buflist_setfpos(win_T *, linenr_T, colnr_T, int, buf_T *);
static int chk_modeline(linenr_T, int);
static void clear_wininfo(buf_T *);
static wininfo_T *find_wininfo(int, buf_T *);
static char_u *fname_match(regprog_T *, char_u *);
static void free_buffer(buf_T *);
static void free_buffer_stuff(buf_T *, int);
static void insert_sign(buf_T *, signlist_T *, signlist_T *, int, linenr_T, int);
static int otherfile_buf(buf_T *, char_u *, struct stat *);
static int ti_change(char_u *, char_u **);

File charset.c:
void backslash_halve(char_u *);
char_u *backslash_halve_save(char_u *);
int buf_init_chartab(buf_T *, int);
int byte2cells(int);
int char2cells(int);
int chartabsize(char_u *, colnr_T);
long getdigits(char_u **);
void getvcol(win_T *, pos_T *, colnr_T *, colnr_T *, colnr_T *);
colnr_T getvcol_nolist(pos_T *);
void getvcols(win_T *, pos_T *, pos_T *, colnr_T *, colnr_T *);
void getvvcol(win_T *, pos_T *, colnr_T *, colnr_T *, colnr_T *);
int hex2nr(int);
int hexhex2nr(char_u *);
int in_win_border(win_T *, colnr_T);
int init_chartab(void);
int lbr_chartabsize(unsigned char *, colnr_T);
int lbr_chartabsize_adv(char_u **, colnr_T);
int linetabsize(char_u *);
int linetabsize_col(int, char_u *);
int ptr2cells(char_u *);
int rem_backslash(char_u *);
char_u *skipdigits(char_u *);
char_u *skiphex(char_u *);
char_u *skiptodigit(char_u *);
char_u *skiptohex(char_u *);
char_u *skiptowhite(char_u *);
char_u *skiptowhite_esc(char_u *);
char_u *skipwhite(char_u *);
char_u *str_foldcase(char_u *, int, char_u *, int);
void trans_characters(char_u *, int);
char_u *transchar(int);
char_u *transchar_byte(int);
void transchar_hex(char_u *, int);
void transchar_nonprint(char_u *, int);
char_u *transstr(char_u *);
int vim_isIDc(int);
int vim_isblankline(char_u *);
int vim_isdigit(int);
int vim_isfilec(int);
int vim_isfilec_or_wc(int);
int vim_islower(int);
int vim_isprintc(int);
int vim_isprintc_strict(int);
int vim_isupper(int);
int vim_iswordc(int);
int vim_iswordc_buf(int, buf_T *);
int vim_iswordp(char_u *);
int vim_iswordp_buf(char_u *, buf_T *);
int vim_isxdigit(int);
void vim_str2nr(char_u *, int *, int *, int, int, long *, unsigned long *);
int vim_strnsize(char_u *, int);
int vim_strsize(char_u *);
int vim_tolower(int);
int vim_toupper(int);
int win_lbr_chartabsize(win_T *, char_u *, colnr_T, int *);
int win_linetabsize(win_T *, char_u *, colnr_T);
static int win_nolbr_chartabsize(win_T *, char_u *, colnr_T, int *);

File diff.c:
void diff_buf_add(buf_T *);
void diff_buf_adjust(win_T *);
void diff_buf_delete(buf_T *);
int diff_check(win_T *, linenr_T);
int diff_check_fill(win_T *, linenr_T);
void diff_clear(tabpage_T *);
int diff_find_change(win_T *, linenr_T, int *, int *);
linenr_T diff_get_corresponding_line(buf_T *, linenr_T, buf_T *, linenr_T);
int diff_infold(win_T *, linenr_T);
void diff_invalidate(buf_T *);
linenr_T diff_lnum_win(linenr_T, win_T *);
void diff_mark_adjust(linenr_T, linenr_T, long, long);
int diff_mode_buf(buf_T *);
int diff_move_to(int, long);
void diff_set_topline(win_T *, win_T *);
void diff_win_options(win_T *, int);
int diffopt_changed(void);
int diffopt_horizontal(void);
void ex_diffgetput(exarg_T *);
void ex_diffoff(exarg_T *);
void ex_diffpatch(exarg_T *);
void ex_diffsplit(exarg_T *);
void ex_diffthis(exarg_T *);
void ex_diffupdate(exarg_T *);
void nv_diffgetput(int);
static int diff_cmp(char_u *, char_u *);
static int diff_equal_entry(diff_T *, int, int);
static void diff_file(char_u *, char_u *, char_u *);
static void diff_redraw(int);
static int diff_write(buf_T *, char_u *);

File digraph.c:
int do_digraph(int);
void ex_loadkeymap(exarg_T *);
int get_digraph(int);
int getdigraph(int, int, int);
char_u *keymap_init(void);
void listdigraphs(void);
void putdigraph(char_u *);
static int getexactdigraph(int, int, int);
static void keymap_unload(void);
static void printdigraph(digr_T *);

File edit.c:
char_u *add_char2buf(int, char_u *);
void auto_format(int, int);
void backspace_until_column(int);
void beginline(int);
void change_indent(int, int, int, int, int);
int comp_textwidth(int);
int cursor_down(long, int);
int cursor_up(long, int);
void display_dollar(colnr_T);
int edit(int, int, long);
void edit_putchar(int, int);
void edit_unputchar(void);
char_u *find_word_end(char_u *);
char_u *find_word_start(char_u *);
void fix_indent(void);
void fixthisline(int (*)(void));
char_u *get_last_insert(void);
char_u *get_last_insert_save(void);
int get_literal(void);
int hkmap(int);
int in_cinkeys(int, int, int);
int ins_compl_active(void);
int ins_compl_add_infercase(char_u *, int, int, char_u *, int, int);
int ins_compl_add_tv(typval_T *, int);
void ins_compl_check_keys(int);
void ins_compl_show_pum(void);
int ins_copychar(linenr_T);
void insertchar(int, int, int);
int oneleft(void);
int oneright(void);
void replace_push(int);
int replace_push_mb(char_u *);
void set_completion(colnr_T, list_T *);
void set_last_insert(int);
int stop_arrow(void);
int stuff_inserted(int, long, int);
void truncate_spaces(char_u *);
int vim_is_ctrl_x_key(int);
static void check_auto_format(int);
static void check_spell_redraw(void);
static int del_char_after_col(int);
static char_u *do_insert_char_pre(int);
static int echeck_abbr(int);
static colnr_T get_nolist_virtcol(void);
static int has_compl_option(int);
static int ins_bs(int, int, int *);
static void ins_bs_one(colnr_T *);
static int ins_compl_add(char_u *, int, int, char_u *, char_u **, int, int, int);
static void ins_compl_add_list(list_T *);
static void ins_compl_add_matches(int, char_u **, int);
static void ins_compl_addleader(int);
static void ins_compl_clear(void);
static void ins_compl_del_pum(void);
static void ins_compl_delete(void);
static int ins_compl_equal(char_u *, int, compl_T *, compl_T *);
static void ins_compl_fixRedoBufForLeader(char_u *);
static void ins_compl_free(void);
static void ins_compl_insert(void);
static int ins_compl_key2count(int);
static int ins_compl_key2dir(int);
static void ins_compl_new_leader(void);
static int ins_compl_next(int, int, int);
static int ins_compl_prep(int);
static int ins_compl_pum_key(int);
static void ins_compl_upd_pum(void);
static int ins_complete(int);
static void ins_ctrl_o(void);
static void ins_down(int);
static int ins_eol(int);
static void ins_mousescroll(int);
static void ins_pagedown(void);
static void ins_pageup(void);
static void ins_redraw(int);
static void ins_s_left(void);
static void ins_s_right(void);
static int ins_tab(void);
static void ins_up(int);
static void insert_special(int, int, int);
static void mb_replace_pop_ins(int);
static int pum_wanted(void);
static unsigned int quote_meta(char_u *, char_u *, int);
static void redo_literal(int);
static void replace_do_bs(int);
static void replace_join(int);
static void replace_pop_ins(void);
static void start_arrow(pos_T *);
static void stop_insert(pos_T *, int);
static void undisplay_dollar(void);

File eval.c:
void *call_func_retlist(char_u *, int, char_u **, int);
long call_func_retnr(char_u *, int, char_u **, int);
void *call_func_retstr(char_u *, int, char_u **, int);
int call_vim_function(char_u *, int, char_u **, int, int, typval_T *);
void clear_tv(typval_T *);
void copy_tv(typval_T *, typval_T *);
int current_func_returned(void);
void del_menutrans_vars(void);
int dict_add(dict_T *, dictitem_T *);
int dict_add_list(dict_T *, char *, list_T *);
int dict_add_nr_str(dict_T *, char *, long, char_u *);
dict_T *dict_alloc(void);
void dict_extend(dict_T *, dict_T *, char_u *);
dictitem_T *dict_find(dict_T *, char_u *, int);
void dict_free(dict_T *, int);
dictitem_T *dict_lookup(hashitem_T *);
void dict_unref(dict_T *);
dictitem_T *dictitem_alloc(char_u *);
void dictitem_free(dictitem_T *);
void discard_pending_return(void *);
int do_return(exarg_T *, int, int, void *);
long do_searchpair(char_u *, char_u *, char_u *, int, char_u *, int, pos_T *, linenr_T, long);
char_u *do_string_sub(char_u *, char_u *, char_u *, char_u *);
int do_unlet(char_u *, int);
int eval_charconvert(char_u *, char_u *, char_u *, char_u *);
void eval_diff(char_u *, char_u *, char_u *);
typval_T *eval_expr(char_u *, char_u **);
int eval_foldexpr(char_u *, int *);
void *eval_for_line(char_u *, int *, char_u **, int);
void eval_init(void);
void eval_patch(char_u *, char_u *, char_u *);
int eval_printexpr(char_u *, char_u *);
list_T *eval_spell_expr(char_u *, char_u *);
int eval_to_bool(char_u *, int *, char_u **, int);
int eval_to_number(char_u *);
char_u *eval_to_string(char_u *, char_u **, int);
char_u *eval_to_string_safe(char_u *, char_u **, int);
char_u *eval_to_string_skip(char_u *, char_u **, int);
void ex_call(exarg_T *);
void ex_delfunction(exarg_T *);
void ex_echo(exarg_T *);
void ex_echohl(exarg_T *);
void ex_execute(exarg_T *);
void ex_function(exarg_T *);
void ex_let(exarg_T *);
void ex_lockvar(exarg_T *);
void ex_oldfiles(exarg_T *);
void ex_return(exarg_T *);
void ex_unlet(exarg_T *);
void free_for_info(void *);
void free_tv(typval_T *);
linenr_T *func_breakpoint(void *);
int func_call(char_u *, typval_T *, dict_T *, typval_T *);
int *func_dbg_tick(void *);
void func_dump_profile(FILE *);
int func_has_abort(void *);
int func_has_ended(void *);
int func_level(void *);
void func_line_end(void *);
void func_line_exec(void *);
void func_line_start(void *);
char_u *func_name(void *);
void func_ref(char_u *);
void func_unref(char_u *);
int garbage_collect(void);
long get_dict_number(dict_T *, char_u *);
char_u *get_dict_string(dict_T *, char_u *, int);
char_u *get_expanded_name(char_u *, int);
char_u *get_expr_name(expand_T *, int);
char_u *get_func_line(int, void *, int);
char_u *get_function_name(expand_T *, int);
char_u *get_return_cmd(void *);
int get_spellword(list_T *, char_u **);
long get_tv_number_chk(typval_T *, int *);
char_u *get_tv_string_chk(typval_T *);
char_u *get_user_func_name(expand_T *, int);
char_u *get_user_var_name(expand_T *, int);
char_u *get_var_value(char_u *);
list_T *get_vim_var_list(int);
long get_vim_var_nr(int);
char_u *get_vim_var_str(int);
void init_var_dict(dict_T *, dictitem_T *, int);
void last_set_msg(scid_T);
void list_add_watch(list_T *, listwatch_T *);
list_T *list_alloc(void);
void list_append(list_T *, listitem_T *);
int list_append_dict(list_T *, dict_T *);
int list_append_string(list_T *, char_u *, int);
int list_append_tv(list_T *, typval_T *);
listitem_T *list_find(list_T *, long);
char_u *list_find_str(list_T *, long);
void list_free(list_T *, int);
int list_insert_tv(list_T *, typval_T *, listitem_T *);
void list_rem_watch(list_T *, listwatch_T *);
void list_remove(list_T *, listitem_T *, listitem_T *);
void list_unref(list_T *);
listitem_T *listitem_alloc(void);
void listitem_free(listitem_T *);
void listitem_remove(list_T *, listitem_T *);
int modify_fname(char_u *, int *, char_u **, char_u **, int *);
void new_script_vars(scid_T);
int next_for_item(void *, char_u *);
void prof_child_enter(proftime_T *);
void prof_child_exit(proftime_T *);
int read_viminfo_varlist(vir_T *, int);
void restore_funccal(void *);
void *save_funccal(void);
char_u *set_cmdarg(exarg_T *, char_u *);
void set_context_for_expression(expand_T *, char_u *, cmdidx_T);
void set_internal_string_var(char_u *, char_u *);
void set_ref_in_ht(hashtab_T *, int);
void set_ref_in_item(typval_T *, int);
void set_ref_in_list(list_T *, int);
void set_reg_var(int);
void set_vcount(long, long, int);
void set_vim_var_char(int);
void set_vim_var_list(int, list_T *);
void set_vim_var_nr(int, long);
void set_vim_var_string(int, char_u *, int);
int skip_expr(char_u **);
int store_session_globals(FILE *);
int translated_function_exists(char_u *);
void unref_var_dict(dict_T *);
char_u *v_exception(char_u *);
char_u *v_throwpoint(char_u *);
int var_redir_start(char_u *, int);
void var_redir_stop(void);
void var_redir_str(char_u *, int);
void vars_clear(hashtab_T *);
float_T vim_round(float_T);
void write_viminfo_varlist(FILE *);
static char_u *autoload_name(char_u *);
static int builtin_function(char_u *);
static int call_func(char_u *, int, typval_T *, int, typval_T *, linenr_T, linenr_T, int *, int, dict_T *);
static void call_user_func(ufunc_T *, int, typval_T *, typval_T *, linenr_T, linenr_T, dict_T *);
static void cat_func_name(char_u *, ufunc_T *);
static char_u *cat_prefix_varname(int, char_u *);
static int check_changedtick(char_u *);
static char_u *deref_func_name(char_u *, int *);
static int dict_equal(dict_T *, dict_T *, int, int);
static void dict_list(typval_T *, int, typval_T *, typval_T *);
static void dictitem_remove(dict_T *, dictitem_T *);
static char_u *echo_string(typval_T *, char_u **, char_u *, int);
static void emsg_funcname(char *, char_u *);
static int eval0(char_u *, typval_T *, char_u **, int);
static int eval1(char_u **, typval_T *, int);
static int eval3(char_u **, typval_T *, int);
static int eval4(char_u **, typval_T *, int);
static int eval5(char_u **, typval_T *, int);
static int eval6(char_u **, typval_T *, int, int);
static int eval7(char_u **, typval_T *, int, int);
static int eval_fname_script(char_u *);
static int eval_isnamec(int);
static char_u *ex_let_one(char_u *, typval_T *, int, char_u *, char_u *);
static int ex_let_vars(char_u *, typval_T *, int, int, int, char_u *);
static void ex_unletlock(exarg_T *, char_u *, int);
static void f_abs(typval_T *, typval_T *);
static void f_acos(typval_T *, typval_T *);
static void f_add(typval_T *, typval_T *);
static void f_and(typval_T *, typval_T *);
static void f_append(typval_T *, typval_T *);
static void f_argc(typval_T *, typval_T *);
static void f_argidx(typval_T *, typval_T *);
static void f_argv(typval_T *, typval_T *);
static void f_asin(typval_T *, typval_T *);
static void f_atan(typval_T *, typval_T *);
static void f_atan2(typval_T *, typval_T *);
static void f_browse(typval_T *, typval_T *);
static void f_browsedir(typval_T *, typval_T *);
static void f_bufexists(typval_T *, typval_T *);
static void f_buflisted(typval_T *, typval_T *);
static void f_bufloaded(typval_T *, typval_T *);
static void f_bufname(typval_T *, typval_T *);
static void f_bufnr(typval_T *, typval_T *);
static void f_bufwinnr(typval_T *, typval_T *);
static void f_byte2line(typval_T *, typval_T *);
static void f_byteidx(typval_T *, typval_T *);
static void f_call(typval_T *, typval_T *);
static void f_ceil(typval_T *, typval_T *);
static void f_changenr(typval_T *, typval_T *);
static void f_char2nr(typval_T *, typval_T *);
static void f_cindent(typval_T *, typval_T *);
static void f_clearmatches(typval_T *, typval_T *);
static void f_col(typval_T *, typval_T *);
static void f_complete(typval_T *, typval_T *);
static void f_complete_add(typval_T *, typval_T *);
static void f_complete_check(typval_T *, typval_T *);
static void f_confirm(typval_T *, typval_T *);
static void f_copy(typval_T *, typval_T *);
static void f_cos(typval_T *, typval_T *);
static void f_cosh(typval_T *, typval_T *);
static void f_count(typval_T *, typval_T *);
static void f_cscope_connection(typval_T *, typval_T *);
static void f_cursor(typval_T *, typval_T *);
static void f_deepcopy(typval_T *, typval_T *);
static void f_delete(typval_T *, typval_T *);
static void f_did_filetype(typval_T *, typval_T *);
static void f_diff_filler(typval_T *, typval_T *);
static void f_diff_hlID(typval_T *, typval_T *);
static void f_empty(typval_T *, typval_T *);
static void f_escape(typval_T *, typval_T *);
static void f_eval(typval_T *, typval_T *);
static void f_eventhandler(typval_T *, typval_T *);
static void f_executable(typval_T *, typval_T *);
static void f_exists(typval_T *, typval_T *);
static void f_exp(typval_T *, typval_T *);
static void f_expand(typval_T *, typval_T *);
static void f_extend(typval_T *, typval_T *);
static void f_feedkeys(typval_T *, typval_T *);
static void f_filereadable(typval_T *, typval_T *);
static void f_filewritable(typval_T *, typval_T *);
static void f_filter(typval_T *, typval_T *);
static void f_finddir(typval_T *, typval_T *);
static void f_findfile(typval_T *, typval_T *);
static void f_float2nr(typval_T *, typval_T *);
static void f_floor(typval_T *, typval_T *);
static void f_fmod(typval_T *, typval_T *);
static void f_fnameescape(typval_T *, typval_T *);
static void f_fnamemodify(typval_T *, typval_T *);
static void f_foldclosed(typval_T *, typval_T *);
static void f_foldclosedend(typval_T *, typval_T *);
static void f_foldlevel(typval_T *, typval_T *);
static void f_foldtext(typval_T *, typval_T *);
static void f_foldtextresult(typval_T *, typval_T *);
static void f_foreground(typval_T *, typval_T *);
static void f_function(typval_T *, typval_T *);
static void f_garbagecollect(typval_T *, typval_T *);
static void f_get(typval_T *, typval_T *);
static void f_getbufline(typval_T *, typval_T *);
static void f_getbufvar(typval_T *, typval_T *);
static void f_getchar(typval_T *, typval_T *);
static void f_getcharmod(typval_T *, typval_T *);
static void f_getcmdline(typval_T *, typval_T *);
static void f_getcmdpos(typval_T *, typval_T *);
static void f_getcmdtype(typval_T *, typval_T *);
static void f_getcwd(typval_T *, typval_T *);
static void f_getfontname(typval_T *, typval_T *);
static void f_getfperm(typval_T *, typval_T *);
static void f_getfsize(typval_T *, typval_T *);
static void f_getftime(typval_T *, typval_T *);
static void f_getftype(typval_T *, typval_T *);
static void f_getline(typval_T *, typval_T *);
static void f_getmatches(typval_T *, typval_T *);
static void f_getpid(typval_T *, typval_T *);
static void f_getpos(typval_T *, typval_T *);
static void f_getqflist(typval_T *, typval_T *);
static void f_getreg(typval_T *, typval_T *);
static void f_getregtype(typval_T *, typval_T *);
static void f_gettabvar(typval_T *, typval_T *);
static void f_gettabwinvar(typval_T *, typval_T *);
static void f_getwinposx(typval_T *, typval_T *);
static void f_getwinposy(typval_T *, typval_T *);
static void f_getwinvar(typval_T *, typval_T *);
static void f_glob(typval_T *, typval_T *);
static void f_globpath(typval_T *, typval_T *);
static void f_has(typval_T *, typval_T *);
static void f_has_key(typval_T *, typval_T *);
static void f_haslocaldir(typval_T *, typval_T *);
static void f_hasmapto(typval_T *, typval_T *);
static void f_histadd(typval_T *, typval_T *);
static void f_histdel(typval_T *, typval_T *);
static void f_histget(typval_T *, typval_T *);
static void f_histnr(typval_T *, typval_T *);
static void f_hlID(typval_T *, typval_T *);
static void f_hlexists(typval_T *, typval_T *);
static void f_hostname(typval_T *, typval_T *);
static void f_iconv(typval_T *, typval_T *);
static void f_indent(typval_T *, typval_T *);
static void f_index(typval_T *, typval_T *);
static void f_input(typval_T *, typval_T *);
static void f_inputdialog(typval_T *, typval_T *);
static void f_inputlist(typval_T *, typval_T *);
static void f_inputrestore(typval_T *, typval_T *);
static void f_inputsave(typval_T *, typval_T *);
static void f_inputsecret(typval_T *, typval_T *);
static void f_insert(typval_T *, typval_T *);
static void f_invert(typval_T *, typval_T *);
static void f_isdirectory(typval_T *, typval_T *);
static void f_islocked(typval_T *, typval_T *);
static void f_items(typval_T *, typval_T *);
static void f_join(typval_T *, typval_T *);
static void f_keys(typval_T *, typval_T *);
static void f_last_buffer_nr(typval_T *, typval_T *);
static void f_len(typval_T *, typval_T *);
static void f_libcall(typval_T *, typval_T *);
static void f_libcallnr(typval_T *, typval_T *);
static void f_line(typval_T *, typval_T *);
static void f_line2byte(typval_T *, typval_T *);
static void f_lispindent(typval_T *, typval_T *);
static void f_localtime(typval_T *, typval_T *);
static void f_log(typval_T *, typval_T *);
static void f_log10(typval_T *, typval_T *);
static void f_map(typval_T *, typval_T *);
static void f_maparg(typval_T *, typval_T *);
static void f_mapcheck(typval_T *, typval_T *);
static void f_match(typval_T *, typval_T *);
static void f_matchadd(typval_T *, typval_T *);
static void f_matcharg(typval_T *, typval_T *);
static void f_matchdelete(typval_T *, typval_T *);
static void f_matchend(typval_T *, typval_T *);
static void f_matchlist(typval_T *, typval_T *);
static void f_matchstr(typval_T *, typval_T *);
static void f_max(typval_T *, typval_T *);
static void f_min(typval_T *, typval_T *);
static void f_mkdir(typval_T *, typval_T *);
static void f_mode(typval_T *, typval_T *);
static void f_nextnonblank(typval_T *, typval_T *);
static void f_nr2char(typval_T *, typval_T *);
static void f_or(typval_T *, typval_T *);
static void f_pathshorten(typval_T *, typval_T *);
static void f_pow(typval_T *, typval_T *);
static void f_prevnonblank(typval_T *, typval_T *);
static void f_printf(typval_T *, typval_T *);
static void f_pumvisible(typval_T *, typval_T *);
static void f_pyeval(typval_T *, typval_T *);
static void f_range(typval_T *, typval_T *);
static void f_readfile(typval_T *, typval_T *);
static void f_reltime(typval_T *, typval_T *);
static void f_reltimestr(typval_T *, typval_T *);
static void f_remote_expr(typval_T *, typval_T *);
static void f_remote_foreground(typval_T *, typval_T *);
static void f_remote_peek(typval_T *, typval_T *);
static void f_remote_read(typval_T *, typval_T *);
static void f_remote_send(typval_T *, typval_T *);
static void f_remove(typval_T *, typval_T *);
static void f_rename(typval_T *, typval_T *);
static void f_repeat(typval_T *, typval_T *);
static void f_resolve(typval_T *, typval_T *);
static void f_reverse(typval_T *, typval_T *);
static void f_round(typval_T *, typval_T *);
static void f_screenattr(typval_T *, typval_T *);
static void f_screenchar(typval_T *, typval_T *);
static void f_screencol(typval_T *, typval_T *);
static void f_screenrow(typval_T *, typval_T *);
static void f_search(typval_T *, typval_T *);
static void f_searchdecl(typval_T *, typval_T *);
static void f_searchpair(typval_T *, typval_T *);
static void f_searchpairpos(typval_T *, typval_T *);
static void f_searchpos(typval_T *, typval_T *);
static void f_server2client(typval_T *, typval_T *);
static void f_serverlist(typval_T *, typval_T *);
static void f_setbufvar(typval_T *, typval_T *);
static void f_setcmdpos(typval_T *, typval_T *);
static void f_setline(typval_T *, typval_T *);
static void f_setloclist(typval_T *, typval_T *);
static void f_setmatches(typval_T *, typval_T *);
static void f_setpos(typval_T *, typval_T *);
static void f_setqflist(typval_T *, typval_T *);
static void f_setreg(typval_T *, typval_T *);
static void f_settabvar(typval_T *, typval_T *);
static void f_settabwinvar(typval_T *, typval_T *);
static void f_setwinvar(typval_T *, typval_T *);
static void f_sha256(typval_T *, typval_T *);
static void f_shellescape(typval_T *, typval_T *);
static void f_shiftwidth(typval_T *, typval_T *);
static void f_simplify(typval_T *, typval_T *);
static void f_sin(typval_T *, typval_T *);
static void f_sinh(typval_T *, typval_T *);
static void f_sort(typval_T *, typval_T *);
static void f_soundfold(typval_T *, typval_T *);
static void f_spellbadword(typval_T *, typval_T *);
static void f_spellsuggest(typval_T *, typval_T *);
static void f_split(typval_T *, typval_T *);
static void f_sqrt(typval_T *, typval_T *);
static void f_str2float(typval_T *, typval_T *);
static void f_str2nr(typval_T *, typval_T *);
static void f_strchars(typval_T *, typval_T *);
static void f_strdisplaywidth(typval_T *, typval_T *);
static void f_strftime(typval_T *, typval_T *);
static void f_stridx(typval_T *, typval_T *);
static void f_string(typval_T *, typval_T *);
static void f_strlen(typval_T *, typval_T *);
static void f_strpart(typval_T *, typval_T *);
static void f_strridx(typval_T *, typval_T *);
static void f_strtrans(typval_T *, typval_T *);
static void f_strwidth(typval_T *, typval_T *);
static void f_submatch(typval_T *, typval_T *);
static void f_substitute(typval_T *, typval_T *);
static void f_synID(typval_T *, typval_T *);
static void f_synIDattr(typval_T *, typval_T *);
static void f_synIDtrans(typval_T *, typval_T *);
static void f_synconcealed(typval_T *, typval_T *);
static void f_synstack(typval_T *, typval_T *);
static void f_system(typval_T *, typval_T *);
static void f_tabpagebuflist(typval_T *, typval_T *);
static void f_tabpagenr(typval_T *, typval_T *);
static void f_tabpagewinnr(typval_T *, typval_T *);
static void f_tagfiles(typval_T *, typval_T *);
static void f_taglist(typval_T *, typval_T *);
static void f_tan(typval_T *, typval_T *);
static void f_tanh(typval_T *, typval_T *);
static void f_tempname(typval_T *, typval_T *);
static void f_test(typval_T *, typval_T *);
static void f_tolower(typval_T *, typval_T *);
static void f_toupper(typval_T *, typval_T *);
static void f_tr(typval_T *, typval_T *);
static void f_trunc(typval_T *, typval_T *);
static void f_type(typval_T *, typval_T *);
static void f_undofile(typval_T *, typval_T *);
static void f_undotree(typval_T *, typval_T *);
static void f_values(typval_T *, typval_T *);
static void f_virtcol(typval_T *, typval_T *);
static void f_visualmode(typval_T *, typval_T *);
static void f_wildmenumode(typval_T *, typval_T *);
static void f_winbufnr(typval_T *, typval_T *);
static void f_wincol(typval_T *, typval_T *);
static void f_winheight(typval_T *, typval_T *);
static void f_winline(typval_T *, typval_T *);
static void f_winnr(typval_T *, typval_T *);
static void f_winrestcmd(typval_T *, typval_T *);
static void f_winrestview(typval_T *, typval_T *);
static void f_winsaveview(typval_T *, typval_T *);
static void f_winwidth(typval_T *, typval_T *);
static void f_writefile(typval_T *, typval_T *);
static void f_xor(typval_T *, typval_T *);
static void filter_map(typval_T *, typval_T *, int);
static int filter_map_one(typval_T *, char_u *, int, int *);
static buf_T *find_buffer(typval_T *);
static ufunc_T *find_func(char_u *);
static int find_internal_func(char_u *);
static char_u *find_name_end(char_u *, char_u **, char_u **, int);
static char_u *find_option_end(char_u **, int *);
static void find_some_match(typval_T *, typval_T *, int);
static dictitem_T *find_var(char_u *, hashtab_T **);
static hashtab_T *find_var_ht(char_u *, char_u **);
static dictitem_T *find_var_in_ht(hashtab_T *, int, char_u *, int);
static win_T *find_win_by_nr(typval_T *, tabpage_T *);
static void findfilendir(typval_T *, typval_T *, int);
static void foldclosed_both(typval_T *, int, typval_T *);
static void func_do_profile(ufunc_T *);
static void func_free(ufunc_T *);
static int function_exists(char_u *);
static buf_T *get_buf_tv(typval_T *, int);
static void get_buffer_lines(buf_T *, linenr_T, linenr_T, int, typval_T *);
static int get_env_len(char_u **);
static int get_float_arg(typval_T *, float_T *);
static int get_func_tv(char_u *, int, typval_T *, char_u **, linenr_T, linenr_T, int *, int, dict_T *);
static int get_id_len(char_u **);
static char_u *get_lval(char_u *, typval_T *, lval_T *, int, int, int, int);
static void get_maparg(typval_T *, typval_T *, int);
static int get_name_len(char_u **, char_u **, int, int);
static int get_option_tv(char_u **, typval_T *, int);
static int get_search_arg(typval_T *, int *);
static linenr_T get_tv_lnum(typval_T *);
static linenr_T get_tv_lnum_buf(typval_T *, buf_T *);
static char_u *get_tv_string_buf_chk(typval_T *, char_u *);
static void get_user_input(typval_T *, typval_T *, int);
static int get_var_tv(char_u *, int, typval_T *, int);
static int get_winnr(tabpage_T *, typval_T *);
static void getwinvar(typval_T *, typval_T *, int);
static int handle_subscript(char_u **, typval_T *, int, int);
static int item_compare(const void *, const void *);
static int item_compare2(const void *, const void *);
static int item_copy(typval_T *, typval_T *, int, int);
static void item_lock(typval_T *, int, int);
static void libcall_common(typval_T *, typval_T *, int);
static int list2fpos(pos_T *, int *, typval_T *, typval_T *);
static int list2proftime(proftime_T *, typval_T *, typval_T *);
static int list_append_number(list_T *, varnumber_T);
static void list_buf_vars(int *);
static list_T *list_copy(list_T *, int, int);
static int list_equal(list_T *, list_T *, int, int);
static int list_extend(list_T *, listitem_T *, list_T *, list_T *);
static long list_find_nr(list_T *, long, int *);
static void list_func_head(ufunc_T *, int);
static void list_func_vars(int *);
static void list_glob_vars(int *);
static void list_hashtable_vars(char_u *, int, int *, hashtab_T *, hashtab_T *);
static int list_join(garray_T *, list_T *, char_u *, int, int);
static void list_one_var_a(char_u *, char_u *, int, char_u *, int *);
static void list_script_vars(int *);
static void list_tab_vars(int *);
static void list_vim_vars(int *);
static void list_win_vars(int *);
static char_u *make_expanded_name(char_u *, char_u *, char_u *, char_u *);
static void max_min(int, typval_T *, typval_T *, typval_T *);
static int mkdir_recurse(char_u *, int);
static void prepare_vimvar(int, typval_T *);
static void prof_func_line(FILE *, int, proftime_T *, proftime_T *, int);
static int prof_self_cmp(const void *, const void *);
static void prof_sort_list(FILE *, ufunc_T **, int, char *, int);
static int prof_total_cmp(const void *, const void *);
static void restore_vimvar(int, typval_T *);
static int script_autoload(char_u *, int);
static int search_cmn(typval_T *, pos_T *, int *);
static int searchpair_cmn(typval_T *, pos_T *);
static void set_qf_ll_list(win_T *, typval_T *, typval_T *, typval_T *, typval_T *);
static void set_var(char_u *, typval_T *, int);
static void set_var_lval(lval_T *, char_u *, typval_T *, int, char_u *);
static void setwinvar(typval_T *, int, typval_T *);
static char_u *skip_var_list(char_u *, int *, int *);
static char_u *skip_var_one(char_u *);
static char_u *string_quote(char_u *, int);
static char_u *trans_function_name(char_u **, int, int, funcdict_T *);
static char_u *tv2string(typval_T *, char_u **, char_u *, int);
static int tv_check_lock(int, char_u *);
static int tv_equal(typval_T *, typval_T *, int, int);
static int tv_islocked(typval_T *, typval_T *, typval_T *);
static int tv_op(typval_T *, typval_T *, char_u *);
static int valid_varname(char_u *);
static pos_T *var2fpos(typval_T *, int, int *);
static int var_check_func_name(char_u *, int);
static int var_check_ro(int, char_u *);
static var_flavour_T var_flavour(char_u *);
static void vars_clear_ext(hashtab_T *, int);

File ex_cmds.c:
void append_redir(char_u *, int, char_u *, char_u *);
char_u *check_help_lang(char_u *);
int check_overwrite(exarg_T *, char_u *, char_u *, int, buf_T *);
int check_restricted(void);
int check_secure(void);
void do_ascii(exarg_T *);
void do_bang(int, exarg_T *, int, int, int);
int do_ecmd(int, char_u *, char_u *, exarg_T *, linenr_T, int, win_T *);
void do_fixdel(exarg_T *);
int do_move(linenr_T, linenr_T, linenr_T);
void do_shell(char_u *, int);
void do_sub(exarg_T *);
int do_sub_msg(int);
void do_wqall(exarg_T *);
int do_write(exarg_T *);
void ex_align(exarg_T *);
void ex_append(exarg_T *);
void ex_change(exarg_T *);
void ex_copy(linenr_T, linenr_T, linenr_T);
void ex_exusage(exarg_T *);
void ex_file(exarg_T *);
void ex_global(exarg_T *);
void ex_help(exarg_T *);
void ex_helptags(exarg_T *);
void ex_retab(exarg_T *);
void ex_sign(exarg_T *);
void ex_sort(exarg_T *);
void ex_update(exarg_T *);
void ex_viusage(exarg_T *);
void ex_wnext(exarg_T *);
void ex_write(exarg_T *);
void ex_z(exarg_T *);
int find_help_tags(char_u *, int *, char_u ***, int);
void fix_help_buffer(void);
char_u *get_sign_name(expand_T *, int);
int getfile(int, char_u *, char_u *, int, linenr_T, int);
void global_exe(char_u *);
int help_heuristic(char_u *, int, int);
char_u *make_filter_cmd(char_u *, char_u *, char_u *);
int not_writing(void);
int prepare_tagpreview(int);
void print_line(linenr_T, int, int);
void print_line_no_prefix(linenr_T, int, int);
int read_viminfo(char_u *, int);
int read_viminfo_sub_string(vir_T *, int);
int rename_buffer(char_u *);
void set_context_in_sign_cmd(expand_T *, char_u *);
int sign_get_attr(int, int);
char_u *sign_get_text(int);
char_u *sign_typenr2name(int);
int viminfo_error(char *, char *, char_u *);
int viminfo_readline(vir_T *);
char_u *viminfo_readstring(vir_T *, int, int);
void viminfo_writestring(FILE *, char_u *);
void write_viminfo(char_u *, int);
void write_viminfo_sub_string(FILE *);
static int check_readonly(int *, buf_T *);
static void delbuf_msg(char_u *);
static void do_viminfo(FILE *, FILE *, int);
static int help_compare(const void *, const void *);
static int linelen(int *);
static int no_viminfo(void);
static void sign_list_defined(sign_T *);
static int sort_compare(const void *, const void *);
static char_u *viminfo_filename(char_u *);

File ex_cmds2.c:
int autowrite(buf_T *, int);
void autowrite_all(void);
int buf_write_all(buf_T *, int);
int can_abandon(buf_T *, int);
void check_arg_idx(win_T *);
int check_changed(buf_T *, int, int, int, int);
int check_changed_any(int);
int check_fname(void);
void dbg_breakpoint(char_u *, linenr_T);
void dbg_check_breakpoint(exarg_T *);
int dbg_check_skipped(exarg_T *);
linenr_T dbg_find_breakpoint(int, char_u *, linenr_T);
void dialog_changed(buf_T *, int);
void do_argfile(exarg_T *, int);
void do_debug(char_u *);
void do_finish(exarg_T *, int);
int do_in_runtimepath(char_u *, int, void (*)(char_u *, void *), void *);
int do_source(char_u *, int, int);
void ex_argadd(exarg_T *);
void ex_argdelete(exarg_T *);
void ex_argedit(exarg_T *);
void ex_args(exarg_T *);
void ex_argument(exarg_T *);
void ex_breakadd(exarg_T *);
void ex_breakdel(exarg_T *);
void ex_breaklist(exarg_T *);
void ex_checktime(exarg_T *);
void ex_compiler(exarg_T *);
void ex_debug(exarg_T *);
void ex_debuggreedy(exarg_T *);
void ex_finish(exarg_T *);
void ex_language(exarg_T *);
void ex_last(exarg_T *);
void ex_listdo(exarg_T *);
void ex_next(exarg_T *);
void ex_options(exarg_T *);
void ex_previous(exarg_T *);
void ex_profile(exarg_T *);
void ex_rewind(exarg_T *);
void ex_runtime(exarg_T *);
void ex_scriptencoding(exarg_T *);
void ex_scriptnames(exarg_T *);
void ex_source(exarg_T *);
int get_arglist(garray_T *, char_u *);
int get_arglist_exp(char_u *, int *, char_u ***, int);
char_u *get_lang_arg(expand_T *, int);
char_u *get_locales(expand_T *, int);
char_u *get_mess_lang(void);
char_u *get_profile_name(expand_T *, int);
char_u *get_scriptname(scid_T);
char_u *getsourceline(int, void *, int);
int has_profiling(int, char_u *, int *);
int prof_def_func(void);
void prof_inchar_enter(void);
void prof_inchar_exit(void);
void profile_add(proftime_T *, proftime_T *);
int profile_cmp(const proftime_T *, const proftime_T *);
void profile_divide(proftime_T *, int, proftime_T *);
void profile_dump(void);
void profile_end(proftime_T *);
int profile_equal(proftime_T *, proftime_T *);
void profile_get_wait(proftime_T *);
char *profile_msg(proftime_T *);
int profile_passed_limit(proftime_T *);
void profile_self(proftime_T *, proftime_T *, proftime_T *);
void profile_setlimit(long, proftime_T *);
void profile_start(proftime_T *);
void profile_sub(proftime_T *, proftime_T *);
void profile_sub_wait(proftime_T *, proftime_T *);
void profile_zero(proftime_T *);
void script_line_end(void);
void script_line_exec(void);
void script_line_start(void);
void script_prof_restore(proftime_T *);
void script_prof_save(proftime_T *);
void set_context_in_profile_cmd(expand_T *, char_u *);
void set_lang_var(void);
linenr_T *source_breakpoint(void *);
int *source_dbg_tick(void *);
int source_finished(char_u *(*)(int, void *, int), void *);
int source_level(void *);
int source_runtime(char_u *, int);
static int alist_add_list(int, char_u **, int);
static void alist_check_arg_idx(void);
static void cmd_source(char_u *, exarg_T *);
static int dbg_parsearg(char_u *, garray_T *);
static linenr_T debuggy_find(int, char_u *, linenr_T, garray_T *, int *);
static int do_arglist(char_u *, int, int);
static int editing_arg_idx(win_T *);
static char_u **find_locales(void);
static FILE *fopen_noinh_readbin(char *);
static char_u *get_one_sourceline(struct source_cookie *);
static void source_callback(char_u *, void *);

File ex_docmd.c:
void alist_add(alist_T *, char_u *, int);
void alist_clear(alist_T *);
void alist_init(alist_T *);
void alist_new(void);
void alist_set(alist_T *, int, char_u **, int, int *, int);
void alist_unlink(alist_T *);
char_u *check_nextcmd(char_u *);
int checkforcmd(char_u **, char *, int);
int cmd_exists(char_u *);
void dialog_msg(char_u *, char *, char_u *);
int do_cmdline(char_u *, char_u *(*)(int, void *, int), void *, int);
int do_cmdline_cmd(char_u *);
void do_exedit(exarg_T *, win_T *);
void do_exmode(int);
void do_sleep(long);
int ends_excmd(int);
char_u *eval_vars(char_u *, char_u *, int *, linenr_T *, char_u **, int *);
void ex_all(exarg_T *);
void ex_cd(exarg_T *);
void ex_comclear(exarg_T *);
void ex_ni(exarg_T *);
void ex_splitview(exarg_T *);
void exec_normal_cmd(char_u *, int, int);
int expand_filename(exarg_T *, char_u **, char_u **);
char_u *expand_sfile(char_u *);
int find_cmdline_var(char_u *, int *);
char_u *find_nextcmd(char_u *);
char_u *get_behave_arg(expand_T *, int);
char_u *get_command_name(expand_T *, int);
char_u *get_user_cmd_complete(expand_T *, int);
char_u *get_user_cmd_flags(expand_T *, int);
char_u *get_user_cmd_nargs(expand_T *, int);
char_u *get_user_commands(expand_T *, int);
void *getline_cookie(char_u *(*)(int, void *, int), void *);
int getline_equal(char_u *(*)(int, void *, int), void *, char_u *(*)(int, void *, int));
int modifier_len(char_u *);
void not_exiting(void);
FILE *open_exfile(char_u *, int, char *);
int parse_compl_arg(char_u *, int, int *, long *, char_u **);
void post_chdir(int);
int put_eol(FILE *);
int put_line(FILE *, char *);
void separate_nextcmd(exarg_T *);
char_u *set_one_cmd_context(expand_T *, char_u *);
char_u *skip_range(char_u *, int *);
void tabpage_close(int);
void tabpage_close_other(tabpage_T *, int);
void tabpage_new(void);
void uc_clear(garray_T *);
void update_topline_cursor(void);
int vim_mkdir_emsg(char_u *, int);
static void append_command(char_u *);
static int check_more(int, int);
static void close_redir(void);
static void do_exmap(exarg_T *, int);
static void do_ucmd(exarg_T *);
static void ex_X(exarg_T *);
static void ex_abbreviate(exarg_T *);
static void ex_abclear(exarg_T *);
static void ex_at(exarg_T *);
static void ex_autocmd(exarg_T *);
static void ex_bang(exarg_T *);
static void ex_behave(exarg_T *);
static void ex_blast(exarg_T *);
static void ex_bmodified(exarg_T *);
static void ex_bnext(exarg_T *);
static void ex_bprevious(exarg_T *);
static void ex_brewind(exarg_T *);
static void ex_buffer(exarg_T *);
static void ex_bunload(exarg_T *);
static void ex_checkpath(exarg_T *);
static void ex_close(exarg_T *);
static void ex_colorscheme(exarg_T *);
static void ex_command(exarg_T *);
static void ex_copymove(exarg_T *);
static void ex_cquit(exarg_T *);
static void ex_delcommand(exarg_T *);
static void ex_digraphs(exarg_T *);
static void ex_doautocmd(exarg_T *);
static void ex_edit(exarg_T *);
static void ex_equal(exarg_T *);
static void ex_exit(exarg_T *);
static void ex_filetype(exarg_T *);
static void ex_find(exarg_T *);
static void ex_findpat(exarg_T *);
static void ex_fold(exarg_T *);
static void ex_folddo(exarg_T *);
static void ex_foldopen(exarg_T *);
static void ex_goto(exarg_T *);
static void ex_hide(exarg_T *);
static void ex_highlight(exarg_T *);
static void ex_join(exarg_T *);
static void ex_later(exarg_T *);
static void ex_loadview(exarg_T *);
static void ex_map(exarg_T *);
static void ex_mapclear(exarg_T *);
static void ex_mark(exarg_T *);
static void ex_match(exarg_T *);
static void ex_may_print(exarg_T *);
static void ex_mkrc(exarg_T *);
static void ex_mode(exarg_T *);
static void ex_nogui(exarg_T *);
static void ex_nohlsearch(exarg_T *);
static void ex_normal(exarg_T *);
static void ex_only(exarg_T *);
static void ex_open(exarg_T *);
static void ex_operators(exarg_T *);
static void ex_pclose(exarg_T *);
static void ex_pedit(exarg_T *);
static void ex_preserve(exarg_T *);
static void ex_print(exarg_T *);
static void ex_psearch(exarg_T *);
static void ex_ptag(exarg_T *);
static void ex_put(exarg_T *);
static void ex_pwd(exarg_T *);
static void ex_quit(exarg_T *);
static void ex_quit_all(exarg_T *);
static void ex_read(exarg_T *);
static void ex_recover(exarg_T *);
static void ex_redir(exarg_T *);
static void ex_redo(exarg_T *);
static void ex_redraw(exarg_T *);
static void ex_redrawstatus(exarg_T *);
static void ex_resize(exarg_T *);
static void ex_rundo(exarg_T *);
static void ex_script_ni(exarg_T *);
static void ex_set(exarg_T *);
static void ex_setfiletype(exarg_T *);
static void ex_shell(exarg_T *);
static void ex_sleep(exarg_T *);
static void ex_stag(exarg_T *);
static void ex_startinsert(exarg_T *);
static void ex_stop(exarg_T *);
static void ex_stopinsert(exarg_T *);
static void ex_submagic(exarg_T *);
static void ex_swapname(exarg_T *);
static void ex_syncbind(exarg_T *);
static void ex_tabclose(exarg_T *);
static void ex_tabmove(exarg_T *);
static void ex_tabnext(exarg_T *);
static void ex_tabonly(exarg_T *);
static void ex_tabs(exarg_T *);
static void ex_tag(exarg_T *);
static void ex_tag_cmd(exarg_T *, char_u *);
static void ex_undo(exarg_T *);
static void ex_unmap(exarg_T *);
static void ex_viminfo(exarg_T *);
static void ex_win_close(int, win_T *, tabpage_T *);
static void ex_wincmd(exarg_T *);
static void ex_winpos(exarg_T *);
static void ex_winsize(exarg_T *);
static void ex_wrongmodifier(exarg_T *);
static void ex_wundo(exarg_T *);
static char_u *find_command(exarg_T *, int *);
static char_u *find_ucmd(exarg_T *, char_u *, int *, expand_T *, int *);
static linenr_T get_address(char_u **, int, int);
static void get_flags(exarg_T *, exarg_T *);
static char_u *get_loop_line(int, void *, int);
static char_u *get_view_file(int);
static char_u *invalid_range(exarg_T *);
static int put_view(FILE *, win_T *, int, unsigned int *, int);
static char_u *repl_cmdline(exarg_T *, char_u *, int, char_u *, char_u **);
static int ses_arglist(FILE *, char *, int, unsigned int *, garray_T *, garray_T *);
static int ses_do_frame(frame_T *);
static int ses_do_win(win_T *);
static int ses_fname(FILE *, unsigned int *, buf_T *, buf_T *);
static int ses_put_fname(FILE *, char_u *, unsigned int *);
static int ses_win_rec(FILE *, frame_T *, frame_T *);
static int ses_winsizes(FILE *, int, win_T *);
static char_u *skip_cmd_arg(char_u *, int);
static char_u *skip_grep_pat(exarg_T *, exarg_T *);
static int store_loop_line(garray_T *, char_u *);

File ex_eval.c:
int aborted_in_try(void);
int aborting(void);
int cause_errthrow(char_u *, int, int *);
int cleanup_conditionals(struct condstack *, int, int);
void discard_current_exception(void);
void do_errthrow(struct condstack *, char_u *);
int do_intthrow(struct condstack *);
void do_throw(struct condstack *);
void enter_cleanup(cleanup_T *);
void ex_break(exarg_T *);
void ex_catch(exarg_T *);
void ex_continue(exarg_T *);
void ex_else(exarg_T *);
void ex_endfunction(exarg_T *);
void ex_endif(exarg_T *);
void ex_endtry(exarg_T *);
void ex_endwhile(exarg_T *);
void ex_finally(exarg_T *);
void ex_if(exarg_T *);
void ex_throw(exarg_T *);
void ex_try(exarg_T *);
void ex_while(exarg_T *);
int has_loop_cmd(char_u *);
void leave_cleanup(cleanup_T *);
void report_discard_pending(int, void *);
void report_make_pending(int, void *);
void report_resume_pending(int, void *);
void rewind_conditionals(struct condstack *, int, int, int *);
int should_abort(int);
void update_force_abort(void);
static void discard_exception(except_T *, int);
static void free_msglist(struct msglist *);
static void report_pending(int, int, void *);
static int throw_exception(void *, int, char_u *);

File ex_getln.c:
void ExpandCleanup(expand_T *);
void ExpandEscape(expand_T *, char_u *, int, char_u **, int);
int ExpandGeneric(expand_T *, regmatch_T *, int *, char_u ***, char_u *(*)(expand_T *, int), int);
void ExpandInit(expand_T *);
char_u *ExpandOne(expand_T *, char_u *, char_u *, int, int);
void add_to_history(int, char_u *, int, int);
char_u *addstar(char_u *, int, int);
int allbuf_locked(void);
int clr_history(int);
int cmd_gchar(int);
void cmd_pchar(int, int);
void cmdline_paste_str(char_u *, int);
void compute_cmdrow(void);
int curbuf_locked(void);
int del_history_entry(int, char_u *);
int del_history_idx(int, int);
void ex_history(exarg_T *);
int expand_cmdline(expand_T *, char_u *, int, int *, char_u ***);
void finish_viminfo_history(void);
int get_cmdline_pos(void);
char_u *get_cmdline_str(void);
int get_cmdline_type(void);
char_u *get_history_entry(int, int);
int get_history_idx(int);
int get_histtype(char_u *);
int get_list_range(char_u **, int *, int *);
char_u *getcmdline(int, long, int);
char_u *getcmdline_prompt(int, char_u *, int, int, char_u *);
char_u *getexline(int, void *, int);
char_u *getexmodeline(int, void *, int);
char_u *globpath(char_u *, char_u *, int);
void gotocmdline(int);
void init_history(void);
void prepare_viminfo_history(int, int);
int put_on_cmdline(char_u *, int, int);
void putcmdline(int, int);
int read_viminfo_history(vir_T *, int);
void redrawcmd(void);
void redrawcmdline(void);
void remove_key_from_history(void);
void restore_cmdline_alloc(char_u *);
char_u *save_cmdline_alloc(void);
char_u *script_get(exarg_T *, char_u *);
void set_cmd_context(expand_T *, char_u *, int, int);
int set_cmdline_pos(int);
char_u *sm_gettail(char_u *);
int text_locked(void);
void text_locked_msg(void);
void tilde_replace(char_u *, int, char_u **);
void unputcmdline(void);
char_u *vim_strsave_fnameescape(char_u *, int);
void write_viminfo_history(FILE *, int);
static int ExpandFromContext(expand_T *, char_u *, int *, char_u ***, int);
static int ExpandRTDir(char_u *, int *, char_u ***, char **);
static void alloc_cmdbuff(int);
static int calc_hist_idx(int, int);
static void *call_user_expand_func(void *(*)(char_u *, int, char_u **, int), expand_T *, int *, char_u ***);
static int ccheck_abbr(int);
static int cmdline_charsize(int);
static void cmdline_del(int);
static int cmdline_paste(int, int, int);
static void correct_cmdspos(int, int);
static void cursorcmd(void);
static void draw_cmdline(int, int);
static void escape_fname(char_u **);
static int expand_showtail(expand_T *, expand_T *);
static struct cmdline_info *get_ccline_ptr(void);
static char_u *get_history_arg(expand_T *, int);
static int in_history(int, char_u *, int, int, int);
static int nextwild(expand_T *, int, int, int);
static int realloc_cmdbuff(int);
static void redrawcmdprompt(void);
static void restore_cmdline(struct cmdline_info *);
static void save_cmdline(struct cmdline_info *);
static void set_cmdspos(void);
static void set_cmdspos_cursor(void);
static void set_expand_context(expand_T *);
static int showmatches(expand_T *, int);
static int sort_func_compare(const void *, const void *);

File farsi.c:
int F_isalpha(int);
int F_ischar(int);
int F_isdigit(int);
int cmdl_fkmap(int);
void conv_to_pstd(void);
void conv_to_pvim(void);
void farsi_fkey(cmdarg_T *);
int fkmap(int);
char_u *lrF_sub(char_u *);
char_u *lrFswap(char_u *, int);
char_u *lrswap(char_u *);
int toF_TyA(int);
static int F_is_TyB_TyC_TyD(int, int);
static int canF_Ljoin(int);
static int canF_Rjoin(int);
static void chg_c_toX_orX(void);
static void chg_c_to_X_orX_(void);
static void chg_c_to_X_or_X(void);
static void chg_l_toXor_X(void);
static void put_and_redo(int);
static void put_curr_and_l_to_X(int);
static int toF_Xor_X_(int);

File fileio.c:
int apply_autocmds(event_T, char_u *, char_u *, int, buf_T *);
int apply_autocmds_retval(event_T, char_u *, char_u *, int, buf_T *, int *);
char_u *au_event_disable(char *);
void au_event_restore(char_u *);
int au_exists(char_u *);
int au_has_group(char_u *);
void aubuflocal_remove(buf_T *);
void aucmd_prepbuf(aco_save_T *, buf_T *);
void aucmd_restbuf(aco_save_T *);
int autocmd_supported(char_u *);
void block_autocmds(void);
int buf_check_timestamp(buf_T *, int);
char_u *buf_modname(int, char_u *, char_u *, int);
void buf_reload(buf_T *, int);
void buf_store_time(buf_T *, struct stat *, char_u *);
int buf_write(buf_T *, char_u *, char_u *, linenr_T, linenr_T, exarg_T *, int, int, int, int);
int check_ei(void);
int check_file_readonly(char_u *, int);
int check_nomodeline(char_u **);
int check_timestamps(int);
void do_augroup(char_u *, int);
void do_autocmd(char_u *, int);
int do_doautocmd(char_u *, int);
void ex_doautoall(exarg_T *);
char_u *file_pat_to_reg_pat(char_u *, char_u *, char *, int);
void filemess(buf_T *, char_u *, char_u *, int);
char_u *get_augroup_name(expand_T *, int);
char_u *get_event_name(expand_T *, int);
char_u *getnextac(int, void *, int);
int has_autocmd(event_T, char_u *, buf_T *);
int has_cursorhold(void);
int has_cursormoved(void);
int has_cursormovedI(void);
int has_insertcharpre(void);
int has_textchanged(void);
int has_textchangedI(void);
int is_autocmd_blocked(void);
int match_file_list(char_u *, char_u *, char_u *);
int match_file_pat(char_u *, regprog_T *, char_u *, char_u *, char_u *, int);
char_u *modname(char_u *, char_u *, int);
void msg_add_fname(buf_T *, char_u *);
void msg_add_lines(int, long, off_t);
int prep_exarg(exarg_T *, buf_T *);
int prepare_crypt_read(FILE *);
char_u *prepare_crypt_write(buf_T *, int *);
long read_eintr(int, void *, size_t);
int readfile(char_u *, char_u *, linenr_T, linenr_T, linenr_T, exarg_T *, int);
char_u *set_context_in_autocmd(expand_T *, char_u *, int);
void set_file_options(int, exarg_T *);
void set_forced_fenc(exarg_T *);
char_u *shorten_fname(char_u *, char_u *);
char_u *shorten_fname1(char_u *);
void shorten_fnames(int);
int trigger_cursorhold(void);
void unblock_autocmds(void);
void vim_deltempdir(void);
int vim_fgets(char_u *, int, FILE *);
int vim_rename(char_u *, char_u *);
char_u *vim_tempname(int);
long write_eintr(int, void *, size_t);
void write_lnum_adjust(linenr_T);
static int apply_autocmds_group(event_T, char_u *, char_u *, int, int, buf_T *, exarg_T *);
static void au_cleanup(void);
static int au_find_group(char_u *);
static int au_get_grouparg(char_u **);
static void auto_next_pat(AutoPatCmd *, int);
static int buf_write_bytes(struct bw_info *);
static void check_marks_read(void);
static int crypt_method_from_magic(char *, int);
static int do_autocmd_event(event_T, char_u *, int, char_u *, int, int);
static event_T event_name2nr(char_u *, char_u **);
static char_u *find_end_event(char_u *, int);
static int get_fio_flags(char_u *);
static int move_lines(buf_T *, buf_T *);
static void msg_add_eol(void);
static int msg_add_fileformat(int);
static int need_conversion(char_u *);
static char_u *next_fenc(char_u **);
static int set_rw_fname(char_u *, char_u *);
static void show_autocmd(AutoPat *, event_T);
static int ucs2bytes(unsigned int, char_u **, int);

File fold.c:
void clearFolding(win_T *);
void cloneFoldGrowArray(garray_T *, garray_T *);
void closeFold(linenr_T, long);
void closeFoldRecurse(linenr_T);
void copyFoldingState(win_T *, win_T *);
void deleteFold(linenr_T, linenr_T, int, int);
void deleteFoldRecurse(garray_T *);
int find_wl_entry(win_T *, linenr_T);
void foldAdjustCursor(void);
void foldAdjustVisual(void);
void foldCheckClose(void);
void foldCreate(linenr_T, linenr_T);
void foldInitWin(win_T *);
int foldLevel(linenr_T);
int foldManualAllowed(int);
void foldMarkAdjust(win_T *, linenr_T, linenr_T, long, long);
int foldMoveTo(int, int, long);
void foldOpenCursor(void);
void foldUpdate(win_T *, linenr_T, linenr_T);
void foldUpdateAll(win_T *);
long foldedCount(win_T *, linenr_T, foldinfo_T *);
int foldmethodIsDiff(win_T *);
int foldmethodIsExpr(win_T *);
int foldmethodIsIndent(win_T *);
int foldmethodIsManual(win_T *);
int foldmethodIsMarker(win_T *);
int foldmethodIsSyntax(win_T *);
void foldtext_cleanup(char_u *);
int getDeepestNesting(void);
char_u *get_foldtext(win_T *, linenr_T, linenr_T, foldinfo_T *, char_u *);
int hasAnyFolding(win_T *);
int hasFolding(linenr_T, linenr_T *, linenr_T *);
int hasFoldingWin(win_T *, linenr_T, linenr_T *, linenr_T *, int, foldinfo_T *);
int lineFolded(win_T *, linenr_T);
void newFoldLevel(void);
void opFoldRange(linenr_T, linenr_T, int, int, int);
void openFold(linenr_T, long);
void openFoldRecurse(linenr_T);
int put_folds(FILE *, win_T *);
static int checkCloseRec(linenr_T, int, garray_T *, garray_T *);
static int check_closed(win_T *, fold_T *, int *, int, int *, linenr_T);
static void checkupdate(win_T *);
static void deleteFoldEntry(garray_T *, int, int);
static void deleteFoldMarkers(fold_T *, int, linenr_T);
static void foldAddMarker(linenr_T, char_u *, int);
static void foldDelMarker(linenr_T, char_u *, int);
static int foldFind(linenr_T, fold_T **, garray_T *, garray_T *);
static int foldInsert(garray_T *, int);
static int foldLevelWin(win_T *, linenr_T);
static void foldMarkAdjustRecurse(garray_T *, linenr_T, linenr_T, long, long);
static void foldMerge(fold_T *, garray_T *, fold_T *);
static void foldOpenNested(fold_T *, fold_T *);
static void foldRemove(garray_T *, linenr_T, linenr_T);
static void foldSplit(garray_T *, int, linenr_T, linenr_T);
static linenr_T foldUpdateIEMSRecurse(garray_T *, int, linenr_T, fline_T *, void (*)(fline_T *), linenr_T, int);
static void foldlevelDiff(fline_T *);
static void foldlevelExpr(fline_T *);
static void foldlevelIndent(fline_T *);
static void foldlevelMarker(fline_T *);
static void foldlevelSyntax(fline_T *);
static int getDeepestNestingRecurse(garray_T *, garray_T *);
static void newFoldLevelWin(win_T *);
static void parseMarker(win_T *);
static int put_fold_open_close(FILE *, linenr_T, fold_T *, fold_T *);
static int put_foldopen_recurse(FILE *, win_T *, linenr_T, garray_T *, garray_T *);
static int put_folds_recurse(FILE *, linenr_T, garray_T *, garray_T *);
static void setFoldRepeat(linenr_T, long, int);
static linenr_T setManualFold(linenr_T, int, int, int *);
static linenr_T setManualFoldWin(win_T *, linenr_T, int, int, int *);

File getchar.c:
void AppendCharToRedobuff(int);
void AppendNumberToRedobuff(long);
void AppendToRedobuff(char_u *);
void AppendToRedobuffLit(char_u *, int);
void CancelRedo(void);
int ExpandMappings(regmatch_T *, int *, char_u ***);
void ResetRedobuff(void);
void add_map(char_u *, int);
int alloc_typebuf(void);
void before_blocking(void);
int char_avail(void);
int check_abbr(int, char_u *, int, int);
char_u *check_map(char_u *, int, int, int, int, mapblock_T **, int *);
void check_map_keycodes(void);
void del_typebuf(int, int);
int do_map(int, char_u *, int, int);
int fix_input_buffer(char_u *, int, int);
void flush_buffers(int);
void free_buff(struct buffheader *);
void free_typebuf(void);
char_u *get_inserted(void);
int get_map_mode(char_u **, int);
char_u *get_recorded(void);
int inchar(char_u *, int, long, int);
void init_mappings(void);
int input_available(void);
void ins_char_typebuf(int);
int ins_typebuf(char_u *, int, int, int, int);
int makemap(FILE *, buf_T *);
void map_clear(char_u *, char_u *, int, int);
void map_clear_int(buf_T *, int, int, int);
char_u *map_mode_to_chars(int);
int map_to_exists(char_u *, char_u *, int);
int map_to_exists_mode(char_u *, int, int);
void openscript(char_u *, int);
int plain_vgetc(void);
int put_escstr(FILE *, char_u *, int);
void restoreRedobuff(void);
void restore_typeahead(tasave_T *);
int safe_vgetc(void);
void saveRedobuff(void);
void save_typeahead(tasave_T *);
int save_typebuf(void);
char_u *set_context_in_map_cmd(expand_T *, char_u *, char_u *, int, int, int, cmdidx_T);
int start_redo(long, int);
int start_redo_ins(void);
void stop_redo_ins(void);
void stuffReadbuff(char_u *);
void stuffReadbuffLen(char_u *, long);
void stuffReadbuffSpec(char_u *);
int stuff_empty(void);
void stuffcharReadbuff(int);
void stuffnumReadbuff(long);
void typeahead_noflush(int);
int typebuf_changed(int);
int typebuf_maplen(void);
int typebuf_typed(void);
void updatescript(int);
int using_script(void);
int vgetc(void);
char_u *vim_strsave_escape_csi(char_u *);
void vim_unescape_csi(char_u *);
int vpeekc(void);
int vpeekc_any(void);
int vpeekc_nomap(void);
void vungetc(int);
static void add_buff(struct buffheader *, char_u *, long);
static void add_char_buff(struct buffheader *, int);
static void add_num_buff(struct buffheader *, long);
static void closescript(void);
static char_u *eval_map_expr(char_u *, int);
static char_u *get_buffcont(int, struct buffheader *);
static void gotchars(char_u *, int);
static void init_typebuf(void);
static void map_free(mapblock_T **);
static int read_redo(int, int);
static int read_stuff(int);
static void showmap(mapblock_T *, int);
static void validate_maphash(void);
static int vgetorpeek(int);

File hardcopy.c:
void ex_hardcopy(exarg_T *);
int mch_print_begin(prt_settings_T *);
int mch_print_begin_page(char_u *);
int mch_print_blank_page(void);
void mch_print_cleanup(void);
void mch_print_end(prt_settings_T *);
int mch_print_end_page(void);
int mch_print_init(prt_settings_T *, char_u *, int);
void mch_print_set_bg(long_u);
void mch_print_set_fg(long_u);
void mch_print_set_font(int, int, int);
void mch_print_start_line(int, int);
int mch_print_text_out(char_u *, int);
char_u *parse_printmbfont(void);
char_u *parse_printoptions(void);
int prt_get_unit(int);
int prt_header_height(void);
int prt_use_number(void);
static char_u *parse_list_options(char_u *, option_table_T *, int);
static int prt_add_resource(struct prt_ps_resource_S *);
static int prt_build_cid_fontname(int, char_u *, int);
static int prt_check_resource(struct prt_ps_resource_S *, char_u *);
static void prt_def_cidfont(char *, int, char *);
static void prt_def_font(char *, char *, int, char *);
static void prt_def_var(char *, double, int);
static void prt_dsc_font_resource(char *, struct prt_ps_font_S *);
static void prt_dsc_ints(char *, int, int *);
static void prt_dsc_noarg(char *);
static void prt_dsc_resources(char *, char *, char *);
static void prt_dsc_textline(char *, char *);
static void prt_dup_cidfont(char *, char *);
static int prt_find_resource(char *, struct prt_ps_resource_S *);
static void prt_flush_buffer(void);
static void prt_get_attr(int, prt_text_attr_T *, int);
static void prt_message(char_u *);
static int prt_open_resource(struct prt_ps_resource_S *);
static void prt_page_margins(double, double, double *, double *, double *, double *);
static int prt_resfile_next_line(void);
static int prt_resfile_skip_nonws(int);
static int prt_resfile_skip_ws(int);
static int prt_resfile_strncmp(int, char *, int);
static void prt_resource_name(char_u *, void *);
static void prt_set_font(int, int, int);
static void prt_write_boolean(int);
static void prt_write_file(char_u *);
static void prt_write_file_raw_len(char_u *, int);
static void prt_write_int(int);
static void prt_write_real(double, int);
static void prt_write_string(char *);
static float to_device_units(int, double, int);

File hashtab.c:
int hash_add(hashtab_T *, char_u *);
int hash_add_item(hashtab_T *, hashitem_T *, char_u *, hash_T);
void hash_clear(hashtab_T *);
void hash_clear_all(hashtab_T *, int);
void hash_debug_results(void);
hashitem_T *hash_find(hashtab_T *, char_u *);
hash_T hash_hash(char_u *);
void hash_init(hashtab_T *);
void hash_lock(hashtab_T *);
hashitem_T *hash_lookup(hashtab_T *, char_u *, hash_T);
void hash_remove(hashtab_T *, hashitem_T *);
void hash_unlock(hashtab_T *);
static int hash_may_resize(hashtab_T *, int);

File if_cscope.c:
int cs_connection(int, char_u *, char_u *);
void cs_end(void);
int cs_fgets(char_u *, int);
void cs_free_tags(void);
void cs_print_tags(void);
void do_cscope(exarg_T *);
void do_cstag(exarg_T *);
void do_scscope(exarg_T *);
char_u *get_cscope_name(expand_T *, int);
void set_context_in_cscope_cmd(expand_T *, char_u *, cmdidx_T);
static int cs_add(exarg_T *);
static int cs_add_common(char *, char *, char *);
static int cs_find(exarg_T *);
static int cs_find_common(char *, char *, int, int, int, char_u *);
static int cs_help(exarg_T *);
static int cs_insert_filelist(char *, char *, char *, struct stat *, struct stat *);
static int cs_kill(exarg_T *);
static void cs_kill_execute(int, char *);
static char *cs_manage_matches(char **, char **, int, mcmd_e);
static char *cs_parse_results(int, char *, char **, char **, char **, int);
static int cs_read_prompt(int);
static void cs_reading_emsg(int);
static void cs_release_csp(int, int);
static int cs_reset(exarg_T *);
static int cs_show(exarg_T *);
static void cs_stat_emsg(char *);
static void cs_usage_msg(csid_e);
static void do_cscope_general(exarg_T *, int);
static void sig_handler(int);

File if_py_both.h:
static PyObject *BufMapItem(PyObject *, PyObject *);
static PyObject *BufMapIter(PyObject *);
static int BufMapIterClear(PyObject **);
static void BufMapIterDestruct(PyObject *);
static PyObject *BufMapIterNext(PyObject **);
static int BufMapIterTraverse(PyObject *, visitproc, void *);
static Py_ssize_t BufMapLength(PyObject *);
static PyObject *BufferAppend(BufferObject *, PyObject *);
static void BufferDestructor(BufferObject *);
static PyObject *BufferDir(PyObject *);
static PyObject *BufferItem(BufferObject *, Py_ssize_t);
static Py_ssize_t BufferLength(BufferObject *);
static PyObject *BufferMark(BufferObject *, PyObject *);
static PyObject *BufferNew(buf_T *);
static PyObject *BufferRange(BufferObject *, PyObject *);
static PyObject *BufferRepr(BufferObject *);
static int BufferSetattr(BufferObject *, char *, PyObject *);
static PyObject *BufferSlice(BufferObject *, Py_ssize_t, Py_ssize_t);
static int CheckBuffer(BufferObject *);
static int CheckTabPage(TabPageObject *);
static int CheckWindow(WindowObject *);
static int ConvertFromPyMapping(PyObject *, typval_T *);
static int ConvertFromPyObject(PyObject *, typval_T *);
static PyObject *ConvertToPyObject(typval_T *);
static PyObject *CurrentDir(PyObject *);
static PyObject *CurrentGetattr(PyObject *, char *);
static int CurrentSetattr(PyObject *, char *, PyObject *);
static Py_ssize_t DictionaryAssItem(DictionaryObject *, PyObject *, PyObject *);
static PyObject *DictionaryConstructor(PyTypeObject *, PyObject *, PyObject *);
static int DictionaryContains(DictionaryObject *, PyObject *);
static void DictionaryDestructor(DictionaryObject *);
static PyObject *DictionaryDir(PyObject *);
static PyObject *DictionaryGet(DictionaryObject *, PyObject *);
static PyObject *DictionaryHasKey(DictionaryObject *, PyObject *);
static PyObject *DictionaryItem(DictionaryObject *, PyObject *);
static PyObject *DictionaryIter(DictionaryObject *);
static PyObject *DictionaryIterNext(dictiterinfo_T **);
static Py_ssize_t DictionaryLength(DictionaryObject *);
static PyObject *DictionaryListItems(DictionaryObject *);
static PyObject *DictionaryListKeys(DictionaryObject *);
static PyObject *DictionaryListObjects(hi_to_py, DictionaryObject *);
static PyObject *DictionaryListValues(DictionaryObject *);
static PyObject *DictionaryNew(PyTypeObject *, dict_T *);
static PyObject *DictionaryPop(DictionaryObject *, PyObject *);
static PyObject *DictionaryPopItem(DictionaryObject *);
static int DictionarySetattr(DictionaryObject *, char *, PyObject *);
static PyObject *DictionaryUpdate(DictionaryObject *, PyObject *, PyObject *);
static PyObject *FinderFindModule(PyObject *, PyObject *);
static PyObject *FunctionCall(FunctionObject *, PyObject *, PyObject *);
static PyObject *FunctionConstructor(PyTypeObject *, PyObject *, PyObject *);
static void FunctionDestructor(FunctionObject *);
static PyObject *FunctionDir(PyObject *);
static PyObject *FunctionNew(PyTypeObject *, char_u *);
static PyObject *FunctionRepr(FunctionObject *);
static PyObject *GetBufferLine(buf_T *, Py_ssize_t);
static int IterClear(IterObject *);
static void IterDestructor(IterObject *);
static PyObject *IterIter(PyObject *);
static PyObject *IterNext(IterObject *);
static int IterTraverse(IterObject *, visitproc, void *);
static int ListAssItem(ListObject *, Py_ssize_t, PyObject *);
static int ListAssSlice(ListObject *, Py_ssize_t, Py_ssize_t, PyObject *);
static PyObject *ListConcatInPlace(ListObject *, PyObject *);
static PyObject *ListConstructor(PyTypeObject *, PyObject *, PyObject *);
static void ListDestructor(ListObject *);
static PyObject *ListDir(PyObject *);
static PyObject *ListItem(ListObject *, Py_ssize_t);
static PyObject *ListIter(ListObject *);
static void ListIterDestruct(listiterinfo_T *);
static PyObject *ListIterNext(listiterinfo_T **);
static Py_ssize_t ListLength(ListObject *);
static PyObject *ListNew(PyTypeObject *, list_T *);
static int ListSetattr(ListObject *, char *, PyObject *);
static PyObject *ListSlice(ListObject *, Py_ssize_t, Py_ssize_t);
static void LoaderDestructor(LoaderObject *);
static PyObject *LoaderLoadModule(LoaderObject *, PyObject *);
static int NumberToLong(PyObject *, long *, int);
static PyObject *ObjectDir(PyObject *, char **);
static int OptionsAssItem(OptionsObject *, PyObject *, PyObject *);
static int OptionsClear(OptionsObject *);
static void OptionsDestructor(OptionsObject *);
static PyObject *OptionsItem(OptionsObject *, PyObject *);
static int OptionsTraverse(OptionsObject *, visitproc, void *);
static PyObject *OutputDir(PyObject *);
static PyObject *OutputFlush(PyObject *);
static int OutputSetattr(OutputObject *, char *, PyObject *);
static PyObject *OutputWrite(OutputObject *, PyObject *);
static PyObject *OutputWritelines(OutputObject *, PyObject *);
static void PythonIO_Flush(void);
static PyObject *RBAppend(PyObject *, Py_ssize_t, Py_ssize_t, Py_ssize_t *, BufferObject *);
static Py_ssize_t RBAsItem(Py_ssize_t, PyObject *, Py_ssize_t, Py_ssize_t, Py_ssize_t *, BufferObject *);
static Py_ssize_t RBAsSlice(Py_ssize_t, Py_ssize_t, PyObject *, Py_ssize_t, Py_ssize_t, Py_ssize_t *, BufferObject *);
static PyObject *RBItem(Py_ssize_t, Py_ssize_t, Py_ssize_t, BufferObject *);
static PyObject *RBSlice(Py_ssize_t, Py_ssize_t, Py_ssize_t, Py_ssize_t, BufferObject *);
static PyObject *RangeAppend(RangeObject *, PyObject *);
static int RangeClear(RangeObject *);
static void RangeDestructor(RangeObject *);
static PyObject *RangeDir(PyObject *);
static PyObject *RangeItem(RangeObject *, Py_ssize_t);
static Py_ssize_t RangeLength(RangeObject *);
static PyObject *RangeNew(buf_T *, Py_ssize_t, Py_ssize_t);
static PyObject *RangeRepr(RangeObject *);
static PyObject *RangeSlice(RangeObject *, Py_ssize_t, Py_ssize_t);
static int RangeTraverse(RangeObject *, visitproc, void *);
static int SetBufferLine(buf_T *, Py_ssize_t, PyObject *, Py_ssize_t *);
static char_u *StringToChars(PyObject *, PyObject **);
static char *StringToLine(PyObject *);
static PyObject *TabListItem(PyObject *, Py_ssize_t);
static Py_ssize_t TabListLength(PyObject *);
static void TabPageDestructor(TabPageObject *);
static PyObject *TabPageDir(PyObject *);
static PyObject *TabPageNew(tabpage_T *);
static PyObject *TabPageRepr(TabPageObject *);
static PyObject *VimChdir(PyObject *, PyObject *, PyObject *);
static PyObject *VimCommand(PyObject *, PyObject *);
static PyObject *VimEval(PyObject *, PyObject *);
static PyObject *VimEvalPy(PyObject *, PyObject *);
static PyObject *VimFchdir(PyObject *, PyObject *, PyObject *);
static PyObject *VimForeachRTP(PyObject *, PyObject *);
static PyObject *VimPathHook(PyObject *, PyObject *);
static PyObject *VimStrwidth(PyObject *, PyObject *);
static PyObject *VimToPython(typval_T *, int, PyObject *);
static int VimTryEnd(void);
static PyObject *Vim_GetPaths(PyObject *);
static void WinListDestructor(WinListObject *);
static PyObject *WinListItem(WinListObject *, Py_ssize_t);
static Py_ssize_t WinListLength(WinListObject *);
static int WindowClear(WindowObject *);
static void WindowDestructor(WindowObject *);
static PyObject *WindowDir(PyObject *);
static PyObject *WindowNew(win_T *, tabpage_T *);
static PyObject *WindowRepr(WindowObject *);
static int WindowSetattr(WindowObject *, char *, PyObject *);
static int WindowTraverse(WindowObject *, visitproc, void *);
static int _ConvertFromPyObject(PyObject *, typval_T *, PyObject *);
static PyObject *_DictionaryItem(PyObject *, int, DictionaryObject *);
static PyObject *_VimChdir(PyObject *, PyObject *, PyObject *);
static int add_string(PyObject *, char *);
static PyObject *call_load_module(char *, int, PyObject *);
static int convert_dl(PyObject *, typval_T *, pytotvfunc, PyObject *);
static PyObject *dict_item(hashitem_T *);
static PyObject *dict_key(hashitem_T *);
static PyObject *dict_val(hashitem_T *);
static int dummy_check(void *);
static PyObject *find_module(char *, char *, PyObject *);
static win_T *get_firstwin(TabPageObject *);
static void init_range_cmd(exarg_T *);
static void init_range_eval(typval_T *);
static int list_py_concat(list_T *, PyObject *, PyObject *);
static void map_finder_callback(char_u *, void *);
static void map_rtp_callback(char_u *, void *);
static dict_T *py_dict_alloc(void);
static void py_fix_cursor(linenr_T, linenr_T, linenr_T);
static list_T *py_list_alloc(void);
static int pydict_to_tv(PyObject *, typval_T *, PyObject *);
static int pymap_to_tv(PyObject *, typval_T *, PyObject *);
static int pyseq_to_tv(PyObject *, typval_T *, PyObject *);
static void restore_win_for_buf(win_T *, tabpage_T *, buf_T *);
static void run_cmd(const char *, void *, PyGILState_STATE *);
static void run_do(const char *, void *, PyGILState_STATE *);
static void run_eval(const char *, typval_T *, PyGILState_STATE *);
static int set_option_value_err(char_u *, int, char_u *, int);
static int set_option_value_for(char_u *, int, char_u *, int, int, void *);
static void switch_to_win_for_buf(buf_T *, win_T **, tabpage_T **, buf_T **);
static int write_output(PyObject *, OutputObject *);

File if_python.c:
void do_pyeval(char_u *, typval_T *);
void ex_pydo(exarg_T *);
void ex_pyfile(exarg_T *);
void ex_python(exarg_T *);
void python_buffer_free(buf_T *);
void python_end(void);
void python_tabpage_free(tabpage_T *);
void python_window_free(win_T *);
void set_ref_in_python(int);
static Py_ssize_t BufferAssItem(PyObject *, Py_ssize_t, PyObject *);
static Py_ssize_t BufferAssSlice(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
static PyObject *BufferGetattr(PyObject *, char *);
static PyObject *DictionaryGetattr(PyObject *, char *);
static void DoPyCommand(const char *, rangeinitializer, runner, void *);
static PyObject *FunctionGetattr(PyObject *, char *);
static PyObject *LineToString(const char *);
static PyObject *ListGetattr(PyObject *, char *);
static PyObject *OutputGetattr(PyObject *, char *);
static Py_ssize_t RangeAssItem(PyObject *, Py_ssize_t, PyObject *);
static Py_ssize_t RangeAssSlice(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
static PyObject *RangeGetattr(PyObject *, char *);
static PyObject *TabPageGetattr(PyObject *, char *);
static PyObject *WindowGetattr(PyObject *, char *);

File main.c:
void getout(int);
int main(int, char **);
void main_loop(int, int);
void mainerr_arg_missing(char_u *);
int process_env(char_u *, int);
void time_msg(char *, void *);
void time_pop(void *);
void time_push(void *, void *);
static int file_owned(char *);
static int get_number_arg(char_u *, int *, int);
static void main_msg(char *);
static void main_start_gui(void);
static void mainerr(int, char_u *);
static void time_diff(struct timeval *, struct timeval *);
static void usage(void);

File mark.c:
int check_mark(pos_T *);
void checkpcmark(void);
void clrallmarks(buf_T *);
void copy_jumplist(win_T *, win_T *);
void copy_viminfo_marks(vir_T *, FILE *, int, int, int);
void do_marks(exarg_T *);
void ex_changes(exarg_T *);
void ex_delmarks(exarg_T *);
void ex_jumps(exarg_T *);
char_u *fm_getname(fmark_T *, int);
void fmarks_check_names(buf_T *);
void free_jumplist(win_T *);
pos_T *getmark(int, int);
pos_T *getmark_buf(buf_T *, int, int);
pos_T *getmark_buf_fnum(buf_T *, int, int, int *);
pos_T *getnextmark(pos_T *, int, int);
void mark_adjust(linenr_T, linenr_T, long, long);
void mark_col_adjust(linenr_T, colnr_T, long, long);
pos_T *movechangelist(int);
pos_T *movemark(int);
int read_viminfo_filemark(vir_T *, int);
int removable(char_u *);
void set_last_cursor(win_T *);
int setmark(int);
int setmark_pos(int, pos_T *, int);
void setpcmark(void);
void write_viminfo_filemarks(FILE *);
int write_viminfo_marks(FILE *);
static void cleanup_jumplist(void);
static void fmarks_check_one(char_u *, buf_T *, xfmark_T *, xfmark_T *);
static void fname2fnum(xfmark_T *);
static char_u *mark_line(int, pos_T *);
static void show_one_mark(int, char_u *, pos_T *, char_u *, int);
static void write_one_filemark(FILE *, xfmark_T *, int, int);

File mbyte.c:
int arabic_combine(int, int);
int arabic_maycombine(int);
int bomb_size(void);
int convert_input_safe(char_u *, int, int, char_u **, int *);
int convert_setup(vimconv_T *, char_u *, char_u *);
int convert_setup_ext(vimconv_T *, char_u *, int, char_u *, int);
int dbcs_class(unsigned int, unsigned int);
int dbcs_head_off(char_u *, char_u *);
int dbcs_off2cells(unsigned int, unsigned int);
int dbcs_ptr2cells(char_u *);
int dbcs_screen_head_off(char_u *, char_u *);
int enc_canon_props(char_u *);
char_u *enc_canonize(char_u *);
char_u *enc_locale(void);
char_u *enc_skip(char_u *);
int latin_char2bytes(int, char_u *);
int latin_char2cells(int);
int latin_char2len(int);
int latin_head_off(char_u *, char_u *);
int latin_off2cells(unsigned int, unsigned int);
int latin_ptr2cells(char_u *);
int latin_ptr2cells_len(char_u *, int);
int latin_ptr2char(char_u *);
int latin_ptr2len(char_u *);
int latin_ptr2len_len(char_u *, int);
void mb_adjust_cursor(void);
void mb_adjustpos(buf_T *, pos_T *);
int mb_charlen(char_u *);
int mb_charlen_len(char_u *, int);
void mb_copy_char(char_u **, char_u **);
int mb_cptr2char_adv(char_u **);
int mb_fix_col(int, int);
int mb_get_class(char_u *);
int mb_get_class_buf(char_u *, buf_T *);
char_u *mb_init(void);
int mb_lefthalve(int, int);
int mb_off_next(char_u *, char_u *);
char_u *mb_prevptr(char_u *, char_u *);
int mb_ptr2char_adv(char_u **);
int mb_string2cells(char_u *, int);
int mb_strnicmp(char_u *, char_u *, size_t);
int mb_tail_off(char_u *, char_u *);
char_u *mb_unescape(char_u **);
void *my_iconv_open(char_u *, char_u *);
void remove_bom(char_u *);
void show_utf8(void);
char_u *string_convert(vimconv_T *, char_u *, int *);
char_u *string_convert_ext(vimconv_T *, char_u *, int *, int *);
int utf_byte2len(int);
int utf_char2bytes(int, char_u *);
int utf_char2cells(int);
int utf_char2len(int);
int utf_class(int);
int utf_composinglike(char_u *, char_u *);
void utf_find_illegal(void);
int utf_fold(int);
int utf_head_off(char_u *, char_u *);
int utf_iscomposing(int);
int utf_islower(int);
int utf_isupper(int);
int utf_off2cells(unsigned int, unsigned int);
int utf_printable(int);
int utf_ptr2cells(char_u *);
int utf_ptr2char(char_u *);
int utf_ptr2len(char_u *);
int utf_ptr2len_len(char_u *, int);
int utf_tolower(int);
int utf_toupper(int);
int utfc_char2bytes(int, char_u *);
int utfc_ptr2char(char_u *, int *);
int utfc_ptr2char_len(char_u *, int *, int);
int utfc_ptr2len(char_u *);
int utfc_ptr2len_len(char_u *, int);
static int dbcs_char2bytes(int, char_u *);
static int dbcs_char2cells(int);
static int dbcs_char2len(int);
static int dbcs_ptr2cells_len(char_u *, int);
static int dbcs_ptr2char(char_u *);
static int dbcs_ptr2len(char_u *);
static int dbcs_ptr2len_len(char_u *, int);
static int enc_canon_search(char_u *);
static int intable(struct interval *, size_t, int);
static int utf_convert(int, convertStruct *, int);
static int utf_ptr2cells_len(char_u *, int);
static int utf_safe_read_char_adv(char_u **, size_t *);

File memfile.c:
void mf_close(memfile_T *, int);
void mf_close_file(buf_T *, int);
void mf_free(memfile_T *, bhdr_T *);
void mf_fullname(memfile_T *);
bhdr_T *mf_get(memfile_T *, blocknr_T, int);
int mf_need_trans(memfile_T *);
bhdr_T *mf_new(memfile_T *, int, int);
void mf_new_page_size(memfile_T *, unsigned int);
memfile_T *mf_open(char_u *, int);
int mf_open_file(memfile_T *, char_u *);
void mf_put(memfile_T *, bhdr_T *, int, int);
int mf_release_all(void);
void mf_set_dirty(memfile_T *);
void mf_set_ffname(memfile_T *);
int mf_sync(memfile_T *, int);
blocknr_T mf_trans_del(memfile_T *, blocknr_T);
static bhdr_T *mf_alloc_bhdr(int, memfile_T *);
static void mf_do_open(memfile_T *, char_u *, int);
static void mf_hash_add_item(mf_hashtab_T *, mf_hashitem_T *);
static void mf_hash_rem_item(mf_hashtab_T *, mf_hashitem_T *);
static bhdr_T *mf_release(memfile_T *, int);
static void mf_rem_used(memfile_T *, bhdr_T *);
static int mf_trans_add(memfile_T *, bhdr_T *);
static int mf_write(memfile_T *, bhdr_T *);

File memline.c:
void check_need_swap(int);
char_u *get_file_in_dir(char_u *, char_u *);
void goto_byte(long);
char_u *makeswapname(char_u *, char_u *, buf_T *, char_u *);
int ml_append(linenr_T, char_u *, colnr_T, int);
int ml_append_buf(buf_T *, linenr_T, char_u *, colnr_T, int);
void ml_clearmarked(void);
void ml_close(buf_T *, int);
void ml_close_all(int);
void ml_close_notmod(void);
void ml_decrypt_data(memfile_T *, char_u *, off_t, unsigned int);
int ml_delete(linenr_T, int);
char_u *ml_encrypt_data(memfile_T *, char_u *, off_t, unsigned int);
long ml_find_line_or_offset(buf_T *, linenr_T, long *);
linenr_T ml_firstmarked(void);
char_u *ml_get(linenr_T);
char_u *ml_get_buf(buf_T *, linenr_T, int);
char_u *ml_get_curline(void);
char_u *ml_get_cursor(void);
char_u *ml_get_pos(pos_T *);
int ml_line_alloced(void);
int ml_open(buf_T *);
void ml_open_file(buf_T *);
void ml_open_files(void);
void ml_preserve(buf_T *, int);
void ml_recover(void);
int ml_replace(linenr_T, char_u *, int);
void ml_set_crypt_key(buf_T *, char_u *, int);
void ml_setflags(buf_T *);
void ml_setmarked(linenr_T);
void ml_setname(buf_T *);
void ml_sync_all(int, int);
void ml_timestamp(buf_T *);
int recover_names(char_u *, int, int, char_u **);
int resolve_symlink(char_u *, char_u *);
static void add_b0_fenc(ZERO_BL *, buf_T *, buf_T *);
static char_u *findswapname(buf_T *, char_u **, char_u *);
static int fnamecmp_ino(char_u *, char_u *, long);
static char_u *make_percent_swname(char_u *, char_u *);
static int ml_add_stack(buf_T *);
static int ml_append_int(buf_T *, linenr_T, char_u *, colnr_T, int, int);
static int ml_check_b0_id(ZERO_BL *, ZERO_BL *);
static void ml_crypt_prepare(memfile_T *, off_t, int);
static int ml_delete_int(buf_T *, linenr_T, int);
static bhdr_T *ml_find_line(buf_T *, linenr_T, int);
static void ml_flush_line(buf_T *);
static void ml_lineadd(buf_T *, int);
static bhdr_T *ml_new_data(memfile_T *, int, int);
static bhdr_T *ml_new_ptr(memfile_T *);
static void ml_set_b0_crypt(buf_T *, ZERO_BL *);
static void ml_upd_block0(buf_T *, upd_block0_T);
static void ml_updatechunk(buf_T *, linenr_T, long, int);
static int recov_file_names(char_u **, char_u *, int);
static void set_b0_fname(ZERO_BL *, buf_T *);
static time_t swapfile_info(char_u *);

File menu.c:
void ex_emenu(exarg_T *);
void ex_menu(exarg_T *);
void ex_menutranslate(exarg_T *);
char_u *get_menu_name(expand_T *, int);
char_u *get_menu_names(expand_T *, int);
int menu_is_menubar(char_u *);
int menu_is_popup(char_u *);
int menu_is_separator(char_u *);
int menu_is_toolbar(char_u *);
char_u *menu_name_skip(char_u *);
char_u *set_context_in_menu_cmd(expand_T *, char_u *, char_u *, int);
static int add_menu_path(char_u *, vimmenu_T *, int *, char_u *);
static void free_menu(vimmenu_T **);
static void free_menu_string(vimmenu_T *, int);
static int get_menu_cmd_modes(char_u *, int, int *, int *);
static int menu_is_hidden(char_u *);
static int menu_nable_recurse(vimmenu_T *, char_u *, int, int);
static int menu_name_equal(char_u *, vimmenu_T *);
static int menu_namecmp(char_u *, char_u *);
static char_u *menu_skip_part(char_u *);
static char_u *menu_text(char_u *, int *, char_u **);
static char_u *menu_translate_tab_and_shift(char_u *);
static void menu_unescape_name(char_u *);
static char_u *popup_mode_name(char_u *, int);
static int remove_menu(vimmenu_T **, char_u *, int, int);
static int show_menus(char_u *, int);
static void show_menus_recursive(vimmenu_T *, int, int);

File message.c:
void clear_sb_text(void);
int delete_first_msg(void);
void display_confirm_msg(void);
int do_dialog(char_u *, char_u *, int, int, char_u *, char_u *, int);
int emsg(char_u *);
int emsg2(char_u *, char_u *);
void emsg_invreg(int);
int emsg_not_now(void);
void ex_messages(exarg_T *);
void give_warning(char_u *, int);
void may_clear_sb_text(void);
int msg(char_u *);
void msg_advance(int);
int msg_attr(char_u *, int);
int msg_attr_keep(char_u *, int, int);
void msg_check(void);
void msg_clr_cmdline(void);
void msg_clr_eos(void);
void msg_clr_eos_force(void);
int msg_end(void);
void msg_end_prompt(void);
void msg_home_replace(char_u *);
void msg_home_replace_hl(char_u *);
void msg_make(char_u *);
char_u *msg_may_trunc(int, char_u *);
void msg_moremsg(int);
void msg_outnum(long);
int msg_outtrans(char_u *);
int msg_outtrans_attr(char_u *, int);
int msg_outtrans_len(char_u *, int);
int msg_outtrans_len_attr(char_u *, int, int);
char_u *msg_outtrans_one(char_u *, int);
int msg_outtrans_special(char_u *, int);
void msg_prt_line(char_u *, int);
void msg_putchar(int);
void msg_putchar_attr(int, int);
void msg_puts(char_u *);
void msg_puts_attr(char_u *, int);
void msg_puts_long_attr(char_u *, int);
void msg_puts_long_len_attr(char_u *, int, int);
void msg_puts_title(char_u *);
void msg_sb_eol(void);
void msg_source(int);
void msg_start(void);
void msg_starthere(void);
char_u *msg_strtrunc(char_u *, int);
char_u *msg_trunc_attr(char_u *, int, int);
int msg_use_printf(void);
int redirecting(void);
void repeat_message(void);
void reset_last_sourcing(void);
void set_keep_msg(char_u *, int);
void set_keep_msg_from_hist(void);
void show_sb_text(void);
int smsg(char_u *, ...);
int smsg_attr(int, char_u *, ...);
char_u *str2special(char_u **, int);
char_u *str2special_save(char_u *, int);
void str2specialbuf(char_u *, char_u *, int);
void trunc_string(char_u *, char_u *, int, int);
int verb_msg(char_u *);
void verbose_enter(void);
void verbose_enter_scroll(void);
void verbose_leave(void);
void verbose_leave_scroll(void);
int verbose_open(void);
void verbose_stop(void);
int vim_dialog_yesno(int, char_u *, char_u *, int);
int vim_dialog_yesnoallcancel(int, char_u *, char_u *, int);
int vim_dialog_yesnocancel(int, char_u *, char_u *, int);
int vim_snprintf(char *, size_t, char *, ...);
int vim_snprintf_add(char *, size_t, char *, ...);
int vim_vsnprintf(char *, size_t, char *, struct __va_list_tag *, typval_T *);
void wait_return(int);
static void add_msg_hist(char_u *, int, int);
static int copy_char(char_u *, char_u *, int);
static msgchunk_T *disp_sb_line(int, msgchunk_T *);
static int do_more_prompt(int);
static char_u *get_emsg_lnum(void);
static char_u *get_emsg_source(void);
static void hit_return_msg(void);
static void inc_msg_scrolled(void);
static void msg_home_replace_attr(char_u *, int);
static void msg_puts_attr_len(char_u *, int, int);
static void msg_puts_display(char_u *, int, int, int);
static void msg_screen_putchar(int, int);
static void msg_scroll_up(void);
static int other_sourcing_name(void);
static void redir_write(char_u *, int);
static char_u *screen_puts_mbyte(char_u *, int, int);
static void store_sb_text(char_u **, char_u *, int, int *, int);
static void t_puts(int *, char_u *, char_u *, int);
static long tv_nr(typval_T *, int *);
static char *tv_str(typval_T *, int *);

File misc1.c:
void FreeWild(int, char_u **);
char_u *FullName_save(char_u *, int);
void add_pathsep(char_u *);
void addfile(garray_T *, char_u *, int);
void appended_lines(linenr_T, long);
void appended_lines_mark(linenr_T, long);
int ask_yesno(char_u *, int);
void beep_flush(void);
void change_warning(int);
void changed(void);
void changed_bytes(linenr_T, colnr_T);
void changed_int(void);
void changed_lines(linenr_T, colnr_T, linenr_T, long);
void check_status(buf_T *);
int cin_iscase(char_u *, int);
int cin_islabel(int);
int cin_isscopedecl(char_u *);
char_u *concat_fnames(char_u *, char_u *, int);
char_u *concat_str(char_u *, char_u *);
int del_bytes(long, int, int);
int del_char(int);
int del_chars(long, int);
void del_lines(long, int);
void deleted_lines(linenr_T, long);
void deleted_lines_mark(linenr_T, long);
int dir_of_file_exists(char_u *);
void do_c_expr_indent(void);
void expand_env(char_u *, char_u *, int);
void expand_env_esc(char_u *, char_u *, int, int, int, char_u *);
char_u *expand_env_save(char_u *);
char_u *expand_env_save_opt(char_u *, int);
int expand_wildcards(int, char_u **, int *, char_u ***, int);
int expand_wildcards_eval(char_u **, int *, char_u ***, int);
void fast_breakcheck(void);
pos_T *find_start_comment(int);
int fullpathcmp(char_u *, char_u *, int);
int gchar_cursor(void);
int gchar_pos(pos_T *);
int gen_expand_wildcards(int, char_u **, int *, char_u ***, int);
int get_c_indent(void);
char_u *get_cmd_output(char_u *, char_u *, int);
char_u *get_env_name(expand_T *, int);
int get_expr_indent(void);
int get_indent(void);
int get_indent_buf(buf_T *, linenr_T);
int get_indent_lnum(linenr_T);
int get_indent_str(char_u *, int);
int get_keystroke(void);
int get_last_leader_offset(char_u *, char_u **);
int get_leader_len(char_u *, char_u **, int, int);
int get_lisp_indent(void);
int get_number(int, int *);
int get_number_indent(linenr_T);
char_u *get_past_head(char_u *);
char_u *get_users(expand_T *, int);
char_u *getnextcomp(char_u *);
char_u *gettail(char_u *);
char_u *gettail_sep(char_u *);
int goto_im(void);
void home_replace(buf_T *, char_u *, char_u *, int, int);
char_u *home_replace_save(buf_T *, char_u *);
int inindent(int);
void init_homedir(void);
void ins_bytes(char_u *);
void ins_bytes_len(char_u *, int);
void ins_char(int);
void ins_char_bytes(char_u *, int);
void ins_str(char_u *);
int is_mouse_key(int);
void line_breakcheck(void);
int match_suffix(char_u *);
int match_user(char_u *);
void msgmore(long);
int open_line(int, int, int);
void pchar_cursor(int);
int plines(linenr_T);
int plines_m_win(win_T *, linenr_T, linenr_T);
int plines_nofill(linenr_T);
int plines_win(win_T *, linenr_T, int);
int plines_win_col(win_T *, linenr_T, long);
int plines_win_nofill(win_T *, linenr_T, int);
int plines_win_nofold(win_T *, linenr_T);
void prepare_to_exit(void);
void preserve_exit(void);
int prompt_for_number(int *);
void remove_duplicates(garray_T *);
int set_indent(int, int);
void shorten_dir(char_u *);
char_u *skip_to_option_part(char_u *);
int truncate_line(int);
void unchanged(buf_T *, int);
int unix_expandpath(garray_T *, char_u *, int, int, int);
void vim_beep(void);
int vim_fexists(char_u *);
int vim_fnamecmp(char_u *, char_u *);
int vim_fnamencmp(char_u *, char_u *, size_t);
char_u *vim_getenv(char_u *, int *);
int vim_ispathlistsep(int);
int vim_ispathsep(int);
void vim_setenv(char_u *, char_u *);
static char_u *after_label(char_u *);
static void changedOneline(buf_T *, linenr_T);
static void changed_common(linenr_T, colnr_T, linenr_T, long);
static void changed_lines_buf(buf_T *, linenr_T, linenr_T, long);
static int cin_ends_in(char_u *, char_u *, char_u *);
static int cin_first_id_amount(void);
static int cin_get_equal_amount(linenr_T);
static int cin_is_cinword(char_u *);
static int cin_is_cpp_baseclass(colnr_T *);
static int cin_is_cpp_namespace(char_u *);
static int cin_isbreak(char_u *);
static int cin_isdefault(char_u *);
static int cin_isdo(char_u *);
static int cin_iselse(char_u *);
static int cin_isfuncdecl(char_u **, linenr_T, linenr_T, int, int);
static int cin_isif(char_u *);
static int cin_islabel_skip(char_u **);
static int cin_ispreproc_cont(char_u **, linenr_T *);
static int cin_isterminated(char_u *, int, int);
static int cin_iswhileofdo(char_u *, linenr_T, int);
static int cin_skip2pos(pos_T *);
static char_u *cin_skipcomment(char_u *);
static int cin_starts_with(char_u *, char *);
static void expand_path_option(char_u *, garray_T *);
static int find_last_paren(char_u *, int, int);
static int find_match(int, linenr_T, int, int);
static pos_T *find_match_paren(int, int);
static pos_T *find_start_brace(int);
static int get_baseclass_amount(int, int, int, int);
static int get_indent_nolabel(linenr_T);
static int has_env_var(char_u *);
static void init_users(void);
static int is_unique(char_u *, int, garray_T *, garray_T *);
static int lisp_match(char_u *);
static int pstrcmp(const void *, const void *);
static char_u *remove_tail(char_u *, char_u *, char_u *);
static int skip_label(linenr_T, char_u **, int);
static char_u *skip_string(char_u *);
static int vim_backtick(char_u *);
static char_u *vim_version_dir(char_u *);

File misc2.c:
void adjust_cursor_col(void);
int after_pathsep(char_u *, char_u *);
char_u *alloc(unsigned int);
char_u *alloc_check(unsigned int);
char_u *alloc_clear(unsigned int);
void append_ga_line(garray_T *);
int call_shell(char_u *, int);
void check_cursor(void);
void check_cursor_col(void);
void check_cursor_col_win(win_T *);
void check_cursor_lnum(void);
int coladvance(colnr_T);
int coladvance_force(colnr_T);
void copy_chars(char_u *, size_t, int);
int copy_option_part(char_u **, char_u *, int, char *);
void copy_spaces(char_u *, size_t);
void crypt_decode(char_u *, long);
void crypt_encode(char_u *, size_t, char_u *);
void crypt_init_keys(char_u *);
int crypt_method_from_string(char_u *);
void crypt_pop_state(void);
void crypt_push_state(void);
int csh_like_shell(void);
int dec(pos_T *);
int dec_cursor(void);
int decl(pos_T *);
int default_fileformat(void);
void del_trailing_spaces(char_u *);
void do_outofmem_msg(long_u);
int emsg3(char_u *, char_u *, char_u *);
int emsgn(char_u *, long);
int extract_modifiers(int, int *);
int filewritable(char_u *);
char_u *find_directory_in_path(char_u *, int, int, char_u *);
char_u *find_file_in_path(char_u *, int, int, int, char_u *);
char_u *find_file_in_path_option(char_u *, int, int, int, char_u *, int, char_u *, char_u *);
int find_special_key(char_u **, int *, int, int);
int find_special_key_in_table(int);
void free_crypt_key(char_u *);
void ga_append(garray_T *, int);
void ga_clear(garray_T *);
void ga_clear_strings(garray_T *);
void ga_concat(garray_T *, char_u *);
char_u *ga_concat_strings(garray_T *);
int ga_grow(garray_T *, int);
void ga_init(garray_T *);
void ga_init2(garray_T *, int, int);
int get2c(FILE *);
int get3c(FILE *);
int get4c(FILE *);
time_t get8ctime(FILE *);
char_u *get_crypt_key(int, int);
int get_crypt_method(buf_T *);
linenr_T get_cursor_rel_lnum(win_T *, linenr_T);
int get_fileformat(buf_T *);
int get_fileformat_force(buf_T *, exarg_T *);
char_u *get_key_name(int);
int get_mouse_button(int, int *, int *);
int get_pseudo_mouse_code(int, int, int);
int get_real_state(void);
int get_special_key_code(char_u *);
char_u *get_special_key_name(int, int);
int get_user_name(char_u *, int);
int getviscol(void);
int getviscol2(colnr_T, colnr_T);
int getvpos(pos_T *, colnr_T);
int handle_x_keys(int);
int has_non_ascii(char_u *);
int inc(pos_T *);
int inc_cursor(void);
int incl(pos_T *);
char_u *lalloc(long_u, int);
char_u *lalloc_clear(long_u, int);
int leftcol_changed(void);
int name_to_mod_mask(int);
char_u *parse_shape_opt(int);
int pathcmp(const char *, const char *, int);
int put_bytes(FILE *, long_u, int);
void put_time(FILE *, time_t);
char_u *read_string(FILE *, int);
int same_directory(char_u *, char_u *);
void set_crypt_method(buf_T *, int);
void set_fileformat(int, int);
int simplify_key(int, int *);
void sort_strings(char_u **, int);
char_u *strup_save(char_u *);
int trans_special(char_u **, char_u *, int);
int vim_chdir(char_u *);
int vim_chdirfile(char_u *);
char_u *vim_findfile(void *);
void vim_findfile_cleanup(void *);
void vim_findfile_free_visited(void *);
void *vim_findfile_init(char_u *, char_u *, char_u *, int, int, int, void *, int, char_u *);
char_u *vim_findfile_stopdir(char_u *);
void vim_free(void *);
int vim_isspace(int);
char_u *vim_strbyte(char_u *, int);
void vim_strcat(char_u *, char_u *, size_t);
char_u *vim_strchr(char_u *, int);
void vim_strncpy(char_u *, char_u *, size_t);
char_u *vim_strnsave(char_u *, int);
char_u *vim_strnsave_up(char_u *, int);
char_u *vim_strrchr(char_u *, int);
char_u *vim_strsave(char_u *);
char_u *vim_strsave_escaped(char_u *, char_u *);
char_u *vim_strsave_escaped_ext(char_u *, char_u *, int, int);
char_u *vim_strsave_shellescape(char_u *, int);
char_u *vim_strsave_up(char_u *);
void vim_strup(char_u *);
int virtual_active(void);
static int coladvance2(pos_T *, int, int, colnr_T);
static int ff_check_visited(ff_visited_T **, char_u *, char_u *);
static void ff_clear(ff_search_ctx_T *);
static ff_stack_T *ff_create_stack_element(char_u *, char_u *, int, int);
static void ff_free_stack_element(ff_stack_T *);
static ff_visited_list_hdr_T *ff_get_visited_list(char_u *, ff_visited_list_hdr_T **);
static int sort_compare(const void *, const void *);
static void vim_findfile_free_visited_list(ff_visited_list_hdr_T **);

File move.c:
void approximate_botline_win(win_T *);
void changed_cline_bef_curs(void);
void changed_cline_bef_curs_win(win_T *);
void changed_line_abv_curs(void);
void changed_line_abv_curs_win(win_T *);
void changed_window_setting(void);
void changed_window_setting_win(win_T *);
void check_cursor_moved(win_T *);
void check_topfill(win_T *, int);
void curs_columns(int);
void cursor_correct(void);
int cursor_valid(void);
int curwin_col_off(void);
int curwin_col_off2(void);
void do_check_cursorbind(void);
void halfpage(int, linenr_T);
void invalidate_botline(void);
void invalidate_botline_win(win_T *);
int onepage(int, long);
void scroll_cursor_bot(int, int);
void scroll_cursor_halfway(int);
void scroll_cursor_top(int, int);
void scrolldown(long, int);
void scrolldown_clamp(void);
void scrollup(long, int);
void scrollup_clamp(void);
void set_empty_rows(win_T *, int);
void set_topline(win_T *, linenr_T);
void update_curswant(void);
void update_topline(void);
void update_topline_redraw(void);
void validate_botline(void);
void validate_cursor(void);
void validate_cursor_col(void);
void validate_virtcol(void);
void validate_virtcol_win(win_T *);
int win_col_off(win_T *);
int win_col_off2(win_T *);
static void botline_forw(lineoff_T *);
static void botline_topline(lineoff_T *);
static int check_top_offset(void);
static void comp_botline(win_T *);
static void get_scroll_overlap(lineoff_T *, int);
static void max_topfill(void);
static void topline_back(lineoff_T *);
static void validate_cheight(void);

File netbeans.c:
void ex_nbclose(exarg_T *);
void ex_nbkey(exarg_T *);
void ex_nbstart(exarg_T *);
int isNetbeansBuffer(buf_T *);
int isNetbeansModified(buf_T *);
int netbeans_active(void);
void netbeans_button_release(int);
void netbeans_deleted_all_lines(buf_T *);
void netbeans_end(void);
void netbeans_file_activated(buf_T *);
void netbeans_file_killed(buf_T *);
void netbeans_file_opened(buf_T *);
int netbeans_filedesc(void);
void netbeans_gutter_click(linenr_T);
void netbeans_inserted(buf_T *, linenr_T, colnr_T, char_u *, int);
int netbeans_is_guarded(linenr_T, linenr_T);
int netbeans_keycommand(int);
void netbeans_open(char *, int);
void netbeans_parse_messages(void);
void netbeans_read(void);
void netbeans_removed(buf_T *, linenr_T, colnr_T, long);
void netbeans_save_buffer(buf_T *);
void netbeans_send_disconnect(void);
void netbeans_unmodified(buf_T *);
static void coloncmd(char *, ...);
static int getConnInfo(char *, char **, char **, char **);
static long get_buf_size(buf_T *);
static pos_T *get_off_or_lnum(buf_T *, char_u **);
static void handle_key_queue(void);
static nbbuf_T *nb_bufp2nbbuf_fire(buf_T *, int *);
static int nb_do_cmd(int, char_u *, int, int, char_u *);
static nbbuf_T *nb_get_buf(int);
static void nb_joinlines(linenr_T, linenr_T);
static void nb_partialremove(linenr_T, colnr_T, colnr_T);
static char_u *nb_quote(char_u *);
static void nb_reply_nil(int);
static void nb_reply_nr(int, long);
static void nb_reply_text(int, char_u *);
static void nb_send(char *, char *);
static void nb_set_curbuf(buf_T *);
static char *nb_unquote(char_u *, char_u **);
static void netbeans_close(void);
static int netbeans_keystring(char_u *);
static pos_T *off2pos(buf_T *, long);
static long pos2off(buf_T *, pos_T *);
static void save(char_u *, int);

File normal.c:
int add_to_showcmd(int);
void add_to_showcmd_c(int);
void check_scrollbind(linenr_T, long);
void check_visual_highlight(void);
void clear_showcmd(void);
void do_check_scrollbind(int);
int do_mouse(oparg_T *, int, int, long, int);
void do_nv_ident(int, int);
void do_pending_operator(cmdarg_T *, int, int);
void end_visual_mode(void);
int find_decl(char_u *, int, int, int, int);
int find_ident_at_pos(win_T *, linenr_T, colnr_T, char_u **, int);
int find_ident_under_cursor(char_u **, int);
int get_visual_text(cmdarg_T *, char_u **, int *);
void init_normal_cmds(void);
void may_start_select(int);
void normal_cmd(oparg_T *, int);
void pop_showcmd(void);
void push_showcmd(void);
void reset_VIsual(void);
void reset_VIsual_and_resel(void);
void scroll_redraw(int, long);
void start_selection(void);
static void adjust_cursor(oparg_T *);
static void adjust_for_sel(cmdarg_T *);
static int checkclearopq(oparg_T *);
static void del_from_showcmd(int);
static void display_showcmd(void);
static int find_command(int);
static void find_end_of_word(pos_T *);
static void find_start_of_word(pos_T *);
static int get_mouse_class(char_u *);
static void invoke_edit(int, int, int, cmdarg_T *, cmdarg_T *);
static void n_start_visual_mode(int);
static void normal_search(int, char_u *, int, cmdarg_T *, cmdarg_T *);
static void nv_Replace(cmdarg_T *);
static void nv_Undo(cmdarg_T *);
static void nv_Zet(cmdarg_T *);
static void nv_abbrev(cmdarg_T *);
static void nv_addsub(cmdarg_T *);
static void nv_at(cmdarg_T *);
static void nv_bck_word(cmdarg_T *);
static void nv_beginline(cmdarg_T *);
static void nv_brace(cmdarg_T *);
static void nv_brackets(cmdarg_T *);
static void nv_clear(cmdarg_T *);
static void nv_colon(cmdarg_T *);
static int nv_compare(const void *, const void *);
static void nv_csearch(cmdarg_T *);
static void nv_ctrlg(cmdarg_T *);
static void nv_ctrlh(cmdarg_T *);
static void nv_ctrlo(cmdarg_T *);
static void nv_cursorhold(cmdarg_T *);
static void nv_cursormark(int, pos_T *, cmdarg_T *, cmdarg_T *);
static void nv_dollar(cmdarg_T *);
static void nv_dot(cmdarg_T *);
static void nv_down(cmdarg_T *);
static void nv_edit(cmdarg_T *);
static void nv_end(cmdarg_T *);
static void nv_error(cmdarg_T *);
static void nv_esc(cmdarg_T *);
static void nv_exmode(cmdarg_T *);
static void nv_findpar(cmdarg_T *);
static void nv_g_cmd(cmdarg_T *);
static void nv_gomark(cmdarg_T *);
static void nv_goto(cmdarg_T *);
static void nv_gotofile(cmdarg_T *);
static void nv_halfpage(cmdarg_T *);
static void nv_hat(cmdarg_T *);
static void nv_help(cmdarg_T *);
static void nv_home(cmdarg_T *);
static void nv_ident(cmdarg_T *);
static void nv_ignore(cmdarg_T *);
static void nv_join(cmdarg_T *);
static void nv_kundo(cmdarg_T *);
static void nv_left(cmdarg_T *);
static void nv_lineop(cmdarg_T *);
static void nv_mark(cmdarg_T *);
static void nv_mouse(cmdarg_T *);
static void nv_mousescroll(cmdarg_T *);
static void nv_nbcmd(cmdarg_T *);
static void nv_next(cmdarg_T *);
static void nv_nop(cmdarg_T *);
static void nv_normal(cmdarg_T *);
static void nv_open(cmdarg_T *);
static void nv_operator(cmdarg_T *);
static void nv_optrans(cmdarg_T *);
static void nv_page(cmdarg_T *);
static void nv_pcmark(cmdarg_T *);
static void nv_percent(cmdarg_T *);
static void nv_pipe(cmdarg_T *);
static void nv_put(cmdarg_T *);
static void nv_record(cmdarg_T *);
static void nv_redo(cmdarg_T *);
static void nv_regname(cmdarg_T *);
static void nv_replace(cmdarg_T *);
static void nv_right(cmdarg_T *);
static int nv_screengo(int, long, oparg_T *, oparg_T *);
static void nv_scroll(cmdarg_T *);
static void nv_scroll_line(cmdarg_T *);
static void nv_search(cmdarg_T *);
static void nv_select(cmdarg_T *);
static void nv_subst(cmdarg_T *);
static void nv_suspend(cmdarg_T *);
static void nv_tagpop(cmdarg_T *);
static void nv_tilde(cmdarg_T *);
static void nv_undo(cmdarg_T *);
static void nv_up(cmdarg_T *);
static void nv_visual(cmdarg_T *);
static void nv_window(cmdarg_T *);
static void nv_wordcmd(cmdarg_T *);
static void nv_zet(cmdarg_T *);
static void op_colon(oparg_T *);
static void prep_redo(int, long, int, int, int, int, int);
static void prep_redo_cmd(cmdarg_T *);
static void set_op_var(int);
static int unadjust_for_sel(void);
static void unshift_special(cmdarg_T *);
static void v_visop(cmdarg_T *);

File ops.c:
void adjust_cursor_eol(void);
void clear_oparg(oparg_T *);
int cmdline_paste_reg(int, int, int);
void cursor_pos_info(void);
int do_addsub(int, linenr_T);
int do_execreg(int, int, int, int);
int do_join(long, int, int, int);
void do_put(int, int, long, int);
int do_record(int);
void ex_display(exarg_T *);
int fex_format(linenr_T, long, int);
void format_lines(linenr_T, int);
void free_register(void *);
char_u *get_expr_line(void);
char_u *get_expr_line_src(void);
int get_expr_register(void);
int get_extra_op_char(int);
int get_op_char(int);
int get_op_type(int, int);
char_u *get_reg_contents(int, int, int);
char_u get_reg_type(int, long *);
void *get_register(int, int);
int get_register_name(int);
int get_spec_reg(int, char_u **, int *, int);
void get_yank_register(int, int);
void init_yank(void);
int insert_reg(int, int);
int op_change(oparg_T *);
int op_delete(oparg_T *);
void op_format(oparg_T *, int);
void op_formatexpr(oparg_T *);
void op_insert(oparg_T *, long);
int op_on_lines(int);
void op_reindent(oparg_T *, int (*)(void));
int op_replace(oparg_T *, int);
void op_shift(oparg_T *, int, int);
void op_tilde(oparg_T *);
int op_yank(oparg_T *, int, int);
int paragraph_start(linenr_T);
int preprocs_left(void);
void put_register(int, void *);
int read_viminfo_register(vir_T *, int);
void set_expr_line(char_u *);
void shift_line(int, int, int, int);
int swapchar(int, pos_T *);
int valid_yank_reg(int, int);
void write_reg_contents(int, char_u *, int, int);
void write_reg_contents_ex(int, char_u *, int, int, int, long);
void write_viminfo_registers(FILE *);
int yank_register_mline(int);
static void block_prep(oparg_T *, struct block_def *, linenr_T, int);
static void dis_msg(char_u *, int);
static int ends_in_white(linenr_T);
static int fmt_check_par(linenr_T, int *, char_u **, int);
static void free_yank(long);
static long line_count_info(char_u *, long *, long *, long, int);
static void mb_adjust_opend(oparg_T *);
static int put_in_typebuf(char_u *, int, int, int);
static void put_reedit_in_typebuf(int);
static void reverse_line(char_u *);
static int same_leader(linenr_T, int, char_u *, int, char_u *);
static char_u *skip_comment(char_u *, int, int, int *);
static void stuffescaped(char_u *, int);
static int swapchars(int, pos_T *, int);
static int yank_copy_line(struct block_def *, long);

File option.c:
int ExpandOldSetting(int *, char_u ***);
int ExpandSettings(expand_T *, regmatch_T *, int *, char_u ***);
void buf_copy_options(buf_T *, int);
int can_bs(int);
void change_compatible(int);
void check_buf_options(buf_T *);
char_u *check_colorcolumn(win_T *);
int check_ff_value(char_u *);
void check_options(void);
char_u *check_stl_option(char_u *);
void check_win_options(win_T *);
void check_winopt(winopt_T *);
void clear_string_option(char_u **);
void clear_termoptions(void);
void clear_winopt(winopt_T *);
void comp_col(void);
void copy_winopt(winopt_T *, winopt_T *);
int do_set(char_u *, int);
int file_ff_differs(buf_T *, int);
void find_mps_values(int *, int *, int *, int);
char_u *find_viminfo_parameter(int);
void free_one_termoption(char_u *);
void free_string_option(char_u *);
void free_termoptions(void);
char_u *get_encoding_default(void);
char_u *get_equalprg(void);
char_u *get_highlight_default(void);
int get_option_value(char_u *, long *, char_u **, int);
int get_option_value_strict(char_u *, long *, char_u **, int, void *);
long get_sts_value(void);
long get_sw_value(void);
char_u *get_term_code(char_u *);
int get_viminfo_parameter(int);
int has_format_option(int);
int langmap_adjust_mb(int);
int makefoldset(FILE *);
int makeset(FILE *, int, int);
int option_was_set(char_u *);
void reset_modifiable(void);
void reset_option_was_set(char_u *);
void save_file_ff(buf_T *);
void set_context_in_set_cmd(expand_T *, char_u *, int);
void set_helplang_default(char_u *);
void set_iminsert_global(void);
void set_imsearch_global(void);
void set_init_1(void);
void set_init_2(void);
void set_init_3(void);
void set_number_default(char *, long);
char_u *set_option_value(char_u *, long, char_u *, int);
void set_options_bin(int, int, int);
void set_string_default(char *, char_u *);
void set_string_option_direct(char_u *, int, char_u *, int, int);
void set_term_defaults(void);
void set_term_option_alloced(char_u **);
void set_title_defaults(void);
int shortmess(int);
void unset_global_local_option(char_u *, void *);
void vimrc_found(char_u *, char_u *);
int was_set_insecurely(char_u *, int);
void win_copy_options(win_T *, win_T *);
static char_u *check_cedit(void);
static int check_opt_wim(void);
static void check_redraw(long_u);
static void compatible_set(void);
static char_u *compile_cap_prog(synblock_T *, synblock_T *);
static void did_set_option(int, int, int);
static char_u *did_set_string_option(int, char_u **, char_u *, char_u *, int, int);
static void did_set_title(int);
static void didset_options(void);
static int find_key_option(char_u *);
static int findoption(char_u *);
static char_u *get_varp(struct vimoption *, struct vimoption *);
static char_u *get_varp_scope(struct vimoption *, int);
static char_u *illegal_char(char_u *, int);
static long_u *insecure_flag(int, int);
static int int_cmp(const void *, const void *);
static void langmap_init(void);
static int opt_strings_flags(char_u *, char **, unsigned int *, int);
static char_u *option_expand(int, char_u *);
static void option_value2string(struct vimoption *, int);
static int optval_default(struct vimoption *, char_u *);
static int put_setbool(FILE *, char *, char *, int);
static int put_setnum(FILE *, char *, char *, long *);
static int put_setstring(FILE *, char *, char *, char_u **, int);
static char_u *set_bool_option(int, char_u *, int, int);
static char_u *set_chars_option(char_u **);
static char_u *set_num_option(int, char_u *, long, char_u *, size_t, int);
static void set_option_default(int, int, int);
static void set_option_scriptID_idx(int, int, int);
static void set_options_default(int);
static void set_string_option_global(int, char_u **);
static void showoneopt(struct vimoption *, int);
static void showoptions(int, int);
static int string_to_key(char_u *);
static char_u *term_bg_default(void);

File os_unix.c:
void check_mouse_termcode(void);
void get_stty(void);
int mch_FullName(char_u *, char_u *, int, int);
void mch_breakcheck(void);
int mch_call_shell(char_u *, int);
int mch_can_exe(char_u *);
int mch_can_restore_icon(void);
int mch_can_restore_title(void);
int mch_char_avail(void);
int mch_chdir(char *);
int mch_check_win(int, char **);
void mch_copy_sec(char_u *, char_u *);
void mch_delay(long, int);
void mch_didjmp(void);
int mch_dirname(char_u *, int);
void mch_early_init(void);
void mch_endjmp(void);
void mch_exit(int);
int mch_expand_wildcards(int, char_u **, int *, char_u ***, int);
int mch_expandpath(garray_T *, char_u *, int);
void mch_free_acl(vim_acl_T);
vim_acl_T mch_get_acl(char_u *);
void mch_get_host_name(char_u *, int);
long mch_get_pid(void);
int mch_get_shellsize(void);
int mch_get_uname(uid_t, char_u *, int);
int mch_get_user_name(char_u *, int);
long mch_getperm(char_u *);
int mch_has_exp_wildcard(char_u *);
int mch_has_wildcard(char_u *);
void mch_hide(char_u *);
int mch_inchar(char_u *, int, long, int);
void mch_init(void);
int mch_input_isatty(void);
int mch_isFullName(char_u *);
int mch_isdir(char_u *);
int mch_libcall(char_u *, char_u *, char_u *, int, char_u **, int *);
void mch_new_shellsize(void);
int mch_nodetype(char_u *);
void mch_restore_title(int);
int mch_screenmode(char_u *);
void mch_set_acl(char_u *, vim_acl_T);
void mch_set_shellsize(void);
void mch_setmouse(int);
int mch_setperm(char_u *, long);
void mch_settitle(char_u *, char_u *);
void mch_settmode(int);
void mch_startjmp(void);
void mch_suspend(void);
long_u mch_total_mem(int);
void mch_write(char_u *, int);
void reset_signals(void);
int use_xterm_like_mouse(char_u *);
int use_xterm_mouse(void);
int vim_handle_signal(int);
int vim_is_fastterm(char_u *);
int vim_is_iris(char_u *);
int vim_is_vt300(char_u *);
int vim_is_xterm(char_u *);
static int RealWaitForChar(int, long, int *);
static int WaitForChar(long);
static void catch_sigint(int);
static void catch_signals(void (*)(), void (*)());
static void catch_sigpwr(int);
static void deathtrap(int);
static int executable_file(char_u *);
static void exit_scroll(void);
static void init_signal_stack(void);
static void may_core_dump(void);
static int save_patterns(int, char_u **, int *, char_u ***);
static void set_signals(void);
static void sig_winch(int);
static pid_t wait4pid(pid_t, waitstatus *);

File popupmnu.c:
void pum_clear(void);
void pum_display(pumitem_T *, int, int);
int pum_get_height(void);
void pum_redraw(void);
void pum_undisplay(void);
int pum_visible(void);

File quickfix.c:
int bt_dontwrite(buf_T *);
int bt_dontwrite_msg(buf_T *);
int bt_nofile(buf_T *);
int bt_quickfix(buf_T *);
int buf_hide(buf_T *);
void copy_loclist(win_T *, win_T *);
void ex_cbuffer(exarg_T *);
void ex_cc(exarg_T *);
void ex_cclose(exarg_T *);
void ex_cexpr(exarg_T *);
void ex_cfile(exarg_T *);
void ex_cnext(exarg_T *);
void ex_copen(exarg_T *);
void ex_cwindow(exarg_T *);
void ex_helpgrep(exarg_T *);
void ex_make(exarg_T *);
void ex_vimgrep(exarg_T *);
int get_errorlist(win_T *, list_T *);
int grep_internal(cmdidx_T);
void qf_age(exarg_T *);
linenr_T qf_current_entry(win_T *);
void qf_free_all(win_T *);
int qf_init(win_T *, char_u *, char_u *, int, char_u *);
void qf_jump(qf_info_T *, int, int, int);
void qf_list(exarg_T *);
void qf_mark_adjust(win_T *, linenr_T, linenr_T, long, long);
int set_errorlist(win_T *, list_T *, int, char_u *);
char_u *skip_vimgrep_pat(char_u *, char_u **, int *);
static int is_qf_win(qf_info_T *, win_T *, win_T *);
static void ll_free_all(qf_info_T **);
static qf_info_T *ll_get_or_alloc_list(win_T *);
static qf_info_T *ll_new_list(void);
static int qf_add_entry(qf_info_T *, qfline_T **, char_u *, char_u *, int, char_u *, long, int, int, char_u *, int, int, int);
static void qf_clean_dir_stack(struct dir_stack_T **);
static void qf_fill_buffer(qf_info_T *);
static buf_T *qf_find_buf(qf_info_T *);
static win_T *qf_find_win(qf_info_T *);
static void qf_fmt_text(char_u *, char_u *, int);
static void qf_free(qf_info_T *, int);
static int qf_get_fnum(char_u *, char_u *);
static int qf_init_ext(qf_info_T *, char_u *, buf_T *, typval_T *, char_u *, int, linenr_T, linenr_T, char_u *);
static void qf_new_list(qf_info_T *, char_u *);
static char_u *qf_pop_dir(struct dir_stack_T **);
static char_u *qf_push_dir(char_u *, struct dir_stack_T **);
static char_u *qf_types(int, int);
static void qf_update_buffer(qf_info_T *);
static int qf_win_pos_update(qf_info_T *, int);
static void restore_start_dir(char_u *);
static void wipe_dummy_buffer(buf_T *, char_u *);

File regexp.c:
int re_lookbehind(regprog_T *);
int re_multiline(regprog_T *);
reg_extmatch_T *ref_extmatch(reg_extmatch_T *);
char_u *reg_submatch(int);
char_u *regtilde(char_u *, int);
char_u *skip_regexp(char_u *, int, int, char_u **);
void unref_extmatch(reg_extmatch_T *);
regprog_T *vim_regcomp(char_u *, int);
int vim_regcomp_had_eol(void);
int vim_regexec(regmatch_T *, char_u *, colnr_T);
long vim_regexec_multi(regmmatch_T *, win_T *, buf_T *, linenr_T, colnr_T, proftime_T *);
int vim_regexec_nl(regmatch_T *, char_u *, colnr_T);
void vim_regfree(regprog_T *);
int vim_regsub(regmatch_T *, char_u *, char_u *, int, int, int);
int vim_regsub_multi(regmmatch_T *, linenr_T, char_u *, char_u *, int, int, int);
static regprog_T *bt_regcomp(char_u *, int);
static int bt_regexec(regmatch_T *, char_u *, colnr_T);
static long bt_regexec_both(char_u *, colnr_T, proftime_T *);
static long bt_regexec_multi(regmmatch_T *, win_T *, buf_T *, linenr_T, colnr_T, proftime_T *);
static int bt_regexec_nl(regmatch_T *, char_u *, colnr_T);
static void bt_regfree(regprog_T *);
static void cleanup_subexpr(void);
static void cleanup_zsubexpr(void);
static int coll_get_char(void);
static char_u *cstrchr(char_u *, int);
static int cstrncmp(char_u *, char_u *, int *);
static fptr_T do_Lower(int *, int);
static fptr_T do_Upper(int *, int);
static fptr_T do_lower(int *, int);
static fptr_T do_upper(int *, int);
static int get_char_class(char_u **);
static int get_coll_element(char_u **);
static void get_cpo_flags(void);
static int get_equi_class(char_u **);
static int getdecchrs(void);
static int gethexchrs(int);
static int getoctchrs(void);
static void init_class_tab(void);
static int match_with_backref(linenr_T, colnr_T, linenr_T, colnr_T, int *);
static int peekchr(void);
static int prog_magic_wrong(void);
static int re_multi_type(int);
static int re_num_cmp(long_u, char_u *);
static int read_limits(long *, long *);
static char_u *reg(int, int *);
static char_u *reg_getline(linenr_T);
static char_u *reg_getline_submatch(linenr_T);
static int reg_match_visual(void);
static void reg_nextline(void);
static int reg_prev_class(void);
static void reg_restore(regsave_T *, garray_T *);
static char_u *regatom(int *);
static char_u *regbranch(int *);
static void regc(int);
static void regcomp_start(char_u *, int);
static void reginsert(int, char_u *);
static void reginsert_limits(long, long, char_u *, int);
static void regmbc(int);
static char_u *regnext(char_u *);
static char_u *regnode(int);
static void regoptail(char_u *, char_u *);
static int regrepeat(char_u *, long);
static regitem_T *regstack_push(regstate_T, char_u *);
static void regtail(char_u *, char_u *);
static long regtry(bt_regprog_T *, colnr_T);
static void restore_parse_state(parse_state_T *);
static void restore_subexpr(regbehind_T *);
static void save_parse_state(parse_state_T *);
static char_u *skip_anyof(char_u *);
static void skipchr(void);
static void skipchr_keepstart(void);
static void ungetchr(void);
static int use_multibytecode(int);
static int vim_regsub_both(char_u *, char_u *, int, int, int);

File regexp_nfa.c:
static regsubs_T *addstate(nfa_list_T *, nfa_state_T *, regsubs_T *, nfa_pim_T *, int);
static void addstate_here(nfa_list_T *, nfa_state_T *, regsubs_T *, nfa_pim_T *, int *);
static void clear_sub(regsub_T *);
static void copy_sub(regsub_T *, regsub_T *);
static void copy_sub_off(regsub_T *, regsub_T *);
static int failure_chance(nfa_state_T *, int);
static int has_state_with_pos(regsubs_T *, nfa_pim_T *, nfa_state_T *, nfa_list_T *, nfa_list_T *);
static int match_follows(nfa_state_T *, int);
static int nfa_get_reganch(nfa_state_T *, int);
static int nfa_get_regstart(nfa_state_T *, int);
static int nfa_max_width(nfa_state_T *, int);
static int nfa_reg(int);
static int nfa_regatom(void);
static int nfa_regbranch(void);
static regprog_T *nfa_regcomp(char_u *, int);
static int nfa_regconcat(void);
static int nfa_regexec(regmatch_T *, char_u *, colnr_T);
static long nfa_regexec_both(char_u *, colnr_T);
static long nfa_regexec_multi(regmmatch_T *, win_T *, buf_T *, linenr_T, colnr_T, proftime_T *);
static int nfa_regexec_nl(regmatch_T *, char_u *, colnr_T);
static void nfa_regfree(regprog_T *);
static int nfa_regmatch(nfa_regprog_T *, nfa_state_T *, regsubs_T *, regsubs_T *);
static long nfa_regtry(nfa_regprog_T *, colnr_T);
static nfa_state_T *post2nfa(int *, int *, int);
static int realloc_post_list(void);
static int recursive_regmatch(nfa_state_T *, nfa_pim_T *, nfa_regprog_T *, regsubs_T *, regsubs_T *, int **);
static int skip_to_start(int, colnr_T *);
static void st_error(int *, int *, int *);
static Frag_T st_pop(Frag_T **, Frag_T *);
static int state_in_list(nfa_list_T *, nfa_state_T *, regsubs_T *);
static int sub_equal(regsub_T *, regsub_T *);

File screen.c:
int can_clear(char_u *);
void check_for_delay(int);
void conceal_check_cursur_line(void);
int conceal_cursor_line(win_T *);
void free_screenlines(void);
int get_keymap_str(win_T *, char_u *, int);
void get_trans_bufname(buf_T *);
int messaging(void);
int number_width(win_T *);
void redrawWinline(linenr_T, int);
void redraw_all_later(int);
int redraw_asap(int);
void redraw_buf_later(buf_T *, int);
void redraw_curbuf_later(int);
void redraw_later(int);
void redraw_later_clear(void);
void redraw_statuslines(void);
void redraw_win_later(win_T *, int);
int redrawing(void);
void reset_cterm_colors(void);
void rl_mirror(char_u *);
int screen_del_lines(int, int, int, int, int, win_T *);
void screen_draw_rectangle(int, int, int, int, int);
void screen_fill(int, int, int, int, int, int, int);
void screen_getbytes(int, int, char_u *, int *);
int screen_ins_lines(int, int, int, int, win_T *);
void screen_putchar(int, int, int, int);
void screen_puts(char_u *, int, int, int);
void screen_puts_len(char_u *, int, int, int, int);
int screen_screencol(void);
int screen_screenrow(void);
void screen_start(void);
void screen_stop_highlight(void);
int screen_valid(int);
void screenalloc(int);
void screenclear(void);
void setcursor(void);
int showmode(void);
void showruler(int);
void status_redraw_all(void);
void status_redraw_curbuf(void);
int stl_connected(win_T *);
void unshowmode(int);
void update_curbuf(int);
void update_debug_sign(buf_T *, linenr_T);
void update_screen(int);
void update_single_line(win_T *, linenr_T);
int win_del_lines(win_T *, int, int, int, int);
int win_ins_lines(win_T *, int, int, int, int);
void win_redr_status(win_T *);
void win_redr_status_matches(expand_T *, int, char_u **, int, int);
void win_redraw_last_status(frame_T *);
void windgoto(int, int);
static int char_needs_redraw(int, int, int);
static void copy_text_attr(int, char_u *, int, int);
static int draw_signcolumn(win_T *);
static void draw_tabline(void);
static void draw_vsep_win(win_T *, int);
static void fill_foldcolumn(char_u *, int, linenr_T, win_T *);
static int fillchar_status(int *, int);
static void init_search_hl(win_T *, win_T *);
static void lineclear(unsigned int, int);
static void linecopy(int, int, win_T *, win_T *);
static void lineinvalid(unsigned int, int);
static void next_search_hl(win_T *, match_T *, linenr_T, colnr_T);
static void prepare_search_hl(win_T *, linenr_T);
static void redraw_custom_statusline(win_T *);
static void screen_char(unsigned int, int, int);
static void screen_char_2(unsigned int, int, int);
static void screen_line(int, int, int, int, int);
static void screenclear2(void);
static int skip_status_match_char(char_u *, expand_T *, expand_T *);
static void start_search_hl(void);
static int status_match_len(expand_T *, char_u *);
static int win_do_lines(win_T *, int, int, int, int);
static void win_draw_end(win_T *, int, int, int, int, hlf_T);
static int win_line(win_T *, linenr_T, int, int, int);
static void win_redr_custom(win_T *, int);
static void win_redr_ruler(win_T *, int);
static void win_rest_invalid(win_T *);
static void win_update(win_T *);

File search.c:
int bck_word(long, int, int);
int bckend_word(long, int, int);
int current_block(oparg_T *, long, int, int, int);
int current_par(oparg_T *, long, int, int);
int current_quote(oparg_T *, long, int, int);
int current_search(long, int);
int current_sent(oparg_T *, long, int);
int current_tagblock(oparg_T *, long, int);
int current_word(oparg_T *, long, int, int);
int do_search(oparg_T *, int, char_u *, long, int, proftime_T *);
int end_word(long, int, int, int);
void find_pattern_in_path(char_u *, int, int, int, int, int, long, int, linenr_T, linenr_T);
pos_T *findmatch(oparg_T *, int);
pos_T *findmatchlimit(oparg_T *, int, int, int);
int findpar(int *, int, long, int, int);
int findsent(int, long);
int fwd_word(long, int, int);
char_u *get_search_pat(void);
int ignorecase(char_u *);
void last_pat_prog(regmmatch_T *);
char_u *last_search_pat(void);
int linewhite(linenr_T);
int pat_has_uppercase(char_u *);
int read_viminfo_search_pattern(vir_T *, int);
void reset_search_dir(void);
void restore_search_patterns(void);
char_u *reverse_text(char_u *);
void save_search_patterns(void);
int search_for_exact_line(buf_T *, pos_T *, int, char_u *);
int search_regcomp(char_u *, int, int, int, regmmatch_T *);
int searchc(cmdarg_T *, int);
int searchit(win_T *, buf_T *, pos_T *, int, char_u *, long, int, int, linenr_T, proftime_T *);
void set_last_search_pat(char_u *, int, int, int);
void set_search_direction(int);
void showmatch(int);
int startPS(linenr_T, int, int);
void write_viminfo_search_pattern(FILE *);
static void back_in_line(void);
static int check_linecomment(char_u *);
static int check_prevcol(char_u *, int, int, int *);
static int cls(void);
static void find_first_blank(pos_T *);
static int find_next_quote(char_u *, int, int, char_u *);
static int find_prev_quote(char_u *, int, int, char_u *);
static void findsent_forward(long, int);
static int in_html_tag(int);
static int inmacro(char_u *, char_u *);
static int is_one_char(char_u *);
static void save_re_pat(int, char_u *, int);
static void show_pat_in_path(char_u *, int, int, FILE *, linenr_T *, long, int);
static void wvsp_one(FILE *, int, char *, int);

File sha256.c:
char_u *sha256_bytes(char_u *, int, char_u *, int);
void sha256_finish(context_sha256_T *, char_u *);
char_u *sha256_key(char_u *, char_u *, int);
int sha256_self_test(void);
void sha256_start(context_sha256_T *);
void sha256_update(context_sha256_T *, char_u *, UINT32_T);
void sha2_seed(char_u *, int, char_u *, int);
static void sha256_process(context_sha256_T *, char_u *);

File spell.c:
char_u *did_set_spelllang(win_T *);
char_u *eval_soundfold(char_u *);
void ex_mkspell(exarg_T *);
void ex_spell(exarg_T *);
void ex_spelldump(exarg_T *);
void ex_spellinfo(exarg_T *);
void ex_spellrepall(exarg_T *);
int expand_spelling(linenr_T, char_u *, char_u ***);
void init_spell_chartab(void);
void spell_add_word(char_u *, int, int, int, int);
void spell_cat_line(char_u *, char_u *, int);
int spell_check(win_T *, char_u *, hlf_T *, int *, int);
int spell_check_msm(void);
int spell_check_sps(void);
void spell_dump_compl(char_u *, int, int *, int);
void spell_expand_check_cap(colnr_T);
void spell_free_all(void);
int spell_move_to(win_T *, int, int, int, hlf_T *);
void spell_reload(void);
void spell_suggest(int);
void spell_suggest_list(garray_T *, char_u *, int, int, int);
char_u *spell_to_word_end(char_u *, win_T *);
int spell_word_start(int);
static void add_banned(suginfo_T *, char_u *);
static void add_fromto(spellinfo_T *, garray_T *, char_u *, char_u *);
static void add_suggestion(suginfo_T *, garray_T *, char_u *, int, int, int, int, slang_T *, int);
static void aff_check_number(char *, int, int);
static void aff_check_string(char_u *, char_u *, char *);
static unsigned int affitem2flag(int, char_u *, char_u *, int);
static void allcap_copy(char_u *, char_u *);
static int badword_captype(char_u *, char_u *);
static int can_compound(slang_T *, char_u *, char_u *);
static int captype(char_u *, char_u *);
static int check_need_cap(linenr_T, colnr_T);
static void check_suggestions(garray_T *, garray_T *, suginfo_T *);
static int cleanup_suggestions(int, int, garray_T *, garray_T *);
static void clear_node(wordnode_T *);
static void clear_spell_chartab(spelltab_T *);
static void count_common_word(slang_T *, char_u *, int, int);
static int deref_wordnode(spellinfo_T *, wordnode_T *);
static void dump_word(slang_T *, char_u *, char_u *, int *, int, int, linenr_T);
static void find_keepcap_word(char_u *, char_u *, slang_T *, slang_T *);
static void find_word(matchinf_T *, int);
static int flag_in_afflist(int, char_u *, unsigned int);
static int fold_more(matchinf_T *);
static unsigned int get_affitem(int, char_u **);
static int get_affix_flags(afffile_T *, char_u *);
static void get_compflags(afffile_T *, char_u *, char_u *);
static int get_pfxlist(afffile_T *, char_u *, char_u *);
static wordnode_T *get_wordnode(spellinfo_T *);
static void *getroom(spellinfo_T *, size_t, int);
static char_u *getroom_save(spellinfo_T *, char_u *);
static void go_deeper(trystate_T *, int, int);
static void int_wordlist_spl(char_u *);
static int is_aff_rule(char_u **, int, char *, int);
static void make_case_word(char_u *, char_u *, int);
static int match_checkcompoundpattern(char_u *, int, garray_T *, garray_T *);
static int match_compoundrule(char_u *, slang_T *);
static int *mb_str2wide(char_u *);
static void mkspell(int, char_u **, int, int, int);
static int no_spell_checking(win_T *, win_T *);
static int node_compress(spellinfo_T *, wordnode_T *, hashtab_T *, int *);
static int nofold_len(char_u *, int, char_u *);
static void onecap_copy(char_u *, char_u *, int);
static buf_T *open_spellbuf(void);
static int put_node(FILE *, wordnode_T *, int, int, int);
static char_u *read_cnt_string(FILE *, int, int *);
static int read_prefcond_section(FILE *, slang_T *, slang_T *);
static int read_rep_section(FILE *, garray_T *, short *);
static idx_T read_tree_node(FILE *, char_u *, idx_T *, int, idx_T, int, int);
static int read_words_section(FILE *, slang_T *, int);
static int rep_compare(const void *, const void *);
static void rescore_one(suginfo_T *, suggest_T *);
static void rescore_suggestions(suginfo_T *);
static int sal_to_bool(char_u *);
static int score_wordcount_adj(slang_T *, int, char_u *, int);
static void set_spell_charflags(char_u *, int, char_u *);
static int set_spell_finish(spelltab_T *);
static int similar_chars(slang_T *, int, int);
static void slang_clear(slang_T *);
static void slang_clear_sug(slang_T *);
static void slang_free(slang_T *);
static int spell_casefold(char_u *, int, char_u *, int);
static int spell_edit_score(slang_T *, char_u *, char_u *);
static char_u *spell_enc(void);
static void spell_find_cleanup(suginfo_T *);
static void spell_find_suggest(char_u *, int, suginfo_T *, int, int, int, int);
static int spell_info_item(char_u *);
static int spell_iswordp(char_u *, win_T *);
static int spell_iswordp_nmw(char_u *);
static int spell_iswordp_w(int *, win_T *);
static void spell_load_cb(char_u *, void *);
static slang_T *spell_load_file(char_u *, char_u *, slang_T *, int);
static void spell_message(char_u *, spellinfo_T *);
static afffile_T *spell_read_aff(spellinfo_T *, char_u *);
static int spell_read_tree(FILE *, char_u **, idx_T **, int, int);
static void spell_soundfold(slang_T *, char_u *, int, char_u *);
static int store_aff_word(spellinfo_T *, char_u *, char_u *, afffile_T *, hashtab_T *, int, int, char_u *, int, hashtab_T *, hashtab_T *);
static int store_word(spellinfo_T *, char_u *, int, int, char_u *, int);
static int stp_sal_score(suggest_T *, slang_T *, char_u *, suginfo_T *, suginfo_T *);
static int sug_compare(const void *, const void *);
static int sug_filltable(spellinfo_T *, wordnode_T *, int, garray_T *);
static void suggest_trie_walk(suginfo_T *, langp_T *, char_u *, int);
static void suggest_try_soundalike(suginfo_T *);
static int tree_add_word(spellinfo_T *, char_u *, wordnode_T *, int, int, int);
static void tree_count_words(char_u *, idx_T *);
static void use_midword(win_T *, slang_T *);
static int valid_word_prefix(int, int, int, char_u *, int, slang_T *, slang_T *);
static void wordtree_compress(spellinfo_T *, wordnode_T *);
static int write_spell_prefcond(FILE *, garray_T *, garray_T *);

File syntax.c:
void clear_hl_tables(void);
void do_highlight(char_u *, int, int);
void ex_ownsyntax(exarg_T *);
void ex_syntax(exarg_T *);
void ex_syntime(exarg_T *);
char_u *get_highlight_name(expand_T *, int);
int get_syntax_attr(colnr_T, int *, int);
int get_syntax_info(int *);
char_u *get_syntax_name(expand_T *, int);
char_u *get_syntime_arg(expand_T *, int);
int highlight_changed(void);
char_u *highlight_color(int, char_u *, int);
int highlight_exists(char_u *);
char_u *highlight_has_attr(int, int, int);
int hl_combine_attr(int, int);
void init_highlight(int, int);
int load_colors(char_u *);
void reset_expand_highlight(void);
void reset_synblock(win_T *);
void restore_cterm_colors(void);
void set_context_in_echohl_cmd(expand_T *, char_u *);
void set_context_in_highlight_cmd(expand_T *, char_u *);
void set_context_in_syntax_cmd(expand_T *, char_u *);
int syn_attr2attr(int);
int syn_check_group(char_u *, int);
attrentry_T *syn_cterm_attr2entry(int);
int syn_get_final_id(int);
int syn_get_foldlevel(win_T *, long);
int syn_get_id(win_T *, long, colnr_T, int, int *, int);
int syn_get_stack_item(int);
int syn_get_sub_char(void);
int syn_id2attr(int);
char_u *syn_id2name(int);
int syn_name2id(char_u *);
int syn_namen2id(char_u *, int);
void syn_stack_apply_changes(buf_T *);
void syn_stack_free_all(synblock_T *);
attrentry_T *syn_term_attr2entry(int);
int syntax_check_changed(linenr_T);
void syntax_clear(synblock_T *);
void syntax_end_parsing(linenr_T);
int syntax_present(win_T *);
void syntax_start(win_T *, linenr_T);
static void check_keepend(void);
static void check_state_ends(void);
static void clear_current_state(void);
static void clear_keywtab(hashtab_T *);
static void clear_syn_state(synstate_T *);
static short *copy_id_list(short *);
static void find_endpos(int, lpos_T *, lpos_T *, lpos_T *, long *, lpos_T *, int *, reg_extmatch_T *);
static int get_attr_entry(garray_T *, attrentry_T *);
static char_u *get_group_name(char_u *, char_u **);
static int get_id_list(char_u **, int, short **);
static char_u *get_syn_options(char_u *, syn_opt_arg_T *, int *);
static char_u *get_syn_pattern(char_u *, synpat_T *);
static void highlight_clear(int);
static int highlight_list_arg(int, int, int, int, char_u *, char *);
static void highlight_list_one(int);
static int in_id_list(stateitem_T *, short *, struct sp_syn *, int);
static void limit_pos(lpos_T *, lpos_T *);
static void load_current_state(synstate_T *);
static int push_current_state(int);
static stateitem_T *push_next_match(stateitem_T *);
static void put_id_list(char_u *, short *, int);
static void put_pattern(char *, int, synpat_T *, int);
static void set_hl_attr(int);
static synstate_T *store_current_state(void);
static void syn_add_end_off(lpos_T *, regmmatch_T *, synpat_T *, int, int);
static void syn_add_start_off(lpos_T *, regmmatch_T *, synpat_T *, int, int);
static int syn_check_cluster(char_u *, int);
static void syn_clear_keyword(int, hashtab_T *);
static void syn_clear_pattern(int, synblock_T *);
static void syn_cmd_case(exarg_T *, int);
static void syn_cmd_clear(exarg_T *, int);
static void syn_cmd_cluster(exarg_T *, int);
static void syn_cmd_conceal(exarg_T *, int);
static void syn_cmd_enable(exarg_T *, int);
static void syn_cmd_include(exarg_T *, int);
static void syn_cmd_keyword(exarg_T *, int);
static void syn_cmd_list(exarg_T *, int);
static void syn_cmd_manual(exarg_T *, int);
static void syn_cmd_match(exarg_T *, int);
static void syn_cmd_off(exarg_T *, int);
static void syn_cmd_on(exarg_T *, int);
static void syn_cmd_onoff(exarg_T *, char *);
static void syn_cmd_region(exarg_T *, int);
static void syn_cmd_reset(exarg_T *, int);
static void syn_cmd_spell(exarg_T *, int);
static void syn_cmd_sync(exarg_T *, int);
static void syn_combine_list(short **, short **, int);
static int syn_compare_stub(const void *, const void *);
static int syn_compare_syntime(const void *, const void *);
static int syn_current_attr(int, int, int *, int);
static int syn_finish_line(int);
static void syn_incl_toplevel(int, int *);
static void syn_lines_msg(void);
static void syn_list_cluster(int);
static void syn_list_flags(struct name_list *, int, int);
static int syn_list_header(int, int, int);
static int syn_list_keywords(int, int, int, hashtab_T *, hashtab_T *);
static void syn_list_one(int, int, int);
static int syn_match_linecont(linenr_T);
static void syn_match_msg(void);
static int syn_regexec(regmmatch_T *, linenr_T, colnr_T, syn_time_T *);
static void syn_remove_pattern(synblock_T *, int);
static int syn_scl_name2id(char_u *);
static void syn_stack_apply_changes_block(synblock_T *, buf_T *);
static int syn_stack_cleanup(void);
static int syn_stack_equal(synstate_T *);
static void syn_start_line(void);
static void syn_update_ends(int);
static void update_si_attr(int);
static void update_si_end(stateitem_T *, int, int);

File tag.c:
int do_tag(char_u *, int, int, int, int);
void do_tags(exarg_T *);
int expand_tags(int, char_u *, int *, char_u ***);
int find_tags(char_u *, int *, char_u ***, int, int, char_u *);
int get_tagfname(tagname_T *, int, char_u *);
int get_tags(list_T *, char_u *);
void simplify_filename(char_u *);
void tag_freematch(void);
void tagname_free(tagname_T *);
static int add_tag_field(dict_T *, char *, char_u *, char_u *);
static char_u *expand_tag_fname(char_u *, char_u *, int);
static int find_extra(char_u **);
static void found_tagfile_cb(char_u *, void *);
static int parse_match(char_u *, tagptrs_T *);
static int parse_tag_line(char_u *, int, tagptrs_T *);
static char_u *tag_full_fname(tagptrs_T *);
static void taglen_advance(int);
static int test_for_static(tagptrs_T *);

File term.c:
int add_termcap_entry(char_u *, int);
void add_termcode(char_u *, char_u *, int);
void check_shellsize(void);
int check_termcode(int, char_u *, int, int *);
void clear_termcodes(void);
void cursor_off(void);
void cursor_on(void);
void del_mouse_termcode(int);
void del_termcode(char_u *);
int find_term_bykeys(char_u *);
char_u *find_termcode(char_u *);
char_u *get_termcode(int);
void getlinecol(long *, long *);
void limit_screen_size(void);
void may_req_ambiguous_char_width(void);
void may_req_termresponse(void);
int mouse_has(int);
int mouse_model_popup(void);
void out_char(unsigned int);
void out_flush(void);
void out_flush_check(void);
void out_str(char_u *);
void out_str_nf(char_u *);
char_u *replace_termcodes(char_u *, char_u **, int, int, int);
void scroll_region_reset(void);
void scroll_region_set(win_T *, int);
void scroll_start(void);
void set_mouse_termcode(int, char_u *);
void set_mouse_topline(win_T *);
void set_shellsize(int, int, int);
int set_termname(char_u *);
void setmouse(void);
void settmode(int);
void shell_resized(void);
void shell_resized_check(void);
int show_one_termcode(char_u *, char_u *, int);
void show_termcodes(void);
void starttermcap(void);
void stoptermcap(void);
int swapping_screen(void);
void term_append_lines(int);
void term_bg_color(int);
void term_cursor_right(int);
void term_cursor_shape(void);
void term_delete_lines(int);
void term_fg_color(int);
int term_is_8bit(char_u *);
void term_set_winpos(int, int);
void term_set_winsize(int, int);
void term_settitle(char_u *);
void term_windgoto(int, int);
void termcapinit(char_u *);
char_u *translate_mapping(char_u *, int);
void ttest(int);
void win_new_shellsize(void);
static void check_for_codes_from_term(void);
static void del_termcode_idx(int);
static struct builtin_term *find_builtin_term(char_u *);
static void out_char_nf(unsigned int);
static void req_more_codes_from_term(void);
static void set_color_count(int);
static void term_color(char_u *, int);
static int termcode_star(char_u *, int);
static char_u *tgetent_error(char_u *, char_u *);

File ui.c:
void add_to_input_buf(char_u *, int);
int check_col(int);
int check_row(int);
void fill_input_buf(int);
char_u *get_input_buf(void);
int jump_to_mouse(int, int *, int);
int mouse_comp_pos(win_T *, int *, int *, linenr_T *);
win_T *mouse_find_win(int *, int *);
void read_error_exit(void);
int read_from_input_buf(char_u *, long);
void set_input_buf(char_u *);
void trash_input_buf(void);
void ui_breakcheck(void);
int ui_char_avail(void);
void ui_cursor_shape(void);
void ui_delay(long, int);
int ui_get_shellsize(void);
int ui_inchar(char_u *, int, long, int);
void ui_inchar_undo(char_u *, int);
void ui_new_shellsize(void);
void ui_set_shellsize(int);
void ui_suspend(void);
void ui_write(char_u *, int);
int vim_is_input_buf_empty(void);
int vim_is_input_buf_full(void);

File undo.c:
int bufIsChanged(buf_T *);
int curbufIsChanged(void);
void ex_undojoin(exarg_T *);
void ex_undolist(exarg_T *);
void u_blockfree(buf_T *);
void u_clearall(buf_T *);
void u_clearline(void);
void u_compute_hash(char_u *);
void u_eval_tree(u_header_T *, list_T *);
void u_find_first_changed(void);
char_u *u_get_undo_file_name(char_u *, int);
int u_inssub(linenr_T);
void u_read_undo(char_u *, char_u *, char_u *);
void u_redo(int);
int u_save(linenr_T, linenr_T);
int u_save_cursor(void);
int u_savecommon(linenr_T, linenr_T, linenr_T, int);
int u_savedel(linenr_T, long);
void u_saveline(linenr_T);
int u_savesub(linenr_T);
void u_sync(int);
void u_unchanged(buf_T *);
void u_undo(int);
void u_undoline(void);
void u_update_save_nr(buf_T *);
void u_write_undo(char_u *, int, buf_T *, char_u *);
int undo_allowed(void);
void undo_time(long, int, int, int);
static void corruption_error(char *, char_u *);
static size_t fwrite_crypt(char_u *, size_t, FILE *, buf_T *);
static void serialize_pos(pos_T, FILE *);
static void u_add_time(char_u *, size_t, time_t);
static void u_doit(int);
static void u_free_uhp(u_header_T *);
static void u_freebranch(buf_T *, u_header_T *, u_header_T **);
static void u_freeentries(buf_T *, u_header_T *, u_header_T **);
static void u_freeentry(u_entry_T *, long);
static void u_freeheader(buf_T *, u_header_T *, u_header_T **);
static u_entry_T *u_get_headentry(void);
static void u_getbot(void);
static void u_unch_branch(u_header_T *);
static void u_undo_end(int, int);
static void u_undoredo(int);
static void unserialize_pos(pos_T *, FILE *);

File version.c:
void ex_intro(exarg_T *);
void ex_version(exarg_T *);
int has_patch(int);
int highest_patch(void);
void intro_message(int);
void list_version(void);
void maybe_intro_message(void);
static void version_msg(char *);

File window.c:
win_T *buf_jump_open_tab(buf_T *);
win_T *buf_jump_open_win(buf_T *);
void check_lnums(int);
void clear_matches(win_T *);
void close_others(int, int);
void close_windows(buf_T *, int);
void command_height(void);
void curwin_init(void);
void do_window(int, long, int);
char_u *file_name_at_cursor(int, long, linenr_T *);
char_u *file_name_in_line(char_u *, int, int, long, char_u *, linenr_T *);
char_u *find_file_name_in_path(char_u *, int, int, long, char_u *);
tabpage_T *find_tabpage(int);
void free_tabpage(tabpage_T *);
matchitem_T *get_match(win_T *, int);
int get_tab_number(tabpage_T *);
int get_win_number(win_T *, win_T *);
void goto_tabpage(int);
void goto_tabpage_tp(tabpage_T *, int, int);
void goto_tabpage_win(tabpage_T *, win_T *);
char_u *grab_file_name(long, linenr_T *);
void last_status(int);
void make_snapshot(int);
int make_tabpages(int);
int make_windows(int, int);
int match_add(win_T *, char_u *, char_u *, int, int);
int match_delete(win_T *, int, int);
int may_open_tabpage(void);
int min_rows(void);
int one_window(void);
int only_one_window(void);
int path_with_url(char_u *);
void restore_buffer(buf_T *);
void restore_snapshot(int, int);
void restore_win(win_T *, tabpage_T *, int);
void shell_new_columns(void);
void shell_new_rows(void);
void switch_buffer(buf_T **, buf_T *);
int switch_win(win_T **, tabpage_T **, win_T *, tabpage_T *, int);
int tabline_height(void);
int tabpage_index(tabpage_T *);
void tabpage_move(int);
int valid_tabpage(tabpage_T *);
int vim_FullName(char_u *, char_u *, int, int);
int vim_isAbsName(char_u *);
void win_alloc_aucmd_win(void);
int win_alloc_first(void);
int win_alloc_lines(win_T *);
void win_append(win_T *, win_T *);
int win_close(win_T *, int);
void win_close_othertab(win_T *, int, tabpage_T *);
int win_comp_pos(void);
void win_comp_scroll(win_T *);
int win_count(void);
void win_drag_status_line(win_T *, int);
void win_drag_vsep_line(win_T *, int);
void win_enter(win_T *, int);
void win_equal(win_T *, int, int);
tabpage_T *win_find_tabpage(win_T *);
void win_free_lsize(win_T *);
void win_goto(win_T *);
void win_init_empty(win_T *);
void win_init_size(void);
void win_move_after(win_T *, win_T *);
void win_new_height(win_T *, int);
int win_new_tabpage(int);
void win_new_width(win_T *, int);
void win_remove(win_T *, tabpage_T *);
void win_setheight(int);
void win_setheight_win(int, win_T *);
void win_setminheight(void);
void win_setwidth(int);
void win_setwidth_win(int, win_T *);
void win_size_restore(garray_T *);
void win_size_save(garray_T *);
int win_split(int, int);
int win_split_ins(int, int, win_T *, int);
int win_valid(win_T *);
win_T *winframe_remove(win_T *, int *, tabpage_T *);
static tabpage_T *alloc_tabpage(void);
static int check_snapshot_rec(frame_T *, frame_T *);
static void clear_snapshot_rec(frame_T *);
static int close_last_window_tabpage(win_T *, int, tabpage_T *);
static void enter_tabpage(tabpage_T *, buf_T *, int, int);
static char_u *eval_includeexpr(char_u *, int);
static void frame_add_height(frame_T *, int);
static void frame_add_statusline(frame_T *);
static void frame_add_vsep(frame_T *);
static void frame_comp_pos(frame_T *, int *, int *);
static int frame_fixed_height(frame_T *);
static int frame_fixed_width(frame_T *);
static int frame_has_win(frame_T *, win_T *);
static int frame_minheight(frame_T *, win_T *);
static int frame_minwidth(frame_T *, win_T *);
static void frame_new_height(frame_T *, int, int, int);
static void frame_new_width(frame_T *, int, int, int);
static void frame_setheight(frame_T *, int);
static void frame_setwidth(frame_T *, int);
static void last_status_rec(frame_T *, int);
static int last_window(void);
static int leave_tabpage(buf_T *, int);
static void make_snapshot_rec(frame_T *, frame_T **);
static void new_frame(win_T *);
static int path_is_url(char_u *);
static win_T *restore_snapshot_rec(frame_T *, frame_T *);
static win_T *win_alloc(win_T *, int);
static int win_alloc_firstwin(win_T *);
static frame_T *win_altframe(tabpage_T *, win_T *);
static void win_enter_ext(win_T *, int, int, int, int);
static void win_equal_rec(win_T *, int, frame_T *, int, int, int, int, int);
static void win_free(win_T *, tabpage_T *);
static void win_goto_hor(int, long);
static void win_goto_ver(int, long);
static void win_init(win_T *, win_T *, int);
static void win_rotate(int, int);

Non-debugging symbols:
0x0000000000422248  _init
0x000000000059d080  __libc_csu_init
0x000000000059d0f0  __libc_csu_fini
0x000000000059d0f4  _fini
0x0000000000422248  _init
0x0000000000422280  log10@plt
0x0000000000422290  PyModule_AddObject@plt
0x00000000004222a0  ctime@plt
0x00000000004222b0  chmod@plt
0x00000000004222c0  tcsetattr@plt
0x00000000004222d0  PySys_GetObject@plt
0x00000000004222e0  PyDict_SetItemString@plt
0x00000000004222f0  exp@plt
0x0000000000422300  chdir@plt
0x0000000000422310  fileno@plt
0x0000000000422320  dup2@plt
0x0000000000422330  PyString_AsString@plt
0x0000000000422340  __stpcpy_chk@plt
0x0000000000422350  printf@plt
0x0000000000422360  atan2@plt
0x0000000000422370  tanh@plt
0x0000000000422380  memset@plt
0x0000000000422390  ftell@plt
0x00000000004223a0  PyList_GetItem@plt
0x00000000004223b0  getgid@plt
0x00000000004223c0  setsid@plt
0x00000000004223d0  PyIter_Next@plt
0x00000000004223e0  close@plt
0x00000000004223f0  __longjmp_chk@plt
0x0000000000422400  Py_InitModule4_64@plt
0x0000000000422410  Py_SetPythonHome@plt
0x0000000000422420  ceil@plt
0x0000000000422430  utime@plt
0x0000000000422440  ioctl@plt
0x0000000000422450  PyType_Ready@plt
0x0000000000422460  memchr@plt
0x0000000000422470  stpcpy@plt
0x0000000000422480  strncat@plt
0x0000000000422490  tgetflag@plt
0x00000000004224a0  tan@plt
0x00000000004224b0  nl_langinfo@plt
0x00000000004224c0  isatty@plt
0x00000000004224d0  PySys_SetArgv@plt
0x00000000004224e0  PyMem_Free@plt
0x00000000004224f0  gethostbyname@plt
0x0000000000422500  __gmon_start__@plt
0x0000000000422510  sigset@plt
0x0000000000422520  uname@plt
0x0000000000422530  _setjmp@plt
0x0000000000422540  fseek@plt
0x0000000000422550  PyGILState_Release@plt
0x0000000000422560  textdomain@plt
0x0000000000422570  __isoc99_sscanf@plt
0x0000000000422580  select@plt
0x0000000000422590  execvp@plt
0x00000000004225a0  exit@plt
0x00000000004225b0  __assert_fail@plt
0x00000000004225c0  _PyArg_ParseTuple_SizeT@plt
0x00000000004225d0  strcasecmp@plt
0x00000000004225e0  bindtextdomain@plt
0x00000000004225f0  gettimeofday@plt
0x0000000000422600  PyObject_GC_Del@plt
0x0000000000422610  PyErr_NoMemory@plt
0x0000000000422620  putchar@plt
0x0000000000422630  PyObject_GC_UnTrack@plt
0x0000000000422640  _PyObject_CallFunction_SizeT@plt
0x0000000000422650  strpbrk@plt
0x0000000000422660  execl@plt
0x0000000000422670  PyObject_CallFunctionObjArgs@plt
0x0000000000422680  freecon@plt
0x0000000000422690  read@plt
0x00000000004226a0  PyObject_IsTrue@plt
0x00000000004226b0  strncmp@plt
0x00000000004226c0  malloc@plt
0x00000000004226d0  fopen@plt
0x00000000004226e0  __libc_start_main@plt
0x00000000004226f0  dup@plt
0x0000000000422700  fchdir@plt
0x0000000000422710  unlink@plt
0x0000000000422720  rmdir@plt
0x0000000000422730  _exit@plt
0x0000000000422740  __memcpy_chk@plt
0x0000000000422750  cos@plt
0x0000000000422760  PyObject_GetItem@plt
0x0000000000422770  PyString_FromStringAndSize@plt
0x0000000000422780  sysconf@plt
0x0000000000422790  Py_FindMethod@plt
0x00000000004227a0  PyDict_Next@plt
0x00000000004227b0  getpid@plt
0x00000000004227c0  PyImport_AddModule@plt
0x00000000004227d0  PyLong_AsLong@plt
0x00000000004227e0  fgets@plt
0x00000000004227f0  iconv_open@plt
0x0000000000422800  getpwuid@plt
0x0000000000422810  PyErr_Format@plt
0x0000000000422820  PyFloat_FromDouble@plt
0x0000000000422830  __strcat_chk@plt
0x0000000000422840  fmod@plt
0x0000000000422850  PyNumber_Long@plt
0x0000000000422860  ungetc@plt
0x0000000000422870  __ctype_toupper_loc@plt
0x0000000000422880  PyErr_ExceptionMatches@plt
0x0000000000422890  PyErr_Occurred@plt
0x00000000004228a0  fputc@plt
0x00000000004228b0  tcflush@plt
0x00000000004228c0  free@plt
0x00000000004228d0  _IO_getc@plt
0x00000000004228e0  atan@plt
0x00000000004228f0  PyMapping_Check@plt
0x0000000000422900  strlen@plt
0x0000000000422910  ferror@plt
0x0000000000422920  tgetent@plt
0x0000000000422930  opendir@plt
0x0000000000422940  __xstat@plt
0x0000000000422950  PyCapsule_New@plt
0x0000000000422960  cosh@plt
0x0000000000422970  __ctype_b_loc@plt
0x0000000000422980  PyEval_InitThreads@plt
0x0000000000422990  PyErr_SetObject@plt
0x00000000004229a0  PyEval_RestoreThread@plt
0x00000000004229b0  readdir@plt
0x00000000004229c0  dlerror@plt
0x00000000004229d0  sprintf@plt
0x00000000004229e0  asin@plt
0x00000000004229f0  fdopen@plt
0x0000000000422a00  towupper@plt
0x0000000000422a10  strrchr@plt
0x0000000000422a20  PyString_FromString@plt
0x0000000000422a30  _PyObject_GC_New@plt
0x0000000000422a40  PyString_FromFormat@plt
0x0000000000422a50  pipe@plt
0x0000000000422a60  PyInt_FromLong@plt
0x0000000000422a70  sleep@plt
0x0000000000422a80  PyEval_SaveThread@plt
0x0000000000422a90  fsync@plt
0x0000000000422aa0  iconv@plt
0x0000000000422ab0  dlclose@plt
0x0000000000422ac0  ftello@plt
0x0000000000422ad0  pow@plt
0x0000000000422ae0  PyModule_GetDict@plt
0x0000000000422af0  is_selinux_enabled@plt
0x0000000000422b00  kill@plt
0x0000000000422b10  strerror@plt
0x0000000000422b20  setfilecon@plt
0x0000000000422b30  strstr@plt
0x0000000000422b40  PyInt_AsLong@plt
0x0000000000422b50  sigaction@plt
0x0000000000422b60  acl_get_file@plt
0x0000000000422b70  rewind@plt
0x0000000000422b80  strcat@plt
0x0000000000422b90  PyObject_GetIter@plt
0x0000000000422ba0  PyList_Size@plt
0x0000000000422bb0  PyType_IsSubtype@plt
0x0000000000422bc0  fputs@plt
0x0000000000422bd0  lseek@plt
0x0000000000422be0  strtol@plt
0x0000000000422bf0  readlink@plt
0x0000000000422c00  connect@plt
0x0000000000422c10  towlower@plt
0x0000000000422c20  tputs@plt
0x0000000000422c30  setpwent@plt
0x0000000000422c40  endpwent@plt
0x0000000000422c50  PyObject_Init@plt
0x0000000000422c60  PyErr_BadArgument@plt
0x0000000000422c70  tcgetattr@plt
0x0000000000422c80  PyGILState_Ensure@plt
0x0000000000422c90  mblen@plt
0x0000000000422ca0  Gpm_GetEvent@plt
0x0000000000422cb0  __strcpy_chk@plt
0x0000000000422cc0  signal@plt
0x0000000000422cd0  memmove@plt
0x0000000000422ce0  PyObject_Malloc@plt
0x0000000000422cf0  Py_Initialize@plt
0x0000000000422d00  strchr@plt
0x0000000000422d10  waitpid@plt
0x0000000000422d20  getfilecon@plt
0x0000000000422d30  PyFloat_AsDouble@plt
0x0000000000422d40  socket@plt
0x0000000000422d50  fread@plt
0x0000000000422d60  setenv@plt
0x0000000000422d70  PySequence_Fast@plt
0x0000000000422d80  __fxstat@plt
0x0000000000422d90  PySequence_Check@plt
0x0000000000422da0  getenv@plt
0x0000000000422db0  alarm@plt
0x0000000000422dc0  __errno_location@plt
0x0000000000422dd0  qsort@plt
0x0000000000422de0  PyObject_GetAttrString@plt
0x0000000000422df0  dcgettext@plt
0x0000000000422e00  acl_set_file@plt
0x0000000000422e10  PyRun_StringFlags@plt
0x0000000000422e20  strncasecmp@plt
0x0000000000422e30  __stack_chk_fail@plt
0x0000000000422e40  Gpm_Close@plt
0x0000000000422e50  PyObject_SetAttrString@plt
0x0000000000422e60  PyNumber_Check@plt
0x0000000000422e70  PyErr_NewException@plt
0x0000000000422e80  PyList_Append@plt
0x0000000000422e90  strcmp@plt
0x0000000000422ea0  __memset_chk@plt
0x0000000000422eb0  __fread_chk@plt
0x0000000000422ec0  PyErr_SetNone@plt
0x0000000000422ed0  getcwd@plt
0x0000000000422ee0  getpwent@plt
0x0000000000422ef0  acos@plt
0x0000000000422f00  PyDict_GetItemString@plt
0x0000000000422f10  _PyArg_Parse_SizeT@plt
0x0000000000422f20  Py_Finalize@plt
0x0000000000422f30  PyObject_Call@plt
0x0000000000422f40  tgoto@plt
0x0000000000422f50  strcpy@plt
0x0000000000422f60  strtok@plt
0x0000000000422f70  PyUnicodeUCS4_AsEncodedString@plt
0x0000000000422f80  PyLong_FromLong@plt
0x0000000000422f90  nanosleep@plt
0x0000000000422fa0  srand@plt
0x0000000000422fb0  tgetnum@plt
0x0000000000422fc0  getuid@plt
0x0000000000422fd0  PyRun_SimpleStringFlags@plt
0x0000000000422fe0  __ctype_tolower_loc@plt
0x0000000000422ff0  mkdtemp@plt
0x0000000000423000  memcmp@plt
0x0000000000423010  PyString_AsStringAndSize@plt
0x0000000000423020  feof@plt
0x0000000000423030  PyTuple_Size@plt
0x0000000000423040  PyImport_ImportModule@plt
0x0000000000423050  iswupper@plt
0x0000000000423060  fclose@plt
0x0000000000423070  dlopen@plt
0x0000000000423080  PyErr_Clear@plt
0x0000000000423090  strncpy@plt
0x00000000004230a0  getrlimit@plt
0x00000000004230b0  __lxstat@plt
0x00000000004230c0  fseeko@plt
0x00000000004230d0  dlsym@plt
0x00000000004230e0  bind_textdomain_codeset@plt
0x00000000004230f0  PyErr_SetString@plt
0x0000000000423100  closedir@plt
0x0000000000423110  __sprintf_chk@plt
0x0000000000423120  access@plt
0x0000000000423130  fork@plt
0x0000000000423140  sigemptyset@plt
0x0000000000423150  Gpm_Open@plt
0x0000000000423160  fwrite@plt
0x0000000000423170  acl_free@plt
0x0000000000423180  realloc@plt
0x0000000000423190  setlocale@plt
0x00000000004231a0  floor@plt
0x00000000004231b0  tgetstr@plt
0x00000000004231c0  rand@plt
0x00000000004231d0  __memmove_chk@plt
0x00000000004231e0  fprintf@plt
0x00000000004231f0  PyObject_HasAttrString@plt
0x0000000000423200  localtime@plt
0x0000000000423210  write@plt
0x0000000000423220  strftime@plt
0x0000000000423230  PyList_New@plt
0x0000000000423240  sqrt@plt
0x0000000000423250  PyMem_Malloc@plt
0x0000000000423260  sigaltstack@plt
0x0000000000423270  sysinfo@plt
0x0000000000423280  PyErr_PrintEx@plt
0x0000000000423290  umask@plt
0x00000000004232a0  memcpy@plt
0x00000000004232b0  fcntl@plt
0x00000000004232c0  PyCapsule_GetPointer@plt
0x00000000004232d0  _PyObject_CallMethod_SizeT@plt
0x00000000004232e0  Py_IsInitialized@plt
0x00000000004232f0  fchown@plt
0x0000000000423300  open@plt
0x0000000000423310  getpwnam@plt
0x0000000000423320  iconv_close@plt
0x0000000000423330  sin@plt
0x0000000000423340  log@plt
0x0000000000423350  rename@plt
0x0000000000423360  _Py_BuildValue_SizeT@plt
0x0000000000423370  strtod@plt
0x0000000000423380  __fdelt_chk@plt
0x0000000000423390  _IO_putc@plt
0x00000000004233a0  mkdir@plt
0x00000000004233b0  time@plt
0x00000000004233c0  PyDict_New@plt
0x00000000004233d0  fflush@plt
0x00000000004233e0  sync@plt
0x00000000004233f0  sinh@plt
0x0000000000423400  PySys_SetObject@plt
0x000000000059d080  __libc_csu_init
0x000000000059d0f0  __libc_csu_fini
0x000000000059d0f4  _fini
