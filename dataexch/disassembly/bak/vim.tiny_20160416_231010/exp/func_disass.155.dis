GNU gdb (Ubuntu 7.10-1ubuntu2) 7.10
Copyright (C) 2015 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "arm-linux-gnueabihf".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /usr/bin/vim.tiny...Reading symbols from /usr/lib/debug//usr/bin/vim.tiny...done.
done.
Dump of assembler code for function clear_termcodes:
   0x0007dc38 <+0>:	f8 b5	push	{r3, r4, r5, r6, r7, lr}
   0x0007dc3a <+2>:	1a 4c	ldr	r4, [pc, #104]	; (0x7dca4 <clear_termcodes+108>)
   0x0007dc3c <+4>:	1a 4d	ldr	r5, [pc, #104]	; (0x7dca8 <clear_termcodes+112>)
   0x0007dc3e <+6>:	7c 44	add	r4, pc
   0x0007dc40 <+8>:	7d 44	add	r5, pc
   0x0007dc42 <+10>:	d4 f8 1c 38	ldr.w	r3, [r4, #2076]	; 0x81c
   0x0007dc46 <+14>:	00 2b	cmp	r3, #0
   0x0007dc48 <+16>:	0d dd	ble.n	0x7dc66 <clear_termcodes+46>
   0x0007dc4a <+18>:	01 3b	subs	r3, #1
   0x0007dc4c <+20>:	d4 f8 20 28	ldr.w	r2, [r4, #2080]	; 0x820
   0x0007dc50 <+24>:	c4 f8 1c 38	str.w	r3, [r4, #2076]	; 0x81c
   0x0007dc54 <+28>:	02 eb 03 13	add.w	r3, r2, r3, lsl #4
   0x0007dc58 <+32>:	58 68	ldr	r0, [r3, #4]
   0x0007dc5a <+34>:	bf f7 a3 fb	bl	0x3d3a4 <vim_free>
   0x0007dc5e <+38>:	d4 f8 1c 38	ldr.w	r3, [r4, #2076]	; 0x81c
   0x0007dc62 <+42>:	00 2b	cmp	r3, #0
   0x0007dc64 <+44>:	f1 dc	bgt.n	0x7dc4a <clear_termcodes+18>
   0x0007dc66 <+46>:	11 4c	ldr	r4, [pc, #68]	; (0x7dcac <clear_termcodes+116>)
   0x0007dc68 <+48>:	7c 44	add	r4, pc
   0x0007dc6a <+50>:	d4 f8 20 08	ldr.w	r0, [r4, #2080]	; 0x820
   0x0007dc6e <+54>:	bf f7 99 fb	bl	0x3d3a4 <vim_free>
   0x0007dc72 <+58>:	0f 49	ldr	r1, [pc, #60]	; (0x7dcb0 <clear_termcodes+120>)
   0x0007dc74 <+60>:	00 23	movs	r3, #0
   0x0007dc76 <+62>:	0f 4a	ldr	r2, [pc, #60]	; (0x7dcb4 <clear_termcodes+124>)
   0x0007dc78 <+64>:	c4 f8 20 38	str.w	r3, [r4, #2080]	; 0x820
   0x0007dc7c <+68>:	01 20	movs	r0, #1
   0x0007dc7e <+70>:	c4 f8 24 38	str.w	r3, [r4, #2084]	; 0x824
   0x0007dc82 <+74>:	69 58	ldr	r1, [r5, r1]
   0x0007dc84 <+76>:	ae 58	ldr	r6, [r5, r2]
   0x0007dc86 <+78>:	0c 4a	ldr	r2, [pc, #48]	; (0x7dcb8 <clear_termcodes+128>)
   0x0007dc88 <+80>:	0f 68	ldr	r7, [r1, #0]
   0x0007dc8a <+82>:	0c 49	ldr	r1, [pc, #48]	; (0x7dcbc <clear_termcodes+132>)
   0x0007dc8c <+84>:	37 60	str	r7, [r6, #0]
   0x0007dc8e <+86>:	ae 58	ldr	r6, [r5, r2]
   0x0007dc90 <+88>:	0b 4a	ldr	r2, [pc, #44]	; (0x7dcc0 <clear_termcodes+136>)
   0x0007dc92 <+90>:	37 60	str	r7, [r6, #0]
   0x0007dc94 <+92>:	69 58	ldr	r1, [r5, r1]
   0x0007dc96 <+94>:	0b 70	strb	r3, [r1, #0]
   0x0007dc98 <+96>:	aa 58	ldr	r2, [r5, r2]
   0x0007dc9a <+98>:	c4 f8 0c 08	str.w	r0, [r4, #2060]	; 0x80c
   0x0007dc9e <+102>:	13 80	strh	r3, [r2, #0]
   0x0007dca0 <+104>:	f8 bd	pop	{r3, r4, r5, r6, r7, pc}
   0x0007dca2 <+106>:	00 bf	nop
   0x0007dca4 <+108>:	ea 2a	cmp	r2, #234	; 0xea
   0x0007dca6 <+110>:	03 00	movs	r3, r0
   0x0007dca8 <+112>:	58 9a	ldr	r2, [sp, #352]	; 0x160
   0x0007dcaa <+114>:	02 00	movs	r2, r0
   0x0007dcac <+116>:	c0 2a	cmp	r2, #192	; 0xc0
   0x0007dcae <+118>:	03 00	movs	r3, r0
   0x0007dcb0 <+120>:	98 05	lsls	r0, r3, #22
   0x0007dcb2 <+122>:	00 00	movs	r0, r0
   0x0007dcb4 <+124>:	5c 09	lsrs	r4, r3, #5
   0x0007dcb6 <+126>:	00 00	movs	r0, r0
   0x0007dcb8 <+128>:	f4 04	lsls	r4, r6, #19
   0x0007dcba <+130>:	00 00	movs	r0, r0
   0x0007dcbc <+132>:	88 07	lsls	r0, r1, #30
   0x0007dcbe <+134>:	00 00	movs	r0, r0
   0x0007dcc0 <+136>:	60 02	lsls	r0, r4, #9
   0x0007dcc2 <+138>:	00 00	movs	r0, r0
End of assembler dump.
Dump of assembler code for function cursor_off:
   0x0007db90 <+0>:	08 b5	push	{r3, lr}
   0x0007db92 <+2>:	0b 4b	ldr	r3, [pc, #44]	; (0x7dbc0 <cursor_off+48>)
   0x0007db94 <+4>:	0b 4a	ldr	r2, [pc, #44]	; (0x7dbc4 <cursor_off+52>)
   0x0007db96 <+6>:	7b 44	add	r3, pc
   0x0007db98 <+8>:	9a 58	ldr	r2, [r3, r2]
   0x0007db9a <+10>:	12 68	ldr	r2, [r2, #0]
   0x0007db9c <+12>:	4a b1	cbz	r2, 0x7dbb2 <cursor_off+34>
   0x0007db9e <+14>:	0a 4a	ldr	r2, [pc, #40]	; (0x7dbc8 <cursor_off+56>)
   0x0007dba0 <+16>:	7a 44	add	r2, pc
   0x0007dba2 <+18>:	d2 f8 08 28	ldr.w	r2, [r2, #2056]	; 0x808
   0x0007dba6 <+22>:	2a b1	cbz	r2, 0x7dbb4 <cursor_off+36>
   0x0007dba8 <+24>:	08 4b	ldr	r3, [pc, #32]	; (0x7dbcc <cursor_off+60>)
   0x0007dbaa <+26>:	01 22	movs	r2, #1
   0x0007dbac <+28>:	7b 44	add	r3, pc
   0x0007dbae <+30>:	c3 f8 08 28	str.w	r2, [r3, #2056]	; 0x808
   0x0007dbb2 <+34>:	08 bd	pop	{r3, pc}
   0x0007dbb4 <+36>:	06 4a	ldr	r2, [pc, #24]	; (0x7dbd0 <cursor_off+64>)
   0x0007dbb6 <+38>:	9b 58	ldr	r3, [r3, r2]
   0x0007dbb8 <+40>:	18 6b	ldr	r0, [r3, #48]	; 0x30
   0x0007dbba <+42>:	ff f7 19 fb	bl	0x7d1f0 <out_str>
   0x0007dbbe <+46>:	f3 e7	b.n	0x7dba8 <cursor_off+24>
   0x0007dbc0 <+48>:	02 9b	ldr	r3, [sp, #8]
   0x0007dbc2 <+50>:	02 00	movs	r2, r0
   0x0007dbc4 <+52>:	2c 07	lsls	r4, r5, #28
   0x0007dbc6 <+54>:	00 00	movs	r0, r0
   0x0007dbc8 <+56>:	88 2b	cmp	r3, #136	; 0x88
   0x0007dbca <+58>:	03 00	movs	r3, r0
   0x0007dbcc <+60>:	7c 2b	cmp	r3, #124	; 0x7c
   0x0007dbce <+62>:	03 00	movs	r3, r0
   0x0007dbd0 <+64>:	b4 03	lsls	r4, r6, #14
   0x0007dbd2 <+66>:	00 00	movs	r0, r0
End of assembler dump.
Dump of assembler code for function cursor_on:
   0x0007d3e8 <+0>:	08 b5	push	{r3, lr}
   0x0007d3ea <+2>:	06 4b	ldr	r3, [pc, #24]	; (0x7d404 <cursor_on+28>)
   0x0007d3ec <+4>:	06 4a	ldr	r2, [pc, #24]	; (0x7d408 <cursor_on+32>)
   0x0007d3ee <+6>:	7b 44	add	r3, pc
   0x0007d3f0 <+8>:	9b 58	ldr	r3, [r3, r2]
   0x0007d3f2 <+10>:	58 6b	ldr	r0, [r3, #52]	; 0x34
   0x0007d3f4 <+12>:	ff f7 fc fe	bl	0x7d1f0 <out_str>
   0x0007d3f8 <+16>:	04 4b	ldr	r3, [pc, #16]	; (0x7d40c <cursor_on+36>)
   0x0007d3fa <+18>:	00 22	movs	r2, #0
   0x0007d3fc <+20>:	7b 44	add	r3, pc
   0x0007d3fe <+22>:	c3 f8 08 28	str.w	r2, [r3, #2056]	; 0x808
   0x0007d402 <+26>:	08 bd	pop	{r3, pc}
   0x0007d404 <+28>:	aa a2	add	r2, pc, #680	; (adr r2, 0x7d6b0 <ttest+328>)
   0x0007d406 <+30>:	02 00	movs	r2, r0
   0x0007d408 <+32>:	b4 03	lsls	r4, r6, #14
   0x0007d40a <+34>:	00 00	movs	r0, r0
   0x0007d40c <+36>:	2c 33	adds	r3, #44	; 0x2c
   0x0007d40e <+38>:	03 00	movs	r3, r0
End of assembler dump.
Dump of assembler code for function del_termcode:
   0x0007dd04 <+0>:	1c 4a	ldr	r2, [pc, #112]	; (0x7dd78 <del_termcode+116>)
   0x0007dd06 <+2>:	7a 44	add	r2, pc
   0x0007dd08 <+4>:	d2 f8 20 38	ldr.w	r3, [r2, #2080]	; 0x820
   0x0007dd0c <+8>:	93 b3	cbz	r3, 0x7dd74 <del_termcode+112>
   0x0007dd0e <+10>:	d2 f8 1c 18	ldr.w	r1, [r2, #2076]	; 0x81c
   0x0007dd12 <+14>:	70 b5	push	{r4, r5, r6, lr}
   0x0007dd14 <+16>:	00 29	cmp	r1, #0
   0x0007dd16 <+18>:	4f f0 01 04	mov.w	r4, #1
   0x0007dd1a <+22>:	c2 f8 0c 48	str.w	r4, [r2, #2060]	; 0x80c
   0x0007dd1e <+26>:	28 dd	ble.n	0x7dd72 <del_termcode+110>
   0x0007dd20 <+28>:	05 78	ldrb	r5, [r0, #0]
   0x0007dd22 <+30>:	00 24	movs	r4, #0
   0x0007dd24 <+32>:	03 e0	b.n	0x7dd2e <del_termcode+42>
   0x0007dd26 <+34>:	01 34	adds	r4, #1
   0x0007dd28 <+36>:	10 33	adds	r3, #16
   0x0007dd2a <+38>:	8c 42	cmp	r4, r1
   0x0007dd2c <+40>:	21 d0	beq.n	0x7dd72 <del_termcode+110>
   0x0007dd2e <+42>:	1a 78	ldrb	r2, [r3, #0]
   0x0007dd30 <+44>:	aa 42	cmp	r2, r5
   0x0007dd32 <+46>:	f8 d1	bne.n	0x7dd26 <del_termcode+34>
   0x0007dd34 <+48>:	5e 78	ldrb	r6, [r3, #1]
   0x0007dd36 <+50>:	42 78	ldrb	r2, [r0, #1]
   0x0007dd38 <+52>:	96 42	cmp	r6, r2
   0x0007dd3a <+54>:	f4 d1	bne.n	0x7dd26 <del_termcode+34>
   0x0007dd3c <+56>:	58 68	ldr	r0, [r3, #4]
   0x0007dd3e <+58>:	bf f7 31 fb	bl	0x3d3a4 <vim_free>
   0x0007dd42 <+62>:	0e 4b	ldr	r3, [pc, #56]	; (0x7dd7c <del_termcode+120>)
   0x0007dd44 <+64>:	7b 44	add	r3, pc
   0x0007dd46 <+66>:	d3 f8 1c 58	ldr.w	r5, [r3, #2076]	; 0x81c
   0x0007dd4a <+70>:	6a 1e	subs	r2, r5, #1
   0x0007dd4c <+72>:	c3 f8 1c 28	str.w	r2, [r3, #2076]	; 0x81c
   0x0007dd50 <+76>:	a2 42	cmp	r2, r4
   0x0007dd52 <+78>:	0e dd	ble.n	0x7dd72 <del_termcode+110>
   0x0007dd54 <+80>:	d3 f8 20 38	ldr.w	r3, [r3, #2080]	; 0x820
   0x0007dd58 <+84>:	01 34	adds	r4, #1
   0x0007dd5a <+86>:	03 eb 05 15	add.w	r5, r3, r5, lsl #4
   0x0007dd5e <+90>:	03 eb 04 14	add.w	r4, r3, r4, lsl #4
   0x0007dd62 <+94>:	94 e8 0f 00	ldmia.w	r4, {r0, r1, r2, r3}
   0x0007dd66 <+98>:	04 e9 0f 00	stmdb	r4, {r0, r1, r2, r3}
   0x0007dd6a <+102>:	10 34	adds	r4, #16
   0x0007dd6c <+104>:	ac 42	cmp	r4, r5
   0x0007dd6e <+106>:	f8 d1	bne.n	0x7dd62 <del_termcode+94>
   0x0007dd70 <+108>:	70 bd	pop	{r4, r5, r6, pc}
   0x0007dd72 <+110>:	70 bd	pop	{r4, r5, r6, pc}
   0x0007dd74 <+112>:	70 47	bx	lr
   0x0007dd76 <+114>:	00 bf	nop
   0x0007dd78 <+116>:	22 2a	cmp	r2, #34	; 0x22
   0x0007dd7a <+118>:	03 00	movs	r3, r0
   0x0007dd7c <+120>:	e4 29	cmp	r1, #228	; 0xe4
   0x0007dd7e <+122>:	03 00	movs	r3, r0
End of assembler dump.
Dump of assembler code for function find_term_bykeys:
   0x0007f034 <+0>:	2d e9 f0 41	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   0x0007f038 <+4>:	80 46	mov	r8, r0
   0x0007f03a <+6>:	8e f7 4c e8	blx	0xd0d4 <strlen@plt>
   0x0007f03e <+10>:	10 4b	ldr	r3, [pc, #64]	; (0x7f080 <find_term_bykeys+76>)
   0x0007f040 <+12>:	7b 44	add	r3, pc
   0x0007f042 <+14>:	d3 f8 1c 78	ldr.w	r7, [r3, #2076]	; 0x81c
   0x0007f046 <+18>:	00 2f	cmp	r7, #0
   0x0007f048 <+20>:	15 dd	ble.n	0x7f076 <find_term_bykeys+66>
   0x0007f04a <+22>:	06 46	mov	r6, r0
   0x0007f04c <+24>:	d3 f8 20 48	ldr.w	r4, [r3, #2080]	; 0x820
   0x0007f050 <+28>:	00 25	movs	r5, #0
   0x0007f052 <+30>:	03 e0	b.n	0x7f05c <find_term_bykeys+40>
   0x0007f054 <+32>:	01 35	adds	r5, #1
   0x0007f056 <+34>:	10 34	adds	r4, #16
   0x0007f058 <+36>:	bd 42	cmp	r5, r7
   0x0007f05a <+38>:	0c d0	beq.n	0x7f076 <find_term_bykeys+66>
   0x0007f05c <+40>:	a3 68	ldr	r3, [r4, #8]
   0x0007f05e <+42>:	9e 42	cmp	r6, r3
   0x0007f060 <+44>:	f8 d1	bne.n	0x7f054 <find_term_bykeys+32>
   0x0007f062 <+46>:	32 46	mov	r2, r6
   0x0007f064 <+48>:	41 46	mov	r1, r8
   0x0007f066 <+50>:	60 68	ldr	r0, [r4, #4]
   0x0007f068 <+52>:	8e f7 5a e9	blx	0xd320 <strncmp@plt+4>
   0x0007f06c <+56>:	00 28	cmp	r0, #0
   0x0007f06e <+58>:	f1 d1	bne.n	0x7f054 <find_term_bykeys+32>
   0x0007f070 <+60>:	28 46	mov	r0, r5
   0x0007f072 <+62>:	bd e8 f0 81	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   0x0007f076 <+66>:	4f f0 ff 30	mov.w	r0, #4294967295
   0x0007f07a <+70>:	bd e8 f0 81	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   0x0007f07e <+74>:	00 bf	nop
   0x0007f080 <+76>:	e8 16	asrs	r0, r5, #27
   0x0007f082 <+78>:	03 00	movs	r3, r0
End of assembler dump.
Dump of assembler code for function find_termcode:
   0x0007dcc4 <+0>:	0e 4b	ldr	r3, [pc, #56]	; (0x7dd00 <find_termcode+60>)
   0x0007dcc6 <+2>:	70 b4	push	{r4, r5, r6}
   0x0007dcc8 <+4>:	7b 44	add	r3, pc
   0x0007dcca <+6>:	d3 f8 1c 48	ldr.w	r4, [r3, #2076]	; 0x81c
   0x0007dcce <+10>:	00 2c	cmp	r4, #0
   0x0007dcd0 <+12>:	13 dd	ble.n	0x7dcfa <find_termcode+54>
   0x0007dcd2 <+14>:	d3 f8 20 38	ldr.w	r3, [r3, #2080]	; 0x820
   0x0007dcd6 <+18>:	00 22	movs	r2, #0
   0x0007dcd8 <+20>:	05 78	ldrb	r5, [r0, #0]
   0x0007dcda <+22>:	03 e0	b.n	0x7dce4 <find_termcode+32>
   0x0007dcdc <+24>:	a2 42	cmp	r2, r4
   0x0007dcde <+26>:	03 f1 10 03	add.w	r3, r3, #16
   0x0007dce2 <+30>:	0a d0	beq.n	0x7dcfa <find_termcode+54>
   0x0007dce4 <+32>:	19 78	ldrb	r1, [r3, #0]
   0x0007dce6 <+34>:	01 32	adds	r2, #1
   0x0007dce8 <+36>:	a9 42	cmp	r1, r5
   0x0007dcea <+38>:	f7 d1	bne.n	0x7dcdc <find_termcode+24>
   0x0007dcec <+40>:	5e 78	ldrb	r6, [r3, #1]
   0x0007dcee <+42>:	41 78	ldrb	r1, [r0, #1]
   0x0007dcf0 <+44>:	8e 42	cmp	r6, r1
   0x0007dcf2 <+46>:	f3 d1	bne.n	0x7dcdc <find_termcode+24>
   0x0007dcf4 <+48>:	58 68	ldr	r0, [r3, #4]
   0x0007dcf6 <+50>:	70 bc	pop	{r4, r5, r6}
   0x0007dcf8 <+52>:	70 47	bx	lr
   0x0007dcfa <+54>:	00 20	movs	r0, #0
   0x0007dcfc <+56>:	70 bc	pop	{r4, r5, r6}
   0x0007dcfe <+58>:	70 47	bx	lr
   0x0007dd00 <+60>:	60 2a	cmp	r2, #96	; 0x60
   0x0007dd02 <+62>:	03 00	movs	r3, r0
End of assembler dump.
Dump of assembler code for function getlinecol:
   0x0007d0a8 <+0>:	18 4b	ldr	r3, [pc, #96]	; (0x7d10c <getlinecol+100>)
   0x0007d0aa <+2>:	70 b5	push	{r4, r5, r6, lr}
   0x0007d0ac <+4>:	06 46	mov	r6, r0
   0x0007d0ae <+6>:	18 48	ldr	r0, [pc, #96]	; (0x7d110 <getlinecol+104>)
   0x0007d0b0 <+8>:	7b 44	add	r3, pc
   0x0007d0b2 <+10>:	0d 46	mov	r5, r1
   0x0007d0b4 <+12>:	17 4a	ldr	r2, [pc, #92]	; (0x7d114 <getlinecol+108>)
   0x0007d0b6 <+14>:	ad f6 08 0d	subw	sp, sp, #2056	; 0x808
   0x0007d0ba <+18>:	1c 58	ldr	r4, [r3, r0]
   0x0007d0bc <+20>:	21 68	ldr	r1, [r4, #0]
   0x0007d0be <+22>:	cd f8 04 18	str.w	r1, [sp, #2052]	; 0x804
   0x0007d0c2 <+26>:	9b 58	ldr	r3, [r3, r2]
   0x0007d0c4 <+28>:	19 68	ldr	r1, [r3, #0]
   0x0007d0c6 <+30>:	09 b1	cbz	r1, 0x7d0cc <getlinecol+36>
   0x0007d0c8 <+32>:	0b 78	ldrb	r3, [r1, #0]
   0x0007d0ca <+34>:	3b b9	cbnz	r3, 0x7d0dc <getlinecol+52>
   0x0007d0cc <+36>:	dd f8 04 28	ldr.w	r2, [sp, #2052]	; 0x804
   0x0007d0d0 <+40>:	23 68	ldr	r3, [r4, #0]
   0x0007d0d2 <+42>:	9a 42	cmp	r2, r3
   0x0007d0d4 <+44>:	18 d1	bne.n	0x7d108 <getlinecol+96>
   0x0007d0d6 <+46>:	0d f6 08 0d	addw	sp, sp, #2056	; 0x808
   0x0007d0da <+50>:	70 bd	pop	{r4, r5, r6, pc}
   0x0007d0dc <+52>:	01 a8	add	r0, sp, #4
   0x0007d0de <+54>:	ff f7 73 ff	bl	0x7cfc8 <tgetent_error>
   0x0007d0e2 <+58>:	00 28	cmp	r0, #0
   0x0007d0e4 <+60>:	f2 d1	bne.n	0x7d0cc <getlinecol+36>
   0x0007d0e6 <+62>:	33 68	ldr	r3, [r6, #0]
   0x0007d0e8 <+64>:	43 b1	cbz	r3, 0x7d0fc <getlinecol+84>
   0x0007d0ea <+66>:	2b 68	ldr	r3, [r5, #0]
   0x0007d0ec <+68>:	00 2b	cmp	r3, #0
   0x0007d0ee <+70>:	ed d1	bne.n	0x7d0cc <getlinecol+36>
   0x0007d0f0 <+72>:	09 48	ldr	r0, [pc, #36]	; (0x7d118 <getlinecol+112>)
   0x0007d0f2 <+74>:	78 44	add	r0, pc
   0x0007d0f4 <+76>:	8f f7 64 ef	blx	0xcfc0 <tgetnum@plt>
   0x0007d0f8 <+80>:	28 60	str	r0, [r5, #0]
   0x0007d0fa <+82>:	e7 e7	b.n	0x7d0cc <getlinecol+36>
   0x0007d0fc <+84>:	07 48	ldr	r0, [pc, #28]	; (0x7d11c <getlinecol+116>)
   0x0007d0fe <+86>:	78 44	add	r0, pc
   0x0007d100 <+88>:	8f f7 5e ef	blx	0xcfc0 <tgetnum@plt>
   0x0007d104 <+92>:	30 60	str	r0, [r6, #0]
   0x0007d106 <+94>:	f0 e7	b.n	0x7d0ea <getlinecol+66>
   0x0007d108 <+96>:	8f f7 aa ee	blx	0xce60 <__stack_chk_fail@plt>
   0x0007d10c <+100>:	e8 a5	add	r5, pc, #928	; (adr r5, 0x7d4b0 <term_set_winpos+16>)
   0x0007d10e <+102>:	02 00	movs	r2, r0
   0x0007d110 <+104>:	78 03	lsls	r0, r7, #13
   0x0007d112 <+106>:	00 00	movs	r0, r0
   0x0007d114 <+108>:	b4 03	lsls	r4, r6, #14
   0x0007d116 <+110>:	00 00	movs	r0, r0
   0x0007d118 <+112>:	c6 37	adds	r7, #198	; 0xc6
   0x0007d11a <+114>:	01 00	movs	r1, r0
   0x0007d11c <+116>:	12 05	lsls	r2, r2, #20
   0x0007d11e <+118>:	01 00	movs	r1, r0
End of assembler dump.
Dump of assembler code for function limit_screen_size:
   0x0007d764 <+0>:	0c 4b	ldr	r3, [pc, #48]	; (0x7d798 <limit_screen_size+52>)
   0x0007d766 <+2>:	0d 4a	ldr	r2, [pc, #52]	; (0x7d79c <limit_screen_size+56>)
   0x0007d768 <+4>:	7b 44	add	r3, pc
   0x0007d76a <+6>:	9a 58	ldr	r2, [r3, r2]
   0x0007d76c <+8>:	11 68	ldr	r1, [r2, #0]
   0x0007d76e <+10>:	0b 29	cmp	r1, #11
   0x0007d770 <+12>:	dc bf	itt	le
   0x0007d772 <+14>:	0c 21	movle	r1, #12
   0x0007d774 <+16>:	11 60	strle	r1, [r2, #0]
   0x0007d776 <+18>:	04 dd	ble.n	0x7d782 <limit_screen_size+30>
   0x0007d778 <+20>:	42 f2 10 70	movw	r0, #10000	; 0x2710
   0x0007d77c <+24>:	81 42	cmp	r1, r0
   0x0007d77e <+26>:	c8 bf	it	gt
   0x0007d780 <+28>:	10 60	strgt	r0, [r2, #0]
   0x0007d782 <+30>:	07 4a	ldr	r2, [pc, #28]	; (0x7d7a0 <limit_screen_size+60>)
   0x0007d784 <+32>:	9b 58	ldr	r3, [r3, r2]
   0x0007d786 <+34>:	1a 68	ldr	r2, [r3, #0]
   0x0007d788 <+36>:	b2 f5 7a 7f	cmp.w	r2, #1000	; 0x3e8
   0x0007d78c <+40>:	c4 bf	itt	gt
   0x0007d78e <+42>:	4f f4 7a 72	movgt.w	r2, #1000	; 0x3e8
   0x0007d792 <+46>:	1a 60	strgt	r2, [r3, #0]
   0x0007d794 <+48>:	70 47	bx	lr
   0x0007d796 <+50>:	00 bf	nop
   0x0007d798 <+52>:	30 9f	ldr	r7, [sp, #192]	; 0xc0
   0x0007d79a <+54>:	02 00	movs	r2, r0
   0x0007d79c <+56>:	fc 07	lsls	r4, r7, #31
   0x0007d79e <+58>:	00 00	movs	r0, r0
   0x0007d7a0 <+60>:	c8 08	lsrs	r0, r1, #3
   0x0007d7a2 <+62>:	00 00	movs	r0, r0
End of assembler dump.
Dump of assembler code for function out_char:
   0x0007d194 <+0>:	38 b5	push	{r3, r4, r5, lr}
   0x0007d196 <+2>:	0a 28	cmp	r0, #10
   0x0007d198 <+4>:	11 4d	ldr	r5, [pc, #68]	; (0x7d1e0 <out_char+76>)
   0x0007d19a <+6>:	04 46	mov	r4, r0
   0x0007d19c <+8>:	7d 44	add	r5, pc
   0x0007d19e <+10>:	1b d0	beq.n	0x7d1d8 <out_char+68>
   0x0007d1a0 <+12>:	10 4b	ldr	r3, [pc, #64]	; (0x7d1e4 <out_char+80>)
   0x0007d1a2 <+14>:	40 f2 fe 72	movw	r2, #2046	; 0x7fe
   0x0007d1a6 <+18>:	7b 44	add	r3, pc
   0x0007d1a8 <+20>:	19 68	ldr	r1, [r3, #0]
   0x0007d1aa <+22>:	58 18	adds	r0, r3, r1
   0x0007d1ac <+24>:	01 31	adds	r1, #1
   0x0007d1ae <+26>:	91 42	cmp	r1, r2
   0x0007d1b0 <+28>:	19 60	str	r1, [r3, #0]
   0x0007d1b2 <+30>:	04 71	strb	r4, [r0, #4]
   0x0007d1b4 <+32>:	08 dd	ble.n	0x7d1c8 <out_char+52>
   0x0007d1b6 <+34>:	0c 48	ldr	r0, [pc, #48]	; (0x7d1e8 <out_char+84>)
   0x0007d1b8 <+36>:	00 23	movs	r3, #0
   0x0007d1ba <+38>:	78 44	add	r0, pc
   0x0007d1bc <+40>:	40 f8 04 3b	str.w	r3, [r0], #4
   0x0007d1c0 <+44>:	bd e8 38 40	ldmia.w	sp!, {r3, r4, r5, lr}
   0x0007d1c4 <+48>:	02 f0 a0 b9	b.w	0x7f508 <ui_write>
   0x0007d1c8 <+52>:	08 4b	ldr	r3, [pc, #32]	; (0x7d1ec <out_char+88>)
   0x0007d1ca <+54>:	eb 58	ldr	r3, [r5, r3]
   0x0007d1cc <+56>:	1b 68	ldr	r3, [r3, #0]
   0x0007d1ce <+58>:	00 2b	cmp	r3, #0
   0x0007d1d0 <+60>:	18 bf	it	ne
   0x0007d1d2 <+62>:	00 29	cmpne	r1, #0
   0x0007d1d4 <+64>:	ef d1	bne.n	0x7d1b6 <out_char+34>
   0x0007d1d6 <+66>:	38 bd	pop	{r3, r4, r5, pc}
   0x0007d1d8 <+68>:	0d 20	movs	r0, #13
   0x0007d1da <+70>:	ff f7 db ff	bl	0x7d194 <out_char>
   0x0007d1de <+74>:	df e7	b.n	0x7d1a0 <out_char+12>
   0x0007d1e0 <+76>:	fc a4	add	r4, pc, #1008	; (adr r4, 0x7d5d4 <ttest+108>)
   0x0007d1e2 <+78>:	02 00	movs	r2, r0
   0x0007d1e4 <+80>:	82 35	adds	r5, #130	; 0x82
   0x0007d1e6 <+82>:	03 00	movs	r3, r0
   0x0007d1e8 <+84>:	6e 35	adds	r5, #110	; 0x6e
   0x0007d1ea <+86>:	03 00	movs	r3, r0
   0x0007d1ec <+88>:	48 06	lsls	r0, r1, #25
   0x0007d1ee <+90>:	00 00	movs	r0, r0
End of assembler dump.
