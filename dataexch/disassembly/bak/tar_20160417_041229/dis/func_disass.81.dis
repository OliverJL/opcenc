GNU gdb (Ubuntu 7.10-1ubuntu2) 7.10
Copyright (C) 2015 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "arm-linux-gnueabihf".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /bin/tar...Reading symbols from /usr/lib/debug//bin/tar...done.
done.
Dump of assembler code for function mtime_coder:
   0x00015450 <+0>:	70 b5	push	{r4, r5, r6, lr}
   0x00015452 <+2>:	45 f2 70 74	movw	r4, #22384	; 0x5770
   0x00015456 <+6>:	c0 f2 04 04	movt	r4, #4
   0x0001545a <+10>:	0d 46	mov	r5, r1
   0x0001545c <+12>:	8c b0	sub	sp, #48	; 0x30
   0x0001545e <+14>:	16 46	mov	r6, r2
   0x00015460 <+16>:	21 68	ldr	r1, [r4, #0]
   0x00015462 <+18>:	0b 91	str	r1, [sp, #44]	; 0x2c
   0x00015464 <+20>:	a3 b1	cbz	r3, 0x15490 <mtime_coder+64>
   0x00015466 <+22>:	93 e8 06 00	ldmia.w	r3, {r1, r2}
   0x0001546a <+26>:	01 ab	add	r3, sp, #4
   0x0001546c <+28>:	02 92	str	r2, [sp, #8]
   0x0001546e <+30>:	01 91	str	r1, [sp, #4]
   0x00015470 <+32>:	03 aa	add	r2, sp, #12
   0x00015472 <+34>:	93 e8 03 00	ldmia.w	r3, {r0, r1}
   0x00015476 <+38>:	05 f0 d9 fd	bl	0x1b02c <code_timespec>
   0x0001547a <+42>:	29 46	mov	r1, r5
   0x0001547c <+44>:	02 46	mov	r2, r0
   0x0001547e <+46>:	30 46	mov	r0, r6
   0x00015480 <+48>:	ff f7 b0 ff	bl	0x153e4 <xheader_print>
   0x00015484 <+52>:	0b 9a	ldr	r2, [sp, #44]	; 0x2c
   0x00015486 <+54>:	23 68	ldr	r3, [r4, #0]
   0x00015488 <+56>:	9a 42	cmp	r2, r3
   0x0001548a <+58>:	06 d1	bne.n	0x1549a <mtime_coder+74>
   0x0001548c <+60>:	0c b0	add	sp, #48	; 0x30
   0x0001548e <+62>:	70 bd	pop	{r4, r5, r6, pc}
   0x00015490 <+64>:	d0 f8 a0 10	ldr.w	r1, [r0, #160]	; 0xa0
   0x00015494 <+68>:	d0 f8 a4 20	ldr.w	r2, [r0, #164]	; 0xa4
   0x00015498 <+72>:	e7 e7	b.n	0x1546a <mtime_coder+26>
   0x0001549a <+74>:	f5 f7 c4 eb	blx	0xac24 <__stack_chk_fail@plt>
End of assembler dump.
Dump of assembler code for function mtime_decoder:
   0x00015584 <+0>:	30 b5	push	{r4, r5, lr}
   0x00015586 <+2>:	83 b0	sub	sp, #12
   0x00015588 <+4>:	0b 46	mov	r3, r1
   0x0001558a <+6>:	05 46	mov	r5, r0
   0x0001558c <+8>:	11 46	mov	r1, r2
   0x0001558e <+10>:	68 46	mov	r0, sp
   0x00015590 <+12>:	1a 46	mov	r2, r3
   0x00015592 <+14>:	ff f7 b1 ff	bl	0x154f8 <decode_time>
   0x00015596 <+18>:	28 b1	cbz	r0, 0x155a4 <mtime_decoder+32>
   0x00015598 <+20>:	9d e8 03 00	ldmia.w	sp, {r0, r1}
   0x0001559c <+24>:	05 f1 a0 03	add.w	r3, r5, #160	; 0xa0
   0x000155a0 <+28>:	83 e8 03 00	stmia.w	r3, {r0, r1}
   0x000155a4 <+32>:	03 b0	add	sp, #12
   0x000155a6 <+34>:	30 bd	pop	{r4, r5, pc}
End of assembler dump.
Dump of assembler code for function out_of_range_header:
   0x00014e70 <+0>:	2d e9 f0 4d	stmdb	sp!, {r4, r5, r6, r7, r8, r10, r11, lr}
   0x00014e74 <+4>:	45 f2 70 76	movw	r6, #22384	; 0x5770
   0x00014e78 <+8>:	c0 f2 04 06	movt	r6, #4
   0x00014e7c <+12>:	92 b0	sub	sp, #72	; 0x48
   0x00014e7e <+14>:	80 46	mov	r8, r0
   0x00014e80 <+16>:	0f 46	mov	r7, r1
   0x00014e82 <+18>:	34 68	ldr	r4, [r6, #0]
   0x00014e84 <+20>:	19 46	mov	r1, r3
   0x00014e86 <+22>:	10 46	mov	r0, r2
   0x00014e88 <+24>:	05 aa	add	r2, sp, #20
   0x00014e8a <+26>:	dd e9 1a ab	ldrd	r10, r11, [sp, #104]	; 0x68
   0x00014e8e <+30>:	11 94	str	r4, [sp, #68]	; 0x44
   0x00014e90 <+32>:	16 f0 32 ff	bl	0x2bcf8 <imaxtostr>
   0x00014e94 <+36>:	0b aa	add	r2, sp, #44	; 0x2c
   0x00014e96 <+38>:	59 46	mov	r1, r11
   0x00014e98 <+40>:	05 46	mov	r5, r0
   0x00014e9a <+42>:	50 46	mov	r0, r10
   0x00014e9c <+44>:	16 f0 a8 ff	bl	0x2bdf0 <umaxtostr>
   0x00014ea0 <+48>:	05 22	movs	r2, #5
   0x00014ea2 <+50>:	43 f6 6c 71	movw	r1, #16236	; 0x3f6c
   0x00014ea6 <+54>:	c0 f2 03 01	movt	r1, #3
   0x00014eaa <+58>:	04 46	mov	r4, r0
   0x00014eac <+60>:	00 20	movs	r0, #0
   0x00014eae <+62>:	f5 f7 b4 ee	blx	0xac18 <dcgettext@plt>
   0x00014eb2 <+66>:	43 46	mov	r3, r8
   0x00014eb4 <+68>:	00 97	str	r7, [sp, #0]
   0x00014eb6 <+70>:	01 95	str	r5, [sp, #4]
   0x00014eb8 <+72>:	02 94	str	r4, [sp, #8]
   0x00014eba <+74>:	02 46	mov	r2, r0
   0x00014ebc <+76>:	00 20	movs	r0, #0
   0x00014ebe <+78>:	01 46	mov	r1, r0
   0x00014ec0 <+80>:	f5 f7 7e ef	blx	0xadc0 <error@plt+4>
   0x00014ec4 <+84>:	11 99	ldr	r1, [sp, #68]	; 0x44
   0x00014ec6 <+86>:	32 68	ldr	r2, [r6, #0]
   0x00014ec8 <+88>:	45 f6 ac 63	movw	r3, #24236	; 0x5eac
   0x00014ecc <+92>:	c0 f2 04 03	movt	r3, #4
   0x00014ed0 <+96>:	02 20	movs	r0, #2
   0x00014ed2 <+98>:	91 42	cmp	r1, r2
   0x00014ed4 <+100>:	18 60	str	r0, [r3, #0]
   0x00014ed6 <+102>:	02 d1	bne.n	0x14ede <out_of_range_header+110>
   0x00014ed8 <+104>:	12 b0	add	sp, #72	; 0x48
   0x00014eda <+106>:	bd e8 f0 8d	ldmia.w	sp!, {r4, r5, r6, r7, r8, r10, r11, pc}
   0x00014ede <+110>:	f5 f7 a2 ee	blx	0xac24 <__stack_chk_fail@plt>
End of assembler dump.
Dump of assembler code for function path_coder:
   0x00015444 <+0>:	40 68	ldr	r0, [r0, #4]
   0x00015446 <+2>:	db e7	b.n	0x15400 <code_string>
End of assembler dump.
Dump of assembler code for function path_decoder:
   0x00015020 <+0>:	38 b5	push	{r3, r4, r5, lr}
   0x00015022 <+2>:	11 46	mov	r1, r2
   0x00015024 <+4>:	15 46	mov	r5, r2
   0x00015026 <+6>:	04 46	mov	r4, r0
   0x00015028 <+8>:	ff f7 60 fe	bl	0x14cec <decode_string>
   0x0001502c <+12>:	29 46	mov	r1, r5
   0x0001502e <+14>:	20 1d	adds	r0, r4, #4
   0x00015030 <+16>:	ff f7 5c fe	bl	0x14cec <decode_string>
   0x00015034 <+20>:	60 68	ldr	r0, [r4, #4]
   0x00015036 <+22>:	15 f0 15 f9	bl	0x2a264 <strip_trailing_slashes>
   0x0001503a <+26>:	20 72	strb	r0, [r4, #8]
   0x0001503c <+28>:	38 bd	pop	{r3, r4, r5, pc}
End of assembler dump.
Dump of assembler code for function run_override_list:
   0x00014e08 <+0>:	f8 b5	push	{r3, r4, r5, r6, r7, lr}
   0x00014e0a <+2>:	0f 46	mov	r7, r1
   0x00014e0c <+4>:	04 46	mov	r4, r0
   0x00014e0e <+6>:	88 b1	cbz	r0, 0x14e34 <run_override_list+44>
   0x00014e10 <+8>:	60 68	ldr	r0, [r4, #4]
   0x00014e12 <+10>:	ff f7 d5 ff	bl	0x14dc0 <locate_handler>
   0x00014e16 <+14>:	05 46	mov	r5, r0
   0x00014e18 <+16>:	48 b1	cbz	r0, 0x14e2e <run_override_list+38>
   0x00014e1a <+18>:	a6 68	ldr	r6, [r4, #8]
   0x00014e1c <+20>:	30 46	mov	r0, r6
   0x00014e1e <+22>:	f6 f7 80 e8	blx	0xaf20 <strlen@plt+4>
   0x00014e22 <+26>:	32 46	mov	r2, r6
   0x00014e24 <+28>:	29 68	ldr	r1, [r5, #0]
   0x00014e26 <+30>:	ae 68	ldr	r6, [r5, #8]
   0x00014e28 <+32>:	03 46	mov	r3, r0
   0x00014e2a <+34>:	38 46	mov	r0, r7
   0x00014e2c <+36>:	b0 47	blx	r6
   0x00014e2e <+38>:	24 68	ldr	r4, [r4, #0]
   0x00014e30 <+40>:	00 2c	cmp	r4, #0
   0x00014e32 <+42>:	ed d1	bne.n	0x14e10 <run_override_list+8>
   0x00014e34 <+44>:	f8 bd	pop	{r3, r4, r5, r6, r7, pc}
End of assembler dump.
Dump of assembler code for function size_coder:
   0x000159a4 <+0>:	f0 b5	push	{r4, r5, r6, r7, lr}
   0x000159a6 <+2>:	85 b0	sub	sp, #20
   0x000159a8 <+4>:	d0 e9 18 67	ldrd	r6, r7, [r0, #96]	; 0x60
   0x000159ac <+8>:	0b 46	mov	r3, r1
   0x000159ae <+10>:	02 92	str	r2, [sp, #8]
   0x000159b0 <+12>:	4f f0 ff 34	mov.w	r4, #4294967295
   0x000159b4 <+16>:	4f f0 ff 35	mov.w	r5, #4294967295
   0x000159b8 <+20>:	1a 46	mov	r2, r3
   0x000159ba <+22>:	30 46	mov	r0, r6
   0x000159bc <+24>:	39 46	mov	r1, r7
   0x000159be <+26>:	cd e9 00 45	strd	r4, r5, [sp]
   0x000159c2 <+30>:	ff f7 97 ff	bl	0x158f4 <code_signed_num>
   0x000159c6 <+34>:	05 b0	add	sp, #20
   0x000159c8 <+36>:	f0 bd	pop	{r4, r5, r6, r7, pc}
End of assembler dump.
Dump of assembler code for function size_decoder:
   0x00015898 <+0>:	10 b5	push	{r4, lr}
   0x0001589a <+2>:	84 b0	sub	sp, #16
   0x0001589c <+4>:	04 46	mov	r4, r0
   0x0001589e <+6>:	6f f0 00 43	mvn.w	r3, #2147483648	; 0x80000000
   0x000158a2 <+10>:	00 91	str	r1, [sp, #0]
   0x000158a4 <+12>:	02 a8	add	r0, sp, #8
   0x000158a6 <+14>:	11 46	mov	r1, r2
   0x000158a8 <+16>:	4f f0 ff 32	mov.w	r2, #4294967295
   0x000158ac <+20>:	ff f7 0a ff	bl	0x156c4 <decode_num>
   0x000158b0 <+24>:	18 b1	cbz	r0, 0x158ba <size_decoder+34>
   0x000158b2 <+26>:	dd e9 02 23	ldrd	r2, r3, [sp, #8]
   0x000158b6 <+30>:	c4 e9 18 23	strd	r2, r3, [r4, #96]	; 0x60
   0x000158ba <+34>:	04 b0	add	sp, #16
   0x000158bc <+36>:	10 bd	pop	{r4, pc}
End of assembler dump.
Dump of assembler code for function sparse_major_coder:
   0x000159cc <+0>:	30 b5	push	{r4, r5, lr}
   0x000159ce <+2>:	85 b0	sub	sp, #20
   0x000159d0 <+4>:	d0 f8 bc 00	ldr.w	r0, [r0, #188]	; 0xbc
   0x000159d4 <+8>:	4f f0 ff 34	mov.w	r4, #4294967295
   0x000159d8 <+12>:	02 92	str	r2, [sp, #8]
   0x000159da <+14>:	4f f0 ff 35	mov.w	r5, #4294967295
   0x000159de <+18>:	0a 46	mov	r2, r1
   0x000159e0 <+20>:	cd e9 00 45	strd	r4, r5, [sp]
   0x000159e4 <+24>:	00 21	movs	r1, #0
   0x000159e6 <+26>:	ff f7 85 ff	bl	0x158f4 <code_signed_num>
   0x000159ea <+30>:	05 b0	add	sp, #20
   0x000159ec <+32>:	30 bd	pop	{r4, r5, pc}
End of assembler dump.
