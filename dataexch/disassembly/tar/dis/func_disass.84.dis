GNU gdb (Ubuntu 7.10-1ubuntu2) 7.10
Copyright (C) 2015 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "arm-linux-gnueabihf".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /bin/tar...Reading symbols from /usr/lib/debug//bin/tar...done.
done.
Dump of assembler code for function volume_label_decoder:
   0x00014d2c <+0>:	46 f2 74 00	movw	r0, #24692	; 0x6074
   0x00014d30 <+4>:	11 46	mov	r1, r2
   0x00014d32 <+6>:	c0 f2 04 00	movt	r0, #4
   0x00014d36 <+10>:	d9 e7	b.n	0x14cec <decode_string>
End of assembler dump.
Dump of assembler code for function volume_offset_coder:
   0x00015ab4 <+0>:	f0 b5	push	{r4, r5, r6, r7, lr}
   0x00015ab6 <+2>:	85 b0	sub	sp, #20
   0x00015ab8 <+4>:	d3 e9 00 67	ldrd	r6, r7, [r3]
   0x00015abc <+8>:	4f f0 ff 34	mov.w	r4, #4294967295
   0x00015ac0 <+12>:	02 92	str	r2, [sp, #8]
   0x00015ac2 <+14>:	4f f0 ff 35	mov.w	r5, #4294967295
   0x00015ac6 <+18>:	0a 46	mov	r2, r1
   0x00015ac8 <+20>:	cd e9 00 45	strd	r4, r5, [sp]
   0x00015acc <+24>:	30 46	mov	r0, r6
   0x00015ace <+26>:	39 46	mov	r1, r7
   0x00015ad0 <+28>:	ff f7 10 ff	bl	0x158f4 <code_signed_num>
   0x00015ad4 <+32>:	05 b0	add	sp, #20
   0x00015ad6 <+34>:	f0 bd	pop	{r4, r5, r6, r7, pc}
End of assembler dump.
Dump of assembler code for function volume_offset_decoder:
   0x000156e4 <+0>:	00 b5	push	{lr}
   0x000156e6 <+2>:	85 b0	sub	sp, #20
   0x000156e8 <+4>:	02 a8	add	r0, sp, #8
   0x000156ea <+6>:	4f f0 ff 33	mov.w	r3, #4294967295
   0x000156ee <+10>:	00 91	str	r1, [sp, #0]
   0x000156f0 <+12>:	11 46	mov	r1, r2
   0x000156f2 <+14>:	4f f0 ff 32	mov.w	r2, #4294967295
   0x000156f6 <+18>:	ff f7 e5 ff	bl	0x156c4 <decode_num>
   0x000156fa <+22>:	38 b1	cbz	r0, 0x1570c <volume_offset_decoder+40>
   0x000156fc <+24>:	dd e9 02 23	ldrd	r2, r3, [sp, #8]
   0x00015700 <+28>:	46 f2 98 01	movw	r1, #24728	; 0x6098
   0x00015704 <+32>:	c0 f2 04 01	movt	r1, #4
   0x00015708 <+36>:	c1 e9 00 23	strd	r2, r3, [r1]
   0x0001570c <+40>:	05 b0	add	sp, #20
   0x0001570e <+42>:	5d f8 04 fb	ldr.w	pc, [sp], #4
End of assembler dump.
Dump of assembler code for function volume_size_coder:
   0x00015a90 <+0>:	f0 b5	push	{r4, r5, r6, r7, lr}
   0x00015a92 <+2>:	85 b0	sub	sp, #20
   0x00015a94 <+4>:	d3 e9 00 67	ldrd	r6, r7, [r3]
   0x00015a98 <+8>:	4f f0 ff 34	mov.w	r4, #4294967295
   0x00015a9c <+12>:	02 92	str	r2, [sp, #8]
   0x00015a9e <+14>:	4f f0 ff 35	mov.w	r5, #4294967295
   0x00015aa2 <+18>:	0a 46	mov	r2, r1
   0x00015aa4 <+20>:	cd e9 00 45	strd	r4, r5, [sp]
   0x00015aa8 <+24>:	30 46	mov	r0, r6
   0x00015aaa <+26>:	39 46	mov	r1, r7
   0x00015aac <+28>:	ff f7 22 ff	bl	0x158f4 <code_signed_num>
   0x00015ab0 <+32>:	05 b0	add	sp, #20
   0x00015ab2 <+34>:	f0 bd	pop	{r4, r5, r6, r7, pc}
End of assembler dump.
Dump of assembler code for function volume_size_decoder:
   0x00015714 <+0>:	00 b5	push	{lr}
   0x00015716 <+2>:	85 b0	sub	sp, #20
   0x00015718 <+4>:	02 a8	add	r0, sp, #8
   0x0001571a <+6>:	4f f0 ff 33	mov.w	r3, #4294967295
   0x0001571e <+10>:	00 91	str	r1, [sp, #0]
   0x00015720 <+12>:	11 46	mov	r1, r2
   0x00015722 <+14>:	4f f0 ff 32	mov.w	r2, #4294967295
   0x00015726 <+18>:	ff f7 cd ff	bl	0x156c4 <decode_num>
   0x0001572a <+22>:	38 b1	cbz	r0, 0x1573c <volume_size_decoder+40>
   0x0001572c <+24>:	dd e9 02 23	ldrd	r2, r3, [sp, #8]
   0x00015730 <+28>:	46 f2 88 01	movw	r1, #24712	; 0x6088
   0x00015734 <+32>:	c0 f2 04 01	movt	r1, #4
   0x00015738 <+36>:	c1 e9 00 23	strd	r2, r3, [r1]
   0x0001573c <+40>:	05 b0	add	sp, #20
   0x0001573e <+42>:	5d f8 04 fb	ldr.w	pc, [sp], #4
End of assembler dump.
Dump of assembler code for function x_obstack_1grow:
   0x00015278 <+0>:	f8 b5	push	{r3, r4, r5, r6, r7, lr}
   0x0001527a <+2>:	0e 46	mov	r6, r1
   0x0001527c <+4>:	c3 68	ldr	r3, [r0, #12]
   0x0001527e <+6>:	04 46	mov	r4, r0
   0x00015280 <+8>:	01 69	ldr	r1, [r0, #16]
   0x00015282 <+10>:	17 46	mov	r7, r2
   0x00015284 <+12>:	5d 1c	adds	r5, r3, #1
   0x00015286 <+14>:	8d 42	cmp	r5, r1
   0x00015288 <+16>:	04 d9	bls.n	0x15294 <x_obstack_1grow+28>
   0x0001528a <+18>:	01 21	movs	r1, #1
   0x0001528c <+20>:	f5 f7 b2 ec	blx	0xabf4 <_obstack_newchunk@plt>
   0x00015290 <+24>:	e3 68	ldr	r3, [r4, #12]
   0x00015292 <+26>:	5d 1c	adds	r5, r3, #1
   0x00015294 <+28>:	e5 60	str	r5, [r4, #12]
   0x00015296 <+30>:	1f 70	strb	r7, [r3, #0]
   0x00015298 <+32>:	33 68	ldr	r3, [r6, #0]
   0x0001529a <+34>:	01 33	adds	r3, #1
   0x0001529c <+36>:	33 60	str	r3, [r6, #0]
   0x0001529e <+38>:	f8 bd	pop	{r3, r4, r5, r6, r7, pc}
End of assembler dump.
Dump of assembler code for function x_obstack_grow:
   0x00015240 <+0>:	2d e9 f0 41	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   0x00015244 <+4>:	1d 46	mov	r5, r3
   0x00015246 <+6>:	c3 68	ldr	r3, [r0, #12]
   0x00015248 <+8>:	90 46	mov	r8, r2
   0x0001524a <+10>:	07 69	ldr	r7, [r0, #16]
   0x0001524c <+12>:	04 46	mov	r4, r0
   0x0001524e <+14>:	5a 19	adds	r2, r3, r5
   0x00015250 <+16>:	0e 46	mov	r6, r1
   0x00015252 <+18>:	97 42	cmp	r7, r2
   0x00015254 <+20>:	03 d2	bcs.n	0x1525e <x_obstack_grow+30>
   0x00015256 <+22>:	29 46	mov	r1, r5
   0x00015258 <+24>:	f5 f7 cc ec	blx	0xabf4 <_obstack_newchunk@plt>
   0x0001525c <+28>:	e3 68	ldr	r3, [r4, #12]
   0x0001525e <+30>:	2a 46	mov	r2, r5
   0x00015260 <+32>:	18 46	mov	r0, r3
   0x00015262 <+34>:	41 46	mov	r1, r8
   0x00015264 <+36>:	f5 f7 86 ec	blx	0xab74 <memcpy@plt+4>
   0x00015268 <+40>:	e3 68	ldr	r3, [r4, #12]
   0x0001526a <+42>:	32 68	ldr	r2, [r6, #0]
   0x0001526c <+44>:	2b 44	add	r3, r5
   0x0001526e <+46>:	e3 60	str	r3, [r4, #12]
   0x00015270 <+48>:	15 44	add	r5, r2
   0x00015272 <+50>:	35 60	str	r5, [r6, #0]
   0x00015274 <+52>:	bd e8 f0 81	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
End of assembler dump.
Dump of assembler code for function xattr_acls_a_coder:
   0x000154cc <+0>:	10 b4	push	{r4}
   0x000154ce <+2>:	04 46	mov	r4, r0
   0x000154d0 <+4>:	23 6a	ldr	r3, [r4, #32]
   0x000154d2 <+6>:	10 46	mov	r0, r2
   0x000154d4 <+8>:	e2 69	ldr	r2, [r4, #28]
   0x000154d6 <+10>:	5d f8 04 4b	ldr.w	r4, [sp], #4
   0x000154da <+14>:	e1 e6	b.n	0x152a0 <xheader_print_n>
End of assembler dump.
Dump of assembler code for function xattr_acls_a_decoder:
   0x00014dac <+0>:	38 b5	push	{r3, r4, r5, lr}
   0x00014dae <+2>:	59 1c	adds	r1, r3, #1
   0x00014db0 <+4>:	04 46	mov	r4, r0
   0x00014db2 <+6>:	10 46	mov	r0, r2
   0x00014db4 <+8>:	1d 46	mov	r5, r3
   0x00014db6 <+10>:	1a f0 67 fb	bl	0x2f488 <xmemdup>
   0x00014dba <+14>:	25 62	str	r5, [r4, #32]
   0x00014dbc <+16>:	e0 61	str	r0, [r4, #28]
   0x00014dbe <+18>:	38 bd	pop	{r3, r4, r5, pc}
End of assembler dump.
