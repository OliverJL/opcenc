GNU gdb (Ubuntu 7.10-1ubuntu2) 7.10
Copyright (C) 2015 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "arm-linux-gnueabihf".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /usr/bin/vim.tiny...Reading symbols from /usr/lib/debug//usr/bin/vim.tiny...done.
done.
Dump of assembler code for function stuffRedoReadbuff:
   0x0002c0c0 <+0>:	04 4b	ldr	r3, [pc, #16]	; (0x2c0d4 <stuffRedoReadbuff+20>)
   0x0002c0c2 <+2>:	01 46	mov	r1, r0
   0x0002c0c4 <+4>:	4f f0 ff 32	mov.w	r2, #4294967295
   0x0002c0c8 <+8>:	7b 44	add	r3, pc
   0x0002c0ca <+10>:	03 f2 24 60	addw	r0, r3, #1572	; 0x624
   0x0002c0ce <+14>:	ff f7 a5 bb	b.w	0x2b81c <add_buff>
   0x0002c0d2 <+18>:	00 bf	nop
   0x0002c0d4 <+20>:	88 30	adds	r0, #136	; 0x88
   0x0002c0d6 <+22>:	08 00	movs	r0, r1
End of assembler dump.
Dump of assembler code for function stuff_empty:
   0x0002bdcc <+0>:	06 4b	ldr	r3, [pc, #24]	; (0x2bde8 <stuff_empty+28>)
   0x0002bdce <+2>:	7b 44	add	r3, pc
   0x0002bdd0 <+4>:	d3 f8 38 26	ldr.w	r2, [r3, #1592]	; 0x638
   0x0002bdd4 <+8>:	0a b1	cbz	r2, 0x2bdda <stuff_empty+14>
   0x0002bdd6 <+10>:	00 20	movs	r0, #0
   0x0002bdd8 <+12>:	70 47	bx	lr
   0x0002bdda <+14>:	d3 f8 24 06	ldr.w	r0, [r3, #1572]	; 0x624
   0x0002bdde <+18>:	b0 fa 80 f0	clz	r0, r0
   0x0002bde2 <+22>:	40 09	lsrs	r0, r0, #5
   0x0002bde4 <+24>:	70 47	bx	lr
   0x0002bde6 <+26>:	00 bf	nop
   0x0002bde8 <+28>:	82 33	adds	r3, #130	; 0x82
   0x0002bdea <+30>:	08 00	movs	r0, r1
End of assembler dump.
Dump of assembler code for function stuffcharReadbuff:
   0x0002c0ec <+0>:	03 4b	ldr	r3, [pc, #12]	; (0x2c0fc <stuffcharReadbuff+16>)
   0x0002c0ee <+2>:	01 46	mov	r1, r0
   0x0002c0f0 <+4>:	7b 44	add	r3, pc
   0x0002c0f2 <+6>:	03 f5 c7 60	add.w	r0, r3, #1592	; 0x638
   0x0002c0f6 <+10>:	ff f7 ef bb	b.w	0x2b8d8 <add_char_buff>
   0x0002c0fa <+14>:	00 bf	nop
   0x0002c0fc <+16>:	60 30	adds	r0, #96	; 0x60
   0x0002c0fe <+18>:	08 00	movs	r0, r1
End of assembler dump.
Dump of assembler code for function stuffnumReadbuff:
   0x0002c100 <+0>:	02 4b	ldr	r3, [pc, #8]	; (0x2c10c <stuffnumReadbuff+12>)
   0x0002c102 <+2>:	01 46	mov	r1, r0
   0x0002c104 <+4>:	7b 44	add	r3, pc
   0x0002c106 <+6>:	03 f5 c7 60	add.w	r0, r3, #1592	; 0x638
   0x0002c10a <+10>:	43 e4	b.n	0x2b994 <add_num_buff>
   0x0002c10c <+12>:	4c 30	adds	r0, #76	; 0x4c
   0x0002c10e <+14>:	08 00	movs	r0, r1
End of assembler dump.
Dump of assembler code for function typeahead_noflush:
   0x0002be00 <+0>:	02 4b	ldr	r3, [pc, #8]	; (0x2be0c <typeahead_noflush+12>)
   0x0002be02 <+2>:	7b 44	add	r3, pc
   0x0002be04 <+4>:	c3 f8 78 06	str.w	r0, [r3, #1656]	; 0x678
   0x0002be08 <+8>:	70 47	bx	lr
   0x0002be0a <+10>:	00 bf	nop
   0x0002be0c <+12>:	4e 33	adds	r3, #78	; 0x4e
   0x0002be0e <+14>:	08 00	movs	r0, r1
End of assembler dump.
Dump of assembler code for function typebuf_changed:
   0x0002c580 <+0>:	04 4b	ldr	r3, [pc, #16]	; (0x2c594 <typebuf_changed+20>)
   0x0002c582 <+2>:	7b 44	add	r3, pc
   0x0002c584 <+4>:	28 b1	cbz	r0, 0x2c592 <typebuf_changed+18>
   0x0002c586 <+6>:	04 4a	ldr	r2, [pc, #16]	; (0x2c598 <typebuf_changed+24>)
   0x0002c588 <+8>:	9b 58	ldr	r3, [r3, r2]
   0x0002c58a <+10>:	1b 6a	ldr	r3, [r3, #32]
   0x0002c58c <+12>:	18 1a	subs	r0, r3, r0
   0x0002c58e <+14>:	18 bf	it	ne
   0x0002c590 <+16>:	01 20	movne	r0, #1
   0x0002c592 <+18>:	70 47	bx	lr
   0x0002c594 <+20>:	16 b1	cbz	r6, 0x2c59c <typebuf_typed>
   0x0002c596 <+22>:	07 00	movs	r7, r0
   0x0002c598 <+24>:	70 08	lsrs	r0, r6, #1
   0x0002c59a <+26>:	00 00	movs	r0, r0
End of assembler dump.
Dump of assembler code for function typebuf_maplen:
   0x0002c5b8 <+0>:	02 4b	ldr	r3, [pc, #8]	; (0x2c5c4 <typebuf_maplen+12>)
   0x0002c5ba <+2>:	03 4a	ldr	r2, [pc, #12]	; (0x2c5c8 <typebuf_maplen+16>)
   0x0002c5bc <+4>:	7b 44	add	r3, pc
   0x0002c5be <+6>:	9b 58	ldr	r3, [r3, r2]
   0x0002c5c0 <+8>:	58 69	ldr	r0, [r3, #20]
   0x0002c5c2 <+10>:	70 47	bx	lr
   0x0002c5c4 <+12>:	dc b0	sub	sp, #368	; 0x170
   0x0002c5c6 <+14>:	07 00	movs	r7, r0
   0x0002c5c8 <+16>:	70 08	lsrs	r0, r6, #1
   0x0002c5ca <+18>:	00 00	movs	r0, r0
End of assembler dump.
Dump of assembler code for function typebuf_typed:
   0x0002c59c <+0>:	04 4b	ldr	r3, [pc, #16]	; (0x2c5b0 <typebuf_typed+20>)
   0x0002c59e <+2>:	05 4a	ldr	r2, [pc, #20]	; (0x2c5b4 <typebuf_typed+24>)
   0x0002c5a0 <+4>:	7b 44	add	r3, pc
   0x0002c5a2 <+6>:	9b 58	ldr	r3, [r3, r2]
   0x0002c5a4 <+8>:	58 69	ldr	r0, [r3, #20]
   0x0002c5a6 <+10>:	b0 fa 80 f0	clz	r0, r0
   0x0002c5aa <+14>:	40 09	lsrs	r0, r0, #5
   0x0002c5ac <+16>:	70 47	bx	lr
   0x0002c5ae <+18>:	00 bf	nop
   0x0002c5b0 <+20>:	f8 b0	sub	sp, #480	; 0x1e0
   0x0002c5b2 <+22>:	07 00	movs	r7, r0
   0x0002c5b4 <+24>:	70 08	lsrs	r0, r6, #1
   0x0002c5b6 <+26>:	00 00	movs	r0, r0
End of assembler dump.
Dump of assembler code for function updatescript:
   0x0002c78c <+0>:	38 b5	push	{r3, r4, r5, lr}
   0x0002c78e <+2>:	05 46	mov	r5, r0
   0x0002c790 <+4>:	12 4c	ldr	r4, [pc, #72]	; (0x2c7dc <updatescript+80>)
   0x0002c792 <+6>:	7c 44	add	r4, pc
   0x0002c794 <+8>:	98 b1	cbz	r0, 0x2c7be <updatescript+50>
   0x0002c796 <+10>:	12 4b	ldr	r3, [pc, #72]	; (0x2c7e0 <updatescript+84>)
   0x0002c798 <+12>:	e3 58	ldr	r3, [r4, r3]
   0x0002c79a <+14>:	19 68	ldr	r1, [r3, #0]
   0x0002c79c <+16>:	09 b1	cbz	r1, 0x2c7a2 <updatescript+22>
   0x0002c79e <+18>:	e0 f7 bc eb	blx	0xcf18 <_IO_putc@plt>
   0x0002c7a2 <+22>:	10 4b	ldr	r3, [pc, #64]	; (0x2c7e4 <updatescript+88>)
   0x0002c7a4 <+24>:	e3 58	ldr	r3, [r4, r3]
   0x0002c7a6 <+26>:	1a 68	ldr	r2, [r3, #0]
   0x0002c7a8 <+28>:	00 2a	cmp	r2, #0
   0x0002c7aa <+30>:	14 dd	ble.n	0x2c7d6 <updatescript+74>
   0x0002c7ac <+32>:	0e 49	ldr	r1, [pc, #56]	; (0x2c7e8 <updatescript+92>)
   0x0002c7ae <+34>:	79 44	add	r1, pc
   0x0002c7b0 <+36>:	d1 f8 b4 38	ldr.w	r3, [r1, #2228]	; 0x8b4
   0x0002c7b4 <+40>:	01 33	adds	r3, #1
   0x0002c7b6 <+42>:	c1 f8 b4 38	str.w	r3, [r1, #2228]	; 0x8b4
   0x0002c7ba <+46>:	9a 42	cmp	r2, r3
   0x0002c7bc <+48>:	0c dc	bgt.n	0x2c7d8 <updatescript+76>
   0x0002c7be <+50>:	b5 fa 85 f0	clz	r0, r5
   0x0002c7c2 <+54>:	01 21	movs	r1, #1
   0x0002c7c4 <+56>:	40 09	lsrs	r0, r0, #5
   0x0002c7c6 <+58>:	06 f0 c9 fe	bl	0x3355c <ml_sync_all>
   0x0002c7ca <+62>:	08 4b	ldr	r3, [pc, #32]	; (0x2c7ec <updatescript+96>)
   0x0002c7cc <+64>:	00 22	movs	r2, #0
   0x0002c7ce <+66>:	7b 44	add	r3, pc
   0x0002c7d0 <+68>:	c3 f8 b4 28	str.w	r2, [r3, #2228]	; 0x8b4
   0x0002c7d4 <+72>:	38 bd	pop	{r3, r4, r5, pc}
   0x0002c7d6 <+74>:	38 bd	pop	{r3, r4, r5, pc}
   0x0002c7d8 <+76>:	38 bd	pop	{r3, r4, r5, pc}
   0x0002c7da <+78>:	00 bf	nop
   0x0002c7dc <+80>:	06 af	add	r7, sp, #24
   0x0002c7de <+82>:	07 00	movs	r7, r0
   0x0002c7e0 <+84>:	7c 04	lsls	r4, r7, #17
   0x0002c7e2 <+86>:	00 00	movs	r0, r0
   0x0002c7e4 <+88>:	f8 06	lsls	r0, r7, #27
   0x0002c7e6 <+90>:	00 00	movs	r0, r0
   0x0002c7e8 <+92>:	a2 29	cmp	r1, #162	; 0xa2
   0x0002c7ea <+94>:	08 00	movs	r0, r1
   0x0002c7ec <+96>:	82 29	cmp	r1, #130	; 0x82
   0x0002c7ee <+98>:	08 00	movs	r0, r1
End of assembler dump.
