GNU gdb (Ubuntu 7.10-1ubuntu2) 7.10
Copyright (C) 2015 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "arm-linux-gnueabihf".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /usr/bin/vim.tiny...Reading symbols from /usr/lib/debug//usr/bin/vim.tiny...done.
done.
Dump of assembler code for function fill_input_buf:
   0x0007f790 <+0>:	2d e9 f0 4f	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
   0x0007f794 <+4>:	89 b0	sub	sp, #36	; 0x24
   0x0007f796 <+6>:	74 4c	ldr	r4, [pc, #464]	; (0x7f968 <fill_input_buf+472>)
   0x0007f798 <+8>:	74 4b	ldr	r3, [pc, #464]	; (0x7f96c <fill_input_buf+476>)
   0x0007f79a <+10>:	7c 44	add	r4, pc
   0x0007f79c <+12>:	7b 44	add	r3, pc
   0x0007f79e <+14>:	04 93	str	r3, [sp, #16]
   0x0007f7a0 <+16>:	e6 68	ldr	r6, [r4, #12]
   0x0007f7a2 <+18>:	f9 2e	cmp	r6, #249	; 0xf9
   0x0007f7a4 <+20>:	71 dc	bgt.n	0x7f88a <fill_input_buf+250>
   0x0007f7a6 <+22>:	27 69	ldr	r7, [r4, #16]
   0x0007f7a8 <+24>:	03 90	str	r0, [sp, #12]
   0x0007f7aa <+26>:	00 2f	cmp	r7, #0
   0x0007f7ac <+28>:	00 f0 d6 80	beq.w	0x7f95c <fill_input_buf+460>
   0x0007f7b0 <+32>:	65 69	ldr	r5, [r4, #20]
   0x0007f7b2 <+34>:	c6 f1 fa 03	rsb	r3, r6, #250	; 0xfa
   0x0007f7b6 <+38>:	05 93	str	r3, [sp, #20]
   0x0007f7b8 <+40>:	ab 42	cmp	r3, r5
   0x0007f7ba <+42>:	69 da	bge.n	0x7f890 <fill_input_buf+256>
   0x0007f7bc <+44>:	dd f8 14 80	ldr.w	r8, [sp, #20]
   0x0007f7c0 <+48>:	04 f1 18 00	add.w	r0, r4, #24
   0x0007f7c4 <+52>:	39 46	mov	r1, r7
   0x0007f7c6 <+54>:	30 44	add	r0, r6
   0x0007f7c8 <+56>:	42 46	mov	r2, r8
   0x0007f7ca <+58>:	8d f7 cc ea	blx	0xcd64 <memmove@plt+4>
   0x0007f7ce <+62>:	43 46	mov	r3, r8
   0x0007f7d0 <+64>:	ed 1a	subs	r5, r5, r3
   0x0007f7d2 <+66>:	f9 18	adds	r1, r7, r3
   0x0007f7d4 <+68>:	38 46	mov	r0, r7
   0x0007f7d6 <+70>:	65 61	str	r5, [r4, #20]
   0x0007f7d8 <+72>:	2a 46	mov	r2, r5
   0x0007f7da <+74>:	8d f7 c4 ea	blx	0xcd64 <memmove@plt+4>
   0x0007f7de <+78>:	64 4a	ldr	r2, [pc, #400]	; (0x7f970 <fill_input_buf+480>)
   0x0007f7e0 <+80>:	05 9b	ldr	r3, [sp, #20]
   0x0007f7e2 <+82>:	7a 44	add	r2, pc
   0x0007f7e4 <+84>:	1e 44	add	r6, r3
   0x0007f7e6 <+86>:	d6 60	str	r6, [r2, #12]
   0x0007f7e8 <+88>:	04 9d	ldr	r5, [sp, #16]
   0x0007f7ea <+90>:	64 24	movs	r4, #100	; 0x64
   0x0007f7ec <+92>:	61 48	ldr	r0, [pc, #388]	; (0x7f974 <fill_input_buf+484>)
   0x0007f7ee <+94>:	62 49	ldr	r1, [pc, #392]	; (0x7f978 <fill_input_buf+488>)
   0x0007f7f0 <+96>:	62 4a	ldr	r2, [pc, #392]	; (0x7f97c <fill_input_buf+492>)
   0x0007f7f2 <+98>:	2b 46	mov	r3, r5
   0x0007f7f4 <+100>:	df f8 88 81	ldr.w	r8, [pc, #392]	; 0x7f980 <fill_input_buf+496>
   0x0007f7f8 <+104>:	df f8 88 b1	ldr.w	r11, [pc, #392]	; 0x7f984 <fill_input_buf+500>
   0x0007f7fc <+108>:	f8 44	add	r8, pc
   0x0007f7fe <+110>:	55 f8 00 90	ldr.w	r9, [r5, r0]
   0x0007f802 <+114>:	08 f1 18 0a	add.w	r10, r8, #24
   0x0007f806 <+118>:	6d 58	ldr	r5, [r5, r1]
   0x0007f808 <+120>:	9f 58	ldr	r7, [r3, r2]
   0x0007f80a <+122>:	fb 44	add	r11, pc
   0x0007f80c <+124>:	06 e0	b.n	0x7f81c <fill_input_buf+140>
   0x0007f80e <+126>:	03 9b	ldr	r3, [sp, #12]
   0x0007f810 <+128>:	00 2b	cmp	r3, #0
   0x0007f812 <+130>:	3a d0	beq.n	0x7f88a <fill_input_buf+250>
   0x0007f814 <+132>:	01 3c	subs	r4, #1
   0x0007f816 <+134>:	79 d0	beq.n	0x7f90c <fill_input_buf+380>
   0x0007f818 <+136>:	db f8 0c 60	ldr.w	r6, [r11, #12]
   0x0007f81c <+140>:	d9 f8 04 10	ldr.w	r1, [r9, #4]
   0x0007f820 <+144>:	c6 f1 fa 00	rsb	r0, r6, #250	; 0xfa
   0x0007f824 <+148>:	07 f0 f0 fc	bl	0x87208 <__divsi3>
   0x0007f828 <+152>:	0a eb 06 01	add.w	r1, r10, r6
   0x0007f82c <+156>:	02 46	mov	r2, r0
   0x0007f82e <+158>:	28 68	ldr	r0, [r5, #0]
   0x0007f830 <+160>:	8d f7 7c ea	blx	0xcd2c <read@plt>
   0x0007f834 <+164>:	06 1e	subs	r6, r0, #0
   0x0007f836 <+166>:	3a dc	bgt.n	0x7f8ae <fill_input_buf+286>
   0x0007f838 <+168>:	3b 68	ldr	r3, [r7, #0]
   0x0007f83a <+170>:	00 2b	cmp	r3, #0
   0x0007f83c <+172>:	66 d1	bne.n	0x7f90c <fill_input_buf+380>
   0x0007f83e <+174>:	d8 f8 18 31	ldr.w	r3, [r8, #280]	; 0x118
   0x0007f842 <+178>:	00 2b	cmp	r3, #0
   0x0007f844 <+180>:	e3 d1	bne.n	0x7f80e <fill_input_buf+126>
   0x0007f846 <+182>:	28 68	ldr	r0, [r5, #0]
   0x0007f848 <+184>:	8d f7 54 ed	blx	0xd2f4 <isatty@plt>
   0x0007f84c <+188>:	00 28	cmp	r0, #0
   0x0007f84e <+190>:	de d1	bne.n	0x7f80e <fill_input_buf+126>
   0x0007f850 <+192>:	2b 68	ldr	r3, [r5, #0]
   0x0007f852 <+194>:	00 2b	cmp	r3, #0
   0x0007f854 <+196>:	db d1	bne.n	0x7f80e <fill_input_buf+126>
   0x0007f856 <+198>:	07 93	str	r3, [sp, #28]
   0x0007f858 <+200>:	4b 4a	ldr	r2, [pc, #300]	; (0x7f988 <fill_input_buf+504>)
   0x0007f85a <+202>:	04 9b	ldr	r3, [sp, #16]
   0x0007f85c <+204>:	9a 58	ldr	r2, [r3, r2]
   0x0007f85e <+206>:	12 68	ldr	r2, [r2, #0]
   0x0007f860 <+208>:	06 92	str	r2, [sp, #24]
   0x0007f862 <+210>:	fe f7 d5 f8	bl	0x7da10 <settmode>
   0x0007f866 <+214>:	07 9b	ldr	r3, [sp, #28]
   0x0007f868 <+216>:	18 46	mov	r0, r3
   0x0007f86a <+218>:	8d f7 66 ed	blx	0xd338 <close@plt>
   0x0007f86e <+222>:	02 20	movs	r0, #2
   0x0007f870 <+224>:	8d f7 14 eb	blx	0xce9c <dup@plt>
   0x0007f874 <+228>:	04 9a	ldr	r2, [sp, #16]
   0x0007f876 <+230>:	45 4b	ldr	r3, [pc, #276]	; (0x7f98c <fill_input_buf+508>)
   0x0007f878 <+232>:	d3 58	ldr	r3, [r2, r3]
   0x0007f87a <+234>:	06 9a	ldr	r2, [sp, #24]
   0x0007f87c <+236>:	18 60	str	r0, [r3, #0]
   0x0007f87e <+238>:	10 46	mov	r0, r2
   0x0007f880 <+240>:	fe f7 c6 f8	bl	0x7da10 <settmode>
   0x0007f884 <+244>:	03 9b	ldr	r3, [sp, #12]
   0x0007f886 <+246>:	00 2b	cmp	r3, #0
   0x0007f888 <+248>:	c4 d1	bne.n	0x7f814 <fill_input_buf+132>
   0x0007f88a <+250>:	09 b0	add	sp, #36	; 0x24
   0x0007f88c <+252>:	bd e8 f0 8f	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}
   0x0007f890 <+256>:	04 f1 18 00	add.w	r0, r4, #24
   0x0007f894 <+260>:	2a 46	mov	r2, r5
   0x0007f896 <+262>:	30 44	add	r0, r6
   0x0007f898 <+264>:	39 46	mov	r1, r7
   0x0007f89a <+266>:	8d f7 64 ea	blx	0xcd64 <memmove@plt+4>
   0x0007f89e <+270>:	38 46	mov	r0, r7
   0x0007f8a0 <+272>:	05 95	str	r5, [sp, #20]
   0x0007f8a2 <+274>:	bd f7 7f fd	bl	0x3d3a4 <vim_free>
   0x0007f8a6 <+278>:	00 22	movs	r2, #0
   0x0007f8a8 <+280>:	e6 68	ldr	r6, [r4, #12]
   0x0007f8aa <+282>:	22 61	str	r2, [r4, #16]
   0x0007f8ac <+284>:	97 e7	b.n	0x7f7de <fill_input_buf+78>
   0x0007f8ae <+286>:	31 46	mov	r1, r6
   0x0007f8b0 <+288>:	01 23	movs	r3, #1
   0x0007f8b2 <+290>:	c8 f8 18 31	str.w	r3, [r8, #280]	; 0x118
   0x0007f8b6 <+294>:	3b 68	ldr	r3, [r7, #0]
   0x0007f8b8 <+296>:	00 2b	cmp	r3, #0
   0x0007f8ba <+298>:	46 d1	bne.n	0x7f94a <fill_input_buf+442>
   0x0007f8bc <+300>:	d9 f8 00 20	ldr.w	r2, [r9]
   0x0007f8c0 <+304>:	6a bb	cbnz	r2, 0x7f91e <fill_input_buf+398>
   0x0007f8c2 <+306>:	00 29	cmp	r1, #0
   0x0007f8c4 <+308>:	e1 dd	ble.n	0x7f88a <fill_input_buf+250>
   0x0007f8c6 <+310>:	32 4d	ldr	r5, [pc, #200]	; (0x7f990 <fill_input_buf+512>)
   0x0007f8c8 <+312>:	0c 46	mov	r4, r1
   0x0007f8ca <+314>:	dd f8 10 90	ldr.w	r9, [sp, #16]
   0x0007f8ce <+318>:	7d 44	add	r5, pc
   0x0007f8d0 <+320>:	05 f1 18 08	add.w	r8, r5, #24
   0x0007f8d4 <+324>:	e9 68	ldr	r1, [r5, #12]
   0x0007f8d6 <+326>:	2e 46	mov	r6, r5
   0x0007f8d8 <+328>:	03 e0	b.n	0x7f8e2 <fill_input_buf+338>
   0x0007f8da <+330>:	01 31	adds	r1, #1
   0x0007f8dc <+332>:	01 3c	subs	r4, #1
   0x0007f8de <+334>:	f1 60	str	r1, [r6, #12]
   0x0007f8e0 <+336>:	d3 d0	beq.n	0x7f88a <fill_input_buf+250>
   0x0007f8e2 <+338>:	6b 18	adds	r3, r5, r1
   0x0007f8e4 <+340>:	1b 7e	ldrb	r3, [r3, #24]
   0x0007f8e6 <+342>:	03 2b	cmp	r3, #3
   0x0007f8e8 <+344>:	f7 d1	bne.n	0x7f8da <fill_input_buf+330>
   0x0007f8ea <+346>:	2a 4b	ldr	r3, [pc, #168]	; (0x7f994 <fill_input_buf+516>)
   0x0007f8ec <+348>:	59 f8 03 30	ldr.w	r3, [r9, r3]
   0x0007f8f0 <+352>:	1b 68	ldr	r3, [r3, #0]
   0x0007f8f2 <+354>:	00 2b	cmp	r3, #0
   0x0007f8f4 <+356>:	f1 d0	beq.n	0x7f8da <fill_input_buf+330>
   0x0007f8f6 <+358>:	41 44	add	r1, r8
   0x0007f8f8 <+360>:	4f f4 80 73	mov.w	r3, #256	; 0x100
   0x0007f8fc <+364>:	22 46	mov	r2, r4
   0x0007f8fe <+366>:	40 46	mov	r0, r8
   0x0007f900 <+368>:	8d f7 36 ea	blx	0xcd70 <__memmove_chk@plt>
   0x0007f904 <+372>:	01 23	movs	r3, #1
   0x0007f906 <+374>:	19 46	mov	r1, r3
   0x0007f908 <+376>:	3b 60	str	r3, [r7, #0]
   0x0007f90a <+378>:	e7 e7	b.n	0x7f8dc <fill_input_buf+332>
   0x0007f90c <+380>:	3b 68	ldr	r3, [r7, #0]
   0x0007f90e <+382>:	31 46	mov	r1, r6
   0x0007f910 <+384>:	00 2b	cmp	r3, #0
   0x0007f912 <+386>:	d0 d1	bne.n	0x7f8b6 <fill_input_buf+294>
   0x0007f914 <+388>:	03 91	str	r1, [sp, #12]
   0x0007f916 <+390>:	ff f7 0b ff	bl	0x7f730 <read_error_exit>
   0x0007f91a <+394>:	03 99	ldr	r1, [sp, #12]
   0x0007f91c <+396>:	cb e7	b.n	0x7f8b6 <fill_input_buf+294>
   0x0007f91e <+398>:	1e 4d	ldr	r5, [pc, #120]	; (0x7f998 <fill_input_buf+520>)
   0x0007f920 <+400>:	05 9e	ldr	r6, [sp, #20]
   0x0007f922 <+402>:	7d 44	add	r5, pc
   0x0007f924 <+404>:	05 f1 18 00	add.w	r0, r5, #24
   0x0007f928 <+408>:	31 44	add	r1, r6
   0x0007f92a <+410>:	ea 68	ldr	r2, [r5, #12]
   0x0007f92c <+412>:	2c 69	ldr	r4, [r5, #16]
   0x0007f92e <+414>:	92 1b	subs	r2, r2, r6
   0x0007f930 <+416>:	ea 60	str	r2, [r5, #12]
   0x0007f932 <+418>:	10 44	add	r0, r2
   0x0007f934 <+420>:	c2 f1 fa 02	rsb	r2, r2, #250	; 0xfa
   0x0007f938 <+424>:	94 b1	cbz	r4, 0x7f960 <fill_input_buf+464>
   0x0007f93a <+426>:	18 4c	ldr	r4, [pc, #96]	; (0x7f99c <fill_input_buf+524>)
   0x0007f93c <+428>:	7c 44	add	r4, pc
   0x0007f93e <+430>:	14 34	adds	r4, #20
   0x0007f940 <+432>:	00 94	str	r4, [sp, #0]
   0x0007f942 <+434>:	c3 f7 8d fc	bl	0x43260 <convert_input_safe>
   0x0007f946 <+438>:	01 46	mov	r1, r0
   0x0007f948 <+440>:	bb e7	b.n	0x7f8c2 <fill_input_buf+306>
   0x0007f94a <+442>:	15 4b	ldr	r3, [pc, #84]	; (0x7f9a0 <fill_input_buf+528>)
   0x0007f94c <+444>:	03 21	movs	r1, #3
   0x0007f94e <+446>:	01 22	movs	r2, #1
   0x0007f950 <+448>:	7b 44	add	r3, pc
   0x0007f952 <+450>:	19 76	strb	r1, [r3, #24]
   0x0007f954 <+452>:	da 60	str	r2, [r3, #12]
   0x0007f956 <+454>:	09 b0	add	sp, #36	; 0x24
   0x0007f958 <+456>:	bd e8 f0 8f	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}
   0x0007f95c <+460>:	05 97	str	r7, [sp, #20]
   0x0007f95e <+462>:	43 e7	b.n	0x7f7e8 <fill_input_buf+88>
   0x0007f960 <+464>:	05 f1 10 03	add.w	r3, r5, #16
   0x0007f964 <+468>:	e9 e7	b.n	0x7f93a <fill_input_buf+426>
   0x0007f966 <+470>:	00 bf	nop
   0x0007f968 <+472>:	ba 20	movs	r0, #186	; 0xba
   0x0007f96a <+474>:	03 00	movs	r3, r0
   0x0007f96c <+476>:	fc 7e	ldrb	r4, [r7, #27]
   0x0007f96e <+478>:	02 00	movs	r2, r0
   0x0007f970 <+480>:	72 20	movs	r0, #114	; 0x72
   0x0007f972 <+482>:	03 00	movs	r3, r0
   0x0007f974 <+484>:	d8 04	lsls	r0, r3, #19
   0x0007f976 <+486>:	00 00	movs	r0, r0
   0x0007f978 <+488>:	ec 05	lsls	r4, r5, #23
   0x0007f97a <+490>:	00 00	movs	r0, r0
   0x0007f97c <+492>:	44 04	lsls	r4, r0, #17
   0x0007f97e <+494>:	00 00	movs	r0, r0
   0x0007f980 <+496>:	58 20	movs	r0, #88	; 0x58
   0x0007f982 <+498>:	03 00	movs	r3, r0
   0x0007f984 <+500>:	4a 20	movs	r0, #74	; 0x4a
   0x0007f986 <+502>:	03 00	movs	r3, r0
   0x0007f988 <+504>:	00 09	lsrs	r0, r0, #4
   0x0007f98a <+506>:	00 00	movs	r0, r0
   0x0007f98c <+508>:	a4 06	lsls	r4, r4, #26
   0x0007f98e <+510>:	00 00	movs	r0, r0
   0x0007f990 <+512>:	86 1f	subs	r6, r0, #6
   0x0007f992 <+514>:	03 00	movs	r3, r0
   0x0007f994 <+516>:	dc 08	lsrs	r4, r3, #3
   0x0007f996 <+518>:	00 00	movs	r0, r0
   0x0007f998 <+520>:	32 1f	subs	r2, r6, #4
   0x0007f99a <+522>:	03 00	movs	r3, r0
   0x0007f99c <+524>:	18 1f	subs	r0, r3, #4
   0x0007f99e <+526>:	03 00	movs	r3, r0
   0x0007f9a0 <+528>:	04 1f	subs	r4, r0, #4
   0x0007f9a2 <+530>:	03 00	movs	r3, r0
End of assembler dump.
Dump of assembler code for function read_error_exit:
   0x0007f730 <+0>:	f8 b5	push	{r3, r4, r5, r6, r7, lr}
   0x0007f732 <+2>:	13 4c	ldr	r4, [pc, #76]	; (0x7f780 <read_error_exit+80>)
   0x0007f734 <+4>:	13 4b	ldr	r3, [pc, #76]	; (0x7f784 <read_error_exit+84>)
   0x0007f736 <+6>:	7c 44	add	r4, pc
   0x0007f738 <+8>:	e3 58	ldr	r3, [r4, r3]
   0x0007f73a <+10>:	1b 68	ldr	r3, [r3, #0]
   0x0007f73c <+12>:	13 b1	cbz	r3, 0x7f744 <read_error_exit+20>
   0x0007f73e <+14>:	00 20	movs	r0, #0
   0x0007f740 <+16>:	06 f0 66 fc	bl	0x86010 <getout>
   0x0007f744 <+20>:	10 4b	ldr	r3, [pc, #64]	; (0x7f788 <read_error_exit+88>)
   0x0007f746 <+22>:	11 4e	ldr	r6, [pc, #68]	; (0x7f78c <read_error_exit+92>)
   0x0007f748 <+24>:	e3 58	ldr	r3, [r4, r3]
   0x0007f74a <+26>:	7e 44	add	r6, pc
   0x0007f74c <+28>:	06 f1 20 07	add.w	r7, r6, #32
   0x0007f750 <+32>:	1d 68	ldr	r5, [r3, #0]
   0x0007f752 <+34>:	34 46	mov	r4, r6
   0x0007f754 <+36>:	10 35	adds	r5, #16
   0x0007f756 <+38>:	0f cc	ldmia	r4!, {r0, r1, r2, r3}
   0x0007f758 <+40>:	10 36	adds	r6, #16
   0x0007f75a <+42>:	bc 42	cmp	r4, r7
   0x0007f75c <+44>:	45 f8 10 0c	str.w	r0, [r5, #-16]
   0x0007f760 <+48>:	45 f8 0c 1c	str.w	r1, [r5, #-12]
   0x0007f764 <+52>:	45 f8 08 2c	str.w	r2, [r5, #-8]
   0x0007f768 <+56>:	45 f8 04 3c	str.w	r3, [r5, #-4]
   0x0007f76c <+60>:	f1 d1	bne.n	0x7f752 <read_error_exit+34>
   0x0007f76e <+62>:	30 68	ldr	r0, [r6, #0]
   0x0007f770 <+64>:	b3 88	ldrh	r3, [r6, #4]
   0x0007f772 <+66>:	28 60	str	r0, [r5, #0]
   0x0007f774 <+68>:	ab 80	strh	r3, [r5, #4]
   0x0007f776 <+70>:	bd e8 f8 40	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   0x0007f77a <+74>:	bc f7 a7 bc	b.w	0x3c0cc <preserve_exit>
   0x0007f77e <+78>:	00 bf	nop
   0x0007f780 <+80>:	62 7f	ldrb	r2, [r4, #29]
   0x0007f782 <+82>:	02 00	movs	r2, r0
   0x0007f784 <+84>:	08 04	lsls	r0, r1, #16
   0x0007f786 <+86>:	00 00	movs	r0, r0
   0x0007f788 <+88>:	e8 05	lsls	r0, r5, #23
   0x0007f78a <+90>:	00 00	movs	r0, r0
   0x0007f78c <+92>:	3e 18	adds	r6, r7, r0
   0x0007f78e <+94>:	01 00	movs	r1, r0
End of assembler dump.
Dump of assembler code for function read_from_input_buf:
   0x0007f9a4 <+0>:	f8 b5	push	{r3, r4, r5, r6, r7, lr}
   0x0007f9a6 <+2>:	07 46	mov	r7, r0
   0x0007f9a8 <+4>:	10 4e	ldr	r6, [pc, #64]	; (0x7f9ec <read_from_input_buf+72>)
   0x0007f9aa <+6>:	0d 46	mov	r5, r1
   0x0007f9ac <+8>:	7e 44	add	r6, pc
   0x0007f9ae <+10>:	f4 68	ldr	r4, [r6, #12]
   0x0007f9b0 <+12>:	b4 b1	cbz	r4, 0x7f9e0 <read_from_input_buf+60>
   0x0007f9b2 <+14>:	0f 4e	ldr	r6, [pc, #60]	; (0x7f9f0 <read_from_input_buf+76>)
   0x0007f9b4 <+16>:	a5 42	cmp	r5, r4
   0x0007f9b6 <+18>:	38 46	mov	r0, r7
   0x0007f9b8 <+20>:	7e 44	add	r6, pc
   0x0007f9ba <+22>:	a8 bf	it	ge
   0x0007f9bc <+24>:	25 46	movge	r5, r4
   0x0007f9be <+26>:	06 f1 18 07	add.w	r7, r6, #24
   0x0007f9c2 <+30>:	2a 46	mov	r2, r5
   0x0007f9c4 <+32>:	39 46	mov	r1, r7
   0x0007f9c6 <+34>:	8d f7 ce e9	blx	0xcd64 <memmove@plt+4>
   0x0007f9ca <+38>:	62 1b	subs	r2, r4, r5
   0x0007f9cc <+40>:	f2 60	str	r2, [r6, #12]
   0x0007f9ce <+42>:	2a b1	cbz	r2, 0x7f9dc <read_from_input_buf+56>
   0x0007f9d0 <+44>:	4f f4 80 73	mov.w	r3, #256	; 0x100
   0x0007f9d4 <+48>:	79 19	adds	r1, r7, r5
   0x0007f9d6 <+50>:	38 46	mov	r0, r7
   0x0007f9d8 <+52>:	8d f7 ca e9	blx	0xcd70 <__memmove_chk@plt>
   0x0007f9dc <+56>:	28 46	mov	r0, r5
   0x0007f9de <+58>:	f8 bd	pop	{r3, r4, r5, r6, r7, pc}
   0x0007f9e0 <+60>:	01 20	movs	r0, #1
   0x0007f9e2 <+62>:	ff f7 d5 fe	bl	0x7f790 <fill_input_buf>
   0x0007f9e6 <+66>:	f4 68	ldr	r4, [r6, #12]
   0x0007f9e8 <+68>:	e3 e7	b.n	0x7f9b2 <read_from_input_buf+14>
   0x0007f9ea <+70>:	00 bf	nop
   0x0007f9ec <+72>:	a8 1e	subs	r0, r5, #2
   0x0007f9ee <+74>:	03 00	movs	r3, r0
   0x0007f9f0 <+76>:	9c 1e	subs	r4, r3, #2
   0x0007f9f2 <+78>:	03 00	movs	r3, r0
End of assembler dump.
Dump of assembler code for function ui_breakcheck:
   0x0007f704 <+0>:	d6 f7 fe ba	b.w	0x55d04 <mch_breakcheck>
End of assembler dump.
Dump of assembler code for function ui_char_avail:
   0x0007f680 <+0>:	d4 f7 aa bd	b.w	0x541d8 <mch_char_avail>
End of assembler dump.
Dump of assembler code for function ui_delay:
   0x0007f684 <+0>:	d4 f7 34 be	b.w	0x542f0 <mch_delay>
End of assembler dump.
Dump of assembler code for function ui_get_shellsize:
   0x0007f68c <+0>:	38 b5	push	{r3, r4, r5, lr}
   0x0007f68e <+2>:	d5 f7 c3 fc	bl	0x55018 <mch_get_shellsize>
   0x0007f692 <+6>:	0c 4d	ldr	r5, [pc, #48]	; (0x7f6c4 <ui_get_shellsize+56>)
   0x0007f694 <+8>:	7d 44	add	r5, pc
   0x0007f696 <+10>:	04 46	mov	r4, r0
   0x0007f698 <+12>:	fe f7 3a f8	bl	0x7d710 <check_shellsize>
   0x0007f69c <+16>:	01 2c	cmp	r4, #1
   0x0007f69e <+18>:	01 d0	beq.n	0x7f6a4 <ui_get_shellsize+24>
   0x0007f6a0 <+20>:	20 46	mov	r0, r4
   0x0007f6a2 <+22>:	38 bd	pop	{r3, r4, r5, pc}
   0x0007f6a4 <+24>:	08 4b	ldr	r3, [pc, #32]	; (0x7f6c8 <ui_get_shellsize+60>)
   0x0007f6a6 <+26>:	09 48	ldr	r0, [pc, #36]	; (0x7f6cc <ui_get_shellsize+64>)
   0x0007f6a8 <+28>:	eb 58	ldr	r3, [r5, r3]
   0x0007f6aa <+30>:	78 44	add	r0, pc
   0x0007f6ac <+32>:	19 68	ldr	r1, [r3, #0]
   0x0007f6ae <+34>:	d1 f7 75 f9	bl	0x5099c <set_number_default>
   0x0007f6b2 <+38>:	07 4b	ldr	r3, [pc, #28]	; (0x7f6d0 <ui_get_shellsize+68>)
   0x0007f6b4 <+40>:	07 48	ldr	r0, [pc, #28]	; (0x7f6d4 <ui_get_shellsize+72>)
   0x0007f6b6 <+42>:	eb 58	ldr	r3, [r5, r3]
   0x0007f6b8 <+44>:	78 44	add	r0, pc
   0x0007f6ba <+46>:	19 68	ldr	r1, [r3, #0]
   0x0007f6bc <+48>:	d1 f7 6e f9	bl	0x5099c <set_number_default>
   0x0007f6c0 <+52>:	20 46	mov	r0, r4
   0x0007f6c2 <+54>:	38 bd	pop	{r3, r4, r5, pc}
   0x0007f6c4 <+56>:	04 80	strh	r4, [r0, #0]
   0x0007f6c6 <+58>:	02 00	movs	r2, r0
   0x0007f6c8 <+60>:	c8 08	lsrs	r0, r1, #3
   0x0007f6ca <+62>:	00 00	movs	r0, r0
   0x0007f6cc <+64>:	f6 87	strh	r6, [r6, #62]	; 0x3e
   0x0007f6ce <+66>:	00 00	movs	r0, r0
   0x0007f6d0 <+68>:	fc 07	lsls	r4, r7, #31
   0x0007f6d2 <+70>:	00 00	movs	r0, r0
   0x0007f6d4 <+72>:	50 df	svc	80	; 0x50
   0x0007f6d6 <+74>:	00 00	movs	r0, r0
End of assembler dump.
Dump of assembler code for function ui_inchar:
   0x0007f5e8 <+0>:	64 2a	cmp	r2, #100	; 0x64
   0x0007f5ea <+2>:	2d e9 f8 43	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   0x0007f5ee <+6>:	d4 bf	ite	le
   0x0007f5f0 <+8>:	00 24	movle	r4, #0
   0x0007f5f2 <+10>:	01 24	movgt	r4, #1
   0x0007f5f4 <+12>:	1e 4d	ldr	r5, [pc, #120]	; (0x7f670 <ui_inchar+136>)
   0x0007f5f6 <+14>:	b2 f1 ff 3f	cmp.w	r2, #4294967295
   0x0007f5fa <+18>:	08 bf	it	eq
   0x0007f5fc <+20>:	44 f0 01 04	orreq.w	r4, r4, #1
   0x0007f600 <+24>:	7d 44	add	r5, pc
   0x0007f602 <+26>:	4c b9	cbnz	r4, 0x7f618 <ui_inchar+48>
   0x0007f604 <+28>:	d4 f7 7a fd	bl	0x540fc <mch_inchar>
   0x0007f608 <+32>:	1a 4b	ldr	r3, [pc, #104]	; (0x7f674 <ui_inchar+140>)
   0x0007f60a <+34>:	ec 58	ldr	r4, [r5, r3]
   0x0007f60c <+36>:	01 23	movs	r3, #1
   0x0007f60e <+38>:	23 60	str	r3, [r4, #0]
   0x0007f610 <+40>:	06 46	mov	r6, r0
   0x0007f612 <+42>:	30 46	mov	r0, r6
   0x0007f614 <+44>:	bd e8 f8 83	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   0x0007f618 <+48>:	07 46	mov	r7, r0
   0x0007f61a <+50>:	6f f0 01 00	mvn.w	r0, #1
   0x0007f61e <+54>:	16 46	mov	r6, r2
   0x0007f620 <+56>:	88 46	mov	r8, r1
   0x0007f622 <+58>:	99 46	mov	r9, r3
   0x0007f624 <+60>:	d4 f7 0a ff	bl	0x5443c <vim_handle_signal>
   0x0007f628 <+64>:	13 4a	ldr	r2, [pc, #76]	; (0x7f678 <ui_inchar+144>)
   0x0007f62a <+66>:	14 4b	ldr	r3, [pc, #80]	; (0x7f67c <ui_inchar+148>)
   0x0007f62c <+68>:	aa 58	ldr	r2, [r5, r2]
   0x0007f62e <+70>:	eb 58	ldr	r3, [r5, r3]
   0x0007f630 <+72>:	12 68	ldr	r2, [r2, #0]
   0x0007f632 <+74>:	1b 68	ldr	r3, [r3, #0]
   0x0007f634 <+76>:	d2 f8 10 46	ldr.w	r4, [r2, #1552]	; 0x610
   0x0007f638 <+80>:	1c 43	orrs	r4, r3
   0x0007f63a <+82>:	be f7 7b fd	bl	0x3e134 <get_real_state>
   0x0007f63e <+86>:	0d 4b	ldr	r3, [pc, #52]	; (0x7f674 <ui_inchar+140>)
   0x0007f640 <+88>:	41 46	mov	r1, r8
   0x0007f642 <+90>:	04 42	tst	r4, r0
   0x0007f644 <+92>:	38 46	mov	r0, r7
   0x0007f646 <+94>:	1a bf	itte	ne
   0x0007f648 <+96>:	ec 58	ldrne	r4, [r5, r3]
   0x0007f64a <+98>:	00 22	movne	r2, #0
   0x0007f64c <+100>:	ec 58	ldreq	r4, [r5, r3]
   0x0007f64e <+102>:	4b 46	mov	r3, r9
   0x0007f650 <+104>:	18 bf	it	ne
   0x0007f652 <+106>:	22 60	strne	r2, [r4, #0]
   0x0007f654 <+108>:	32 46	mov	r2, r6
   0x0007f656 <+110>:	d4 f7 51 fd	bl	0x540fc <mch_inchar>
   0x0007f65a <+114>:	06 46	mov	r6, r0
   0x0007f65c <+116>:	4f f0 ff 30	mov.w	r0, #4294967295
   0x0007f660 <+120>:	d4 f7 ec fe	bl	0x5443c <vim_handle_signal>
   0x0007f664 <+124>:	01 23	movs	r3, #1
   0x0007f666 <+126>:	30 46	mov	r0, r6
   0x0007f668 <+128>:	23 60	str	r3, [r4, #0]
   0x0007f66a <+130>:	bd e8 f8 83	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   0x0007f66e <+134>:	00 bf	nop
   0x0007f670 <+136>:	98 80	strh	r0, [r3, #4]
   0x0007f672 <+138>:	02 00	movs	r2, r0
   0x0007f674 <+140>:	dc 08	lsrs	r4, r3, #3
   0x0007f676 <+142>:	00 00	movs	r0, r0
   0x0007f678 <+144>:	b0 07	lsls	r0, r6, #30
   0x0007f67a <+146>:	00 00	movs	r0, r0
   0x0007f67c <+148>:	f4 05	lsls	r4, r6, #23
   0x0007f67e <+150>:	00 00	movs	r0, r0
End of assembler dump.
Dump of assembler code for function ui_inchar_undo:
   0x0007f56c <+0>:	2d e9 f8 43	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   0x0007f570 <+4>:	07 46	mov	r7, r0
   0x0007f572 <+6>:	1a 4b	ldr	r3, [pc, #104]	; (0x7f5dc <ui_inchar_undo+112>)
   0x0007f574 <+8>:	0e 46	mov	r6, r1
   0x0007f576 <+10>:	0c 46	mov	r4, r1
   0x0007f578 <+12>:	7b 44	add	r3, pc
   0x0007f57a <+14>:	1a 68	ldr	r2, [r3, #0]
   0x0007f57c <+16>:	1a b1	cbz	r2, 0x7f586 <ui_inchar_undo+26>
   0x0007f57e <+18>:	5a 68	ldr	r2, [r3, #4]
   0x0007f580 <+20>:	9c 68	ldr	r4, [r3, #8]
   0x0007f582 <+22>:	14 1b	subs	r4, r2, r4
   0x0007f584 <+24>:	0c 44	add	r4, r1
   0x0007f586 <+26>:	20 46	mov	r0, r4
   0x0007f588 <+28>:	bf f7 76 fd	bl	0x3f078 <alloc>
   0x0007f58c <+32>:	80 46	mov	r8, r0
   0x0007f58e <+34>:	f0 b1	cbz	r0, 0x7f5ce <ui_inchar_undo+98>
   0x0007f590 <+36>:	13 4b	ldr	r3, [pc, #76]	; (0x7f5e0 <ui_inchar_undo+116>)
   0x0007f592 <+38>:	7b 44	add	r3, pc
   0x0007f594 <+40>:	d3 f8 00 90	ldr.w	r9, [r3]
   0x0007f598 <+44>:	b9 f1 00 0f	cmp.w	r9, #0
   0x0007f59c <+48>:	19 d0	beq.n	0x7f5d2 <ui_inchar_undo+102>
   0x0007f59e <+50>:	9d 68	ldr	r5, [r3, #8]
   0x0007f5a0 <+52>:	5b 68	ldr	r3, [r3, #4]
   0x0007f5a2 <+54>:	09 eb 05 01	add.w	r1, r9, r5
   0x0007f5a6 <+58>:	5d 1b	subs	r5, r3, r5
   0x0007f5a8 <+60>:	2a 46	mov	r2, r5
   0x0007f5aa <+62>:	8d f7 dc eb	blx	0xcd64 <memmove@plt+4>
   0x0007f5ae <+66>:	32 46	mov	r2, r6
   0x0007f5b0 <+68>:	39 46	mov	r1, r7
   0x0007f5b2 <+70>:	08 eb 05 00	add.w	r0, r8, r5
   0x0007f5b6 <+74>:	8d f7 d6 eb	blx	0xcd64 <memmove@plt+4>
   0x0007f5ba <+78>:	48 46	mov	r0, r9
   0x0007f5bc <+80>:	bd f7 f2 fe	bl	0x3d3a4 <vim_free>
   0x0007f5c0 <+84>:	08 4b	ldr	r3, [pc, #32]	; (0x7f5e4 <ui_inchar_undo+120>)
   0x0007f5c2 <+86>:	00 22	movs	r2, #0
   0x0007f5c4 <+88>:	7b 44	add	r3, pc
   0x0007f5c6 <+90>:	c3 f8 00 80	str.w	r8, [r3]
   0x0007f5ca <+94>:	5c 60	str	r4, [r3, #4]
   0x0007f5cc <+96>:	9a 60	str	r2, [r3, #8]
   0x0007f5ce <+98>:	bd e8 f8 83	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   0x0007f5d2 <+102>:	32 46	mov	r2, r6
   0x0007f5d4 <+104>:	39 46	mov	r1, r7
   0x0007f5d6 <+106>:	8d f7 c6 eb	blx	0xcd64 <memmove@plt+4>
   0x0007f5da <+110>:	f1 e7	b.n	0x7f5c0 <ui_inchar_undo+84>
   0x0007f5dc <+112>:	dc 22	movs	r2, #220	; 0xdc
   0x0007f5de <+114>:	03 00	movs	r3, r0
   0x0007f5e0 <+116>:	c2 22	movs	r2, #194	; 0xc2
   0x0007f5e2 <+118>:	03 00	movs	r3, r0
   0x0007f5e4 <+120>:	90 22	movs	r2, #144	; 0x90
   0x0007f5e6 <+122>:	03 00	movs	r3, r0
End of assembler dump.
