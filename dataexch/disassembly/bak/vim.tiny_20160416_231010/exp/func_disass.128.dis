GNU gdb (Ubuntu 7.10-1ubuntu2) 7.10
Copyright (C) 2015 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "arm-linux-gnueabihf".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /usr/bin/vim.tiny...Reading symbols from /usr/lib/debug//usr/bin/vim.tiny...done.
done.
Dump of assembler code for function mch_getperm:
   0x00054a9c <+0>:	0c 4b	ldr	r3, [pc, #48]	; (0x54ad0 <mch_getperm+52>)
   0x00054a9e <+2>:	01 46	mov	r1, r0
   0x00054aa0 <+4>:	10 b5	push	{r4, lr}
   0x00054aa2 <+6>:	7b 44	add	r3, pc
   0x00054aa4 <+8>:	0b 4c	ldr	r4, [pc, #44]	; (0x54ad4 <mch_getperm+56>)
   0x00054aa6 <+10>:	9c b0	sub	sp, #112	; 0x70
   0x00054aa8 <+12>:	03 20	movs	r0, #3
   0x00054aaa <+14>:	6a 46	mov	r2, sp
   0x00054aac <+16>:	1c 59	ldr	r4, [r3, r4]
   0x00054aae <+18>:	23 68	ldr	r3, [r4, #0]
   0x00054ab0 <+20>:	1b 93	str	r3, [sp, #108]	; 0x6c
   0x00054ab2 <+22>:	b8 f7 1a ec	blx	0xd2e8 <__xstat64@plt>
   0x00054ab6 <+26>:	30 b9	cbnz	r0, 0x54ac6 <mch_getperm+42>
   0x00054ab8 <+28>:	04 98	ldr	r0, [sp, #16]
   0x00054aba <+30>:	1b 9a	ldr	r2, [sp, #108]	; 0x6c
   0x00054abc <+32>:	23 68	ldr	r3, [r4, #0]
   0x00054abe <+34>:	9a 42	cmp	r2, r3
   0x00054ac0 <+36>:	04 d1	bne.n	0x54acc <mch_getperm+48>
   0x00054ac2 <+38>:	1c b0	add	sp, #112	; 0x70
   0x00054ac4 <+40>:	10 bd	pop	{r4, pc}
   0x00054ac6 <+42>:	4f f0 ff 30	mov.w	r0, #4294967295
   0x00054aca <+46>:	f6 e7	b.n	0x54aba <mch_getperm+30>
   0x00054acc <+48>:	b8 f7 c8 e9	blx	0xce60 <__stack_chk_fail@plt>
   0x00054ad0 <+52>:	f6 2b	cmp	r3, #246	; 0xf6
   0x00054ad2 <+54>:	05 00	movs	r5, r0
   0x00054ad4 <+56>:	78 03	lsls	r0, r7, #13
   0x00054ad6 <+58>:	00 00	movs	r0, r0
End of assembler dump.
Dump of assembler code for function mch_has_exp_wildcard:
   0x00055d50 <+0>:	70 b5	push	{r4, r5, r6, lr}
   0x00055d52 <+2>:	03 78	ldrb	r3, [r0, #0]
   0x00055d54 <+4>:	13 4e	ldr	r6, [pc, #76]	; (0x55da4 <mch_has_exp_wildcard+84>)
   0x00055d56 <+6>:	7e 44	add	r6, pc
   0x00055d58 <+8>:	0b b3	cbz	r3, 0x55d9e <mch_has_exp_wildcard+78>
   0x00055d5a <+10>:	13 4d	ldr	r5, [pc, #76]	; (0x55da8 <mch_has_exp_wildcard+88>)
   0x00055d5c <+12>:	04 46	mov	r4, r0
   0x00055d5e <+14>:	7d 44	add	r5, pc
   0x00055d60 <+16>:	0a e0	b.n	0x55d78 <mch_has_exp_wildcard+40>
   0x00055d62 <+18>:	63 78	ldrb	r3, [r4, #1]
   0x00055d64 <+20>:	63 b1	cbz	r3, 0x55d80 <mch_has_exp_wildcard+48>
   0x00055d66 <+22>:	01 34	adds	r4, #1
   0x00055d68 <+24>:	10 4b	ldr	r3, [pc, #64]	; (0x55dac <mch_has_exp_wildcard+92>)
   0x00055d6a <+26>:	01 20	movs	r0, #1
   0x00055d6c <+28>:	f3 58	ldr	r3, [r6, r3]
   0x00055d6e <+30>:	1b 68	ldr	r3, [r3, #0]
   0x00055d70 <+32>:	63 b9	cbnz	r3, 0x55d8c <mch_has_exp_wildcard+60>
   0x00055d72 <+34>:	04 44	add	r4, r0
   0x00055d74 <+36>:	23 78	ldrb	r3, [r4, #0]
   0x00055d76 <+38>:	93 b1	cbz	r3, 0x55d9e <mch_has_exp_wildcard+78>
   0x00055d78 <+40>:	5c 2b	cmp	r3, #92	; 0x5c
   0x00055d7a <+42>:	19 46	mov	r1, r3
   0x00055d7c <+44>:	28 46	mov	r0, r5
   0x00055d7e <+46>:	f0 d0	beq.n	0x55d62 <mch_has_exp_wildcard+18>
   0x00055d80 <+48>:	e7 f7 1e fb	bl	0x3d3c0 <vim_strchr>
   0x00055d84 <+52>:	00 28	cmp	r0, #0
   0x00055d86 <+54>:	ef d0	beq.n	0x55d68 <mch_has_exp_wildcard+24>
   0x00055d88 <+56>:	01 20	movs	r0, #1
   0x00055d8a <+58>:	70 bd	pop	{r4, r5, r6, pc}
   0x00055d8c <+60>:	08 4b	ldr	r3, [pc, #32]	; (0x55db0 <mch_has_exp_wildcard+96>)
   0x00055d8e <+62>:	20 46	mov	r0, r4
   0x00055d90 <+64>:	f3 58	ldr	r3, [r6, r3]
   0x00055d92 <+66>:	1b 68	ldr	r3, [r3, #0]
   0x00055d94 <+68>:	98 47	blx	r3
   0x00055d96 <+70>:	04 44	add	r4, r0
   0x00055d98 <+72>:	23 78	ldrb	r3, [r4, #0]
   0x00055d9a <+74>:	00 2b	cmp	r3, #0
   0x00055d9c <+76>:	ec d1	bne.n	0x55d78 <mch_has_exp_wildcard+40>
   0x00055d9e <+78>:	00 20	movs	r0, #0
   0x00055da0 <+80>:	70 bd	pop	{r4, r5, r6, pc}
   0x00055da2 <+82>:	00 bf	nop
   0x00055da4 <+84>:	42 19	adds	r2, r0, r5
   0x00055da6 <+86>:	05 00	movs	r5, r0
   0x00055da8 <+88>:	e6 90	str	r0, [sp, #920]	; 0x398
   0x00055daa <+90>:	03 00	movs	r3, r0
   0x00055dac <+92>:	24 05	lsls	r4, r4, #20
   0x00055dae <+94>:	00 00	movs	r0, r0
   0x00055db0 <+96>:	9c 03	lsls	r4, r3, #14
   0x00055db2 <+98>:	00 00	movs	r0, r0
End of assembler dump.
Dump of assembler code for function mch_has_wildcard:
   0x00055db4 <+0>:	70 b5	push	{r4, r5, r6, lr}
   0x00055db6 <+2>:	03 78	ldrb	r3, [r0, #0]
   0x00055db8 <+4>:	15 4e	ldr	r6, [pc, #84]	; (0x55e10 <mch_has_wildcard+92>)
   0x00055dba <+6>:	7e 44	add	r6, pc
   0x00055dbc <+8>:	33 b3	cbz	r3, 0x55e0c <mch_has_wildcard+88>
   0x00055dbe <+10>:	15 4d	ldr	r5, [pc, #84]	; (0x55e14 <mch_has_wildcard+96>)
   0x00055dc0 <+12>:	04 46	mov	r4, r0
   0x00055dc2 <+14>:	7d 44	add	r5, pc
   0x00055dc4 <+16>:	0a e0	b.n	0x55ddc <mch_has_wildcard+40>
   0x00055dc6 <+18>:	63 78	ldrb	r3, [r4, #1]
   0x00055dc8 <+20>:	63 b1	cbz	r3, 0x55de4 <mch_has_wildcard+48>
   0x00055dca <+22>:	01 34	adds	r4, #1
   0x00055dcc <+24>:	12 4b	ldr	r3, [pc, #72]	; (0x55e18 <mch_has_wildcard+100>)
   0x00055dce <+26>:	01 20	movs	r0, #1
   0x00055dd0 <+28>:	f3 58	ldr	r3, [r6, r3]
   0x00055dd2 <+30>:	1b 68	ldr	r3, [r3, #0]
   0x00055dd4 <+32>:	8b b9	cbnz	r3, 0x55dfa <mch_has_wildcard+70>
   0x00055dd6 <+34>:	04 44	add	r4, r0
   0x00055dd8 <+36>:	23 78	ldrb	r3, [r4, #0]
   0x00055dda <+38>:	bb b1	cbz	r3, 0x55e0c <mch_has_wildcard+88>
   0x00055ddc <+40>:	5c 2b	cmp	r3, #92	; 0x5c
   0x00055dde <+42>:	19 46	mov	r1, r3
   0x00055de0 <+44>:	28 46	mov	r0, r5
   0x00055de2 <+46>:	f0 d0	beq.n	0x55dc6 <mch_has_wildcard+18>
   0x00055de4 <+48>:	e7 f7 ec fa	bl	0x3d3c0 <vim_strchr>
   0x00055de8 <+52>:	28 b9	cbnz	r0, 0x55df6 <mch_has_wildcard+66>
   0x00055dea <+54>:	23 78	ldrb	r3, [r4, #0]
   0x00055dec <+56>:	7e 2b	cmp	r3, #126	; 0x7e
   0x00055dee <+58>:	ed d1	bne.n	0x55dcc <mch_has_wildcard+24>
   0x00055df0 <+60>:	63 78	ldrb	r3, [r4, #1]
   0x00055df2 <+62>:	00 2b	cmp	r3, #0
   0x00055df4 <+64>:	ea d0	beq.n	0x55dcc <mch_has_wildcard+24>
   0x00055df6 <+66>:	01 20	movs	r0, #1
   0x00055df8 <+68>:	70 bd	pop	{r4, r5, r6, pc}
   0x00055dfa <+70>:	08 4b	ldr	r3, [pc, #32]	; (0x55e1c <mch_has_wildcard+104>)
   0x00055dfc <+72>:	20 46	mov	r0, r4
   0x00055dfe <+74>:	f3 58	ldr	r3, [r6, r3]
   0x00055e00 <+76>:	1b 68	ldr	r3, [r3, #0]
   0x00055e02 <+78>:	98 47	blx	r3
   0x00055e04 <+80>:	04 44	add	r4, r0
   0x00055e06 <+82>:	23 78	ldrb	r3, [r4, #0]
   0x00055e08 <+84>:	00 2b	cmp	r3, #0
   0x00055e0a <+86>:	e7 d1	bne.n	0x55ddc <mch_has_wildcard+40>
   0x00055e0c <+88>:	00 20	movs	r0, #0
   0x00055e0e <+90>:	70 bd	pop	{r4, r5, r6, pc}
   0x00055e10 <+92>:	de 18	adds	r6, r3, r3
   0x00055e12 <+94>:	05 00	movs	r5, r0
   0x00055e14 <+96>:	8a 90	str	r0, [sp, #552]	; 0x228
   0x00055e16 <+98>:	03 00	movs	r3, r0
   0x00055e18 <+100>:	24 05	lsls	r4, r4, #20
   0x00055e1a <+102>:	00 00	movs	r0, r0
   0x00055e1c <+104>:	9c 03	lsls	r4, r3, #14
   0x00055e1e <+106>:	00 00	movs	r0, r0
End of assembler dump.
Dump of assembler code for function mch_hide:
   0x00054c04 <+0>:	70 47	bx	lr
End of assembler dump.
Dump of assembler code for function mch_inchar:
   0x000540fc <+0>:	2d e9 f0 47	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
   0x00054100 <+4>:	1f 46	mov	r7, r3
   0x00054102 <+6>:	30 4c	ldr	r4, [pc, #192]	; (0x541c4 <mch_inchar+200>)
   0x00054104 <+8>:	82 b0	sub	sp, #8
   0x00054106 <+10>:	df f8 c0 90	ldr.w	r9, [pc, #192]	; 0x541c8 <mch_inchar+204>
   0x0005410a <+14>:	80 46	mov	r8, r0
   0x0005410c <+16>:	7c 44	add	r4, pc
   0x0005410e <+18>:	0e 46	mov	r6, r1
   0x00054110 <+20>:	f9 44	add	r9, pc
   0x00054112 <+22>:	15 46	mov	r5, r2
   0x00054114 <+24>:	23 68	ldr	r3, [r4, #0]
   0x00054116 <+26>:	4f f0 00 0a	mov.w	r10, #0
   0x0005411a <+30>:	33 b1	cbz	r3, 0x5412a <mch_inchar+46>
   0x0005411c <+32>:	c4 f8 00 a0	str.w	r10, [r4]
   0x00054120 <+36>:	29 f0 42 fc	bl	0x7d9a8 <shell_resized>
   0x00054124 <+40>:	23 68	ldr	r3, [r4, #0]
   0x00054126 <+42>:	00 2b	cmp	r3, #0
   0x00054128 <+44>:	f8 d1	bne.n	0x5411c <mch_inchar+32>
   0x0005412a <+46>:	00 2d	cmp	r5, #0
   0x0005412c <+48>:	3a db	blt.n	0x541a4 <mch_inchar+168>
   0x0005412e <+50>:	27 4c	ldr	r4, [pc, #156]	; (0x541cc <mch_inchar+208>)
   0x00054130 <+52>:	7c 44	add	r4, pc
   0x00054132 <+54>:	08 e0	b.n	0x54146 <mch_inchar+74>
   0x00054134 <+56>:	28 46	mov	r0, r5
   0x00054136 <+58>:	ff f7 ef fe	bl	0x53f18 <WaitForChar>
   0x0005413a <+62>:	40 b9	cbnz	r0, 0x5414e <mch_inchar+82>
   0x0005413c <+64>:	23 68	ldr	r3, [r4, #0]
   0x0005413e <+66>:	6b b3	cbz	r3, 0x5419c <mch_inchar+160>
   0x00054140 <+68>:	20 60	str	r0, [r4, #0]
   0x00054142 <+70>:	29 f0 31 fc	bl	0x7d9a8 <shell_resized>
   0x00054146 <+74>:	da f7 33 f8	bl	0x2e1b0 <input_available>
   0x0005414a <+78>:	00 28	cmp	r0, #0
   0x0005414c <+80>:	f2 d0	beq.n	0x54134 <mch_inchar+56>
   0x0005414e <+82>:	20 4c	ldr	r4, [pc, #128]	; (0x541d0 <mch_inchar+212>)
   0x00054150 <+84>:	00 25	movs	r5, #0
   0x00054152 <+86>:	7c 44	add	r4, pc
   0x00054154 <+88>:	23 68	ldr	r3, [r4, #0]
   0x00054156 <+90>:	7b b9	cbnz	r3, 0x54178 <mch_inchar+124>
   0x00054158 <+92>:	da f7 2a f8	bl	0x2e1b0 <input_available>
   0x0005415c <+96>:	80 b1	cbz	r0, 0x54180 <mch_inchar+132>
   0x0005415e <+98>:	38 46	mov	r0, r7
   0x00054160 <+100>:	d8 f7 0e fa	bl	0x2c580 <typebuf_changed>
   0x00054164 <+104>:	31 46	mov	r1, r6
   0x00054166 <+106>:	c8 b9	cbnz	r0, 0x5419c <mch_inchar+160>
   0x00054168 <+108>:	40 46	mov	r0, r8
   0x0005416a <+110>:	2b f0 1b fc	bl	0x7f9a4 <read_from_input_buf>
   0x0005416e <+114>:	00 28	cmp	r0, #0
   0x00054170 <+116>:	f0 dd	ble.n	0x54154 <mch_inchar+88>
   0x00054172 <+118>:	02 b0	add	sp, #8
   0x00054174 <+120>:	bd e8 f0 87	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
   0x00054178 <+124>:	25 60	str	r5, [r4, #0]
   0x0005417a <+126>:	29 f0 15 fc	bl	0x7d9a8 <shell_resized>
   0x0005417e <+130>:	e9 e7	b.n	0x54154 <mch_inchar+88>
   0x00054180 <+132>:	4f f0 ff 30	mov.w	r0, #4294967295
   0x00054184 <+136>:	ff f7 c8 fe	bl	0x53f18 <WaitForChar>
   0x00054188 <+140>:	00 28	cmp	r0, #0
   0x0005418a <+142>:	e8 d1	bne.n	0x5415e <mch_inchar+98>
   0x0005418c <+144>:	23 68	ldr	r3, [r4, #0]
   0x0005418e <+146>:	2b b1	cbz	r3, 0x5419c <mch_inchar+160>
   0x00054190 <+148>:	20 60	str	r0, [r4, #0]
   0x00054192 <+150>:	01 90	str	r0, [sp, #4]
   0x00054194 <+152>:	29 f0 08 fc	bl	0x7d9a8 <shell_resized>
   0x00054198 <+156>:	01 98	ldr	r0, [sp, #4]
   0x0005419a <+158>:	ea e7	b.n	0x54172 <mch_inchar+118>
   0x0005419c <+160>:	00 20	movs	r0, #0
   0x0005419e <+162>:	02 b0	add	sp, #8
   0x000541a0 <+164>:	bd e8 f0 87	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
   0x000541a4 <+168>:	0b 4b	ldr	r3, [pc, #44]	; (0x541d4 <mch_inchar+216>)
   0x000541a6 <+170>:	59 f8 03 30	ldr.w	r3, [r9, r3]
   0x000541aa <+174>:	1c 68	ldr	r4, [r3, #0]
   0x000541ac <+176>:	da f7 00 f8	bl	0x2e1b0 <input_available>
   0x000541b0 <+180>:	00 28	cmp	r0, #0
   0x000541b2 <+182>:	cc d1	bne.n	0x5414e <mch_inchar+82>
   0x000541b4 <+184>:	20 46	mov	r0, r4
   0x000541b6 <+186>:	ff f7 af fe	bl	0x53f18 <WaitForChar>
   0x000541ba <+190>:	00 28	cmp	r0, #0
   0x000541bc <+192>:	c7 d1	bne.n	0x5414e <mch_inchar+82>
   0x000541be <+194>:	d8 f7 d7 fa	bl	0x2c770 <before_blocking>
   0x000541c2 <+198>:	c4 e7	b.n	0x5414e <mch_inchar+82>
   0x000541c4 <+200>:	84 c0	stmia	r0!, {r2, r7}
   0x000541c6 <+202>:	05 00	movs	r5, r0
   0x000541c8 <+204>:	88 35	adds	r5, #136	; 0x88
   0x000541ca <+206>:	05 00	movs	r5, r0
   0x000541cc <+208>:	60 c0	stmia	r0!, {r5, r6}
   0x000541ce <+210>:	05 00	movs	r5, r0
   0x000541d0 <+212>:	3e c0	stmia	r0!, {r1, r2, r3, r4, r5}
   0x000541d2 <+214>:	05 00	movs	r5, r0
   0x000541d4 <+216>:	b0 08	lsrs	r0, r6, #2
   0x000541d6 <+218>:	00 00	movs	r0, r0
End of assembler dump.
Dump of assembler code for function mch_init:
   0x00054408 <+0>:	07 4b	ldr	r3, [pc, #28]	; (0x54428 <mch_init+32>)
   0x0005440a <+2>:	18 20	movs	r0, #24
   0x0005440c <+4>:	07 49	ldr	r1, [pc, #28]	; (0x5442c <mch_init+36>)
   0x0005440e <+6>:	7b 44	add	r3, pc
   0x00054410 <+8>:	07 4a	ldr	r2, [pc, #28]	; (0x54430 <mch_init+40>)
   0x00054412 <+10>:	10 b5	push	{r4, lr}
   0x00054414 <+12>:	50 24	movs	r4, #80	; 0x50
   0x00054416 <+14>:	59 58	ldr	r1, [r3, r1]
   0x00054418 <+16>:	0c 60	str	r4, [r1, #0]
   0x0005441a <+18>:	9b 58	ldr	r3, [r3, r2]
   0x0005441c <+20>:	18 60	str	r0, [r3, #0]
   0x0005441e <+22>:	28 f0 93 fe	bl	0x7d148 <out_flush>
   0x00054422 <+26>:	bd e8 10 40	ldmia.w	sp!, {r4, lr}
   0x00054426 <+30>:	8b e4	b.n	0x53d40 <set_signals>
   0x00054428 <+32>:	8a 32	adds	r2, #138	; 0x8a
   0x0005442a <+34>:	05 00	movs	r5, r0
   0x0005442c <+36>:	fc 07	lsls	r4, r7, #31
   0x0005442e <+38>:	00 00	movs	r0, r0
   0x00054430 <+40>:	c8 08	lsrs	r0, r1, #3
   0x00054432 <+42>:	00 00	movs	r0, r0
End of assembler dump.
Dump of assembler code for function mch_input_isatty:
   0x00054654 <+0>:	08 b5	push	{r3, lr}
   0x00054656 <+2>:	05 4b	ldr	r3, [pc, #20]	; (0x5466c <mch_input_isatty+24>)
   0x00054658 <+4>:	05 4a	ldr	r2, [pc, #20]	; (0x54670 <mch_input_isatty+28>)
   0x0005465a <+6>:	7b 44	add	r3, pc
   0x0005465c <+8>:	9b 58	ldr	r3, [r3, r2]
   0x0005465e <+10>:	18 68	ldr	r0, [r3, #0]
   0x00054660 <+12>:	b8 f7 48 ee	blx	0xd2f4 <isatty@plt>
   0x00054664 <+16>:	00 30	adds	r0, #0
   0x00054666 <+18>:	18 bf	it	ne
   0x00054668 <+20>:	01 20	movne	r0, #1
   0x0005466a <+22>:	08 bd	pop	{r3, pc}
   0x0005466c <+24>:	3e 30	adds	r0, #62	; 0x3e
   0x0005466e <+26>:	05 00	movs	r5, r0
   0x00054670 <+28>:	ec 05	lsls	r4, r5, #23
   0x00054672 <+30>:	00 00	movs	r0, r0
End of assembler dump.
Dump of assembler code for function mch_isFullName:
   0x00054a8c <+0>:	00 78	ldrb	r0, [r0, #0]
   0x00054a8e <+2>:	7e 28	cmp	r0, #126	; 0x7e
   0x00054a90 <+4>:	18 bf	it	ne
   0x00054a92 <+6>:	2f 28	cmpne	r0, #47	; 0x2f
   0x00054a94 <+8>:	0c bf	ite	eq
   0x00054a96 <+10>:	01 20	moveq	r0, #1
   0x00054a98 <+12>:	00 20	movne	r0, #0
   0x00054a9a <+14>:	70 47	bx	lr
End of assembler dump.
Dump of assembler code for function mch_isdir:
   0x0005403c <+0>:	0f 4b	ldr	r3, [pc, #60]	; (0x5407c <mch_isdir+64>)
   0x0005403e <+2>:	01 46	mov	r1, r0
   0x00054040 <+4>:	10 b5	push	{r4, lr}
   0x00054042 <+6>:	7b 44	add	r3, pc
   0x00054044 <+8>:	0e 4c	ldr	r4, [pc, #56]	; (0x54080 <mch_isdir+68>)
   0x00054046 <+10>:	9c b0	sub	sp, #112	; 0x70
   0x00054048 <+12>:	03 20	movs	r0, #3
   0x0005404a <+14>:	6a 46	mov	r2, sp
   0x0005404c <+16>:	1c 59	ldr	r4, [r3, r4]
   0x0005404e <+18>:	23 68	ldr	r3, [r4, #0]
   0x00054050 <+20>:	1b 93	str	r3, [sp, #108]	; 0x6c
   0x00054052 <+22>:	b9 f7 4a e9	blx	0xd2e8 <__xstat64@plt>
   0x00054056 <+26>:	68 b9	cbnz	r0, 0x54074 <mch_isdir+56>
   0x00054058 <+28>:	04 98	ldr	r0, [sp, #16]
   0x0005405a <+30>:	00 f4 70 40	and.w	r0, r0, #61440	; 0xf000
   0x0005405e <+34>:	a0 f5 80 40	sub.w	r0, r0, #16384	; 0x4000
   0x00054062 <+38>:	b0 fa 80 f0	clz	r0, r0
   0x00054066 <+42>:	40 09	lsrs	r0, r0, #5
   0x00054068 <+44>:	1b 9a	ldr	r2, [sp, #108]	; 0x6c
   0x0005406a <+46>:	23 68	ldr	r3, [r4, #0]
   0x0005406c <+48>:	9a 42	cmp	r2, r3
   0x0005406e <+50>:	03 d1	bne.n	0x54078 <mch_isdir+60>
   0x00054070 <+52>:	1c b0	add	sp, #112	; 0x70
   0x00054072 <+54>:	10 bd	pop	{r4, pc}
   0x00054074 <+56>:	00 20	movs	r0, #0
   0x00054076 <+58>:	f7 e7	b.n	0x54068 <mch_isdir+44>
   0x00054078 <+60>:	b8 f7 f2 ee	blx	0xce60 <__stack_chk_fail@plt>
   0x0005407c <+64>:	56 36	adds	r6, #86	; 0x56
   0x0005407e <+66>:	05 00	movs	r5, r0
   0x00054080 <+68>:	78 03	lsls	r0, r7, #13
   0x00054082 <+70>:	00 00	movs	r0, r0
End of assembler dump.
