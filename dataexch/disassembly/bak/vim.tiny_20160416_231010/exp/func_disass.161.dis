GNU gdb (Ubuntu 7.10-1ubuntu2) 7.10
Copyright (C) 2015 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "arm-linux-gnueabihf".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /usr/bin/vim.tiny...Reading symbols from /usr/lib/debug//usr/bin/vim.tiny...done.
done.
Dump of assembler code for function ui_new_shellsize:
   0x0007f6dc <+0>:	06 4b	ldr	r3, [pc, #24]	; (0x7f6f8 <ui_new_shellsize+28>)
   0x0007f6de <+2>:	07 4a	ldr	r2, [pc, #28]	; (0x7f6fc <ui_new_shellsize+32>)
   0x0007f6e0 <+4>:	7b 44	add	r3, pc
   0x0007f6e2 <+6>:	9a 58	ldr	r2, [r3, r2]
   0x0007f6e4 <+8>:	12 68	ldr	r2, [r2, #0]
   0x0007f6e6 <+10>:	1a b1	cbz	r2, 0x7f6f0 <ui_new_shellsize+20>
   0x0007f6e8 <+12>:	05 4a	ldr	r2, [pc, #20]	; (0x7f700 <ui_new_shellsize+36>)
   0x0007f6ea <+14>:	9b 58	ldr	r3, [r3, r2]
   0x0007f6ec <+16>:	1b 68	ldr	r3, [r3, #0]
   0x0007f6ee <+18>:	03 b1	cbz	r3, 0x7f6f2 <ui_new_shellsize+22>
   0x0007f6f0 <+20>:	70 47	bx	lr
   0x0007f6f2 <+22>:	d5 f7 37 bd	b.w	0x55164 <mch_new_shellsize>
   0x0007f6f6 <+26>:	00 bf	nop
   0x0007f6f8 <+28>:	b8 7f	ldrb	r0, [r7, #30]
   0x0007f6fa <+30>:	02 00	movs	r2, r0
   0x0007f6fc <+32>:	2c 07	lsls	r4, r5, #28
   0x0007f6fe <+34>:	00 00	movs	r0, r0
   0x0007f700 <+36>:	70 06	lsls	r0, r6, #25
   0x0007f702 <+38>:	00 00	movs	r0, r0
End of assembler dump.
Dump of assembler code for function ui_set_shellsize:
   0x0007f6d8 <+0>:	d5 f7 24 bd	b.w	0x55124 <mch_set_shellsize>
End of assembler dump.
Dump of assembler code for function ui_suspend:
   0x0007f688 <+0>:	d4 f7 9e be	b.w	0x543c8 <mch_suspend>
End of assembler dump.
Dump of assembler code for function ui_write:
   0x0007f508 <+0>:	14 4b	ldr	r3, [pc, #80]	; (0x7f55c <ui_write+84>)
   0x0007f50a <+2>:	15 4a	ldr	r2, [pc, #84]	; (0x7f560 <ui_write+88>)
   0x0007f50c <+4>:	70 b5	push	{r4, r5, r6, lr}
   0x0007f50e <+6>:	7b 44	add	r3, pc
   0x0007f510 <+8>:	82 b0	sub	sp, #8
   0x0007f512 <+10>:	06 46	mov	r6, r0
   0x0007f514 <+12>:	01 91	str	r1, [sp, #4]
   0x0007f516 <+14>:	9a 58	ldr	r2, [r3, r2]
   0x0007f518 <+16>:	12 68	ldr	r2, [r2, #0]
   0x0007f51a <+18>:	1a b1	cbz	r2, 0x7f524 <ui_write+28>
   0x0007f51c <+20>:	11 4a	ldr	r2, [pc, #68]	; (0x7f564 <ui_write+92>)
   0x0007f51e <+22>:	9a 58	ldr	r2, [r3, r2]
   0x0007f520 <+24>:	12 68	ldr	r2, [r2, #0]
   0x0007f522 <+26>:	52 b1	cbz	r2, 0x7f53a <ui_write+50>
   0x0007f524 <+28>:	10 4a	ldr	r2, [pc, #64]	; (0x7f568 <ui_write+96>)
   0x0007f526 <+30>:	9d 58	ldr	r5, [r3, r2]
   0x0007f528 <+32>:	28 68	ldr	r0, [r5, #0]
   0x0007f52a <+34>:	04 46	mov	r4, r0
   0x0007f52c <+36>:	60 b9	cbnz	r0, 0x7f548 <ui_write+64>
   0x0007f52e <+38>:	30 46	mov	r0, r6
   0x0007f530 <+40>:	01 99	ldr	r1, [sp, #4]
   0x0007f532 <+42>:	d4 f7 c5 fd	bl	0x540c0 <mch_write>
   0x0007f536 <+46>:	2b 68	ldr	r3, [r5, #0]
   0x0007f538 <+48>:	0b b9	cbnz	r3, 0x7f53e <ui_write+54>
   0x0007f53a <+50>:	02 b0	add	sp, #8
   0x0007f53c <+52>:	70 bd	pop	{r4, r5, r6, pc}
   0x0007f53e <+54>:	20 46	mov	r0, r4
   0x0007f540 <+56>:	bd f7 30 ff	bl	0x3d3a4 <vim_free>
   0x0007f544 <+60>:	02 b0	add	sp, #8
   0x0007f546 <+62>:	70 bd	pop	{r4, r5, r6, pc}
   0x0007f548 <+64>:	31 46	mov	r1, r6
   0x0007f54a <+66>:	01 aa	add	r2, sp, #4
   0x0007f54c <+68>:	28 46	mov	r0, r5
   0x0007f54e <+70>:	c3 f7 d5 fe	bl	0x432fc <string_convert>
   0x0007f552 <+74>:	04 46	mov	r4, r0
   0x0007f554 <+76>:	00 28	cmp	r0, #0
   0x0007f556 <+78>:	18 bf	it	ne
   0x0007f558 <+80>:	06 46	movne	r6, r0
   0x0007f55a <+82>:	e8 e7	b.n	0x7f52e <ui_write+38>
   0x0007f55c <+84>:	8a 81	strh	r2, [r1, #12]
   0x0007f55e <+86>:	02 00	movs	r2, r0
   0x0007f560 <+88>:	08 04	lsls	r0, r1, #16
   0x0007f562 <+90>:	00 00	movs	r0, r0
   0x0007f564 <+92>:	d4 05	lsls	r4, r2, #23
   0x0007f566 <+94>:	00 00	movs	r0, r0
   0x0007f568 <+96>:	7c 02	lsls	r4, r7, #9
   0x0007f56a <+98>:	00 00	movs	r0, r0
End of assembler dump.
Dump of assembler code for function vim_is_input_buf_empty:
   0x0007f71c <+0>:	03 4b	ldr	r3, [pc, #12]	; (0x7f72c <vim_is_input_buf_empty+16>)
   0x0007f71e <+2>:	7b 44	add	r3, pc
   0x0007f720 <+4>:	d8 68	ldr	r0, [r3, #12]
   0x0007f722 <+6>:	b0 fa 80 f0	clz	r0, r0
   0x0007f726 <+10>:	40 09	lsrs	r0, r0, #5
   0x0007f728 <+12>:	70 47	bx	lr
   0x0007f72a <+14>:	00 bf	nop
   0x0007f72c <+16>:	36 21	movs	r1, #54	; 0x36
   0x0007f72e <+18>:	03 00	movs	r3, r0
End of assembler dump.
Dump of assembler code for function vim_is_input_buf_full:
   0x0007f708 <+0>:	03 4b	ldr	r3, [pc, #12]	; (0x7f718 <vim_is_input_buf_full+16>)
   0x0007f70a <+2>:	7b 44	add	r3, pc
   0x0007f70c <+4>:	d8 68	ldr	r0, [r3, #12]
   0x0007f70e <+6>:	f9 28	cmp	r0, #249	; 0xf9
   0x0007f710 <+8>:	d4 bf	ite	le
   0x0007f712 <+10>:	00 20	movle	r0, #0
   0x0007f714 <+12>:	01 20	movgt	r0, #1
   0x0007f716 <+14>:	70 47	bx	lr
   0x0007f718 <+16>:	4a 21	movs	r1, #74	; 0x4a
   0x0007f71a <+18>:	03 00	movs	r3, r0
End of assembler dump.
Dump of assembler code for function bufIsChanged:
   0x00081598 <+0>:	08 b5	push	{r3, lr}
   0x0008159a <+2>:	43 6e	ldr	r3, [r0, #100]	; 0x64
   0x0008159c <+4>:	0b b1	cbz	r3, 0x815a2 <bufIsChanged+10>
   0x0008159e <+6>:	01 20	movs	r0, #1
   0x000815a0 <+8>:	08 bd	pop	{r3, pc}
   0x000815a2 <+10>:	01 21	movs	r1, #1
   0x000815a4 <+12>:	d2 f7 28 fa	bl	0x539f8 <file_ff_differs>
   0x000815a8 <+16>:	00 30	adds	r0, #0
   0x000815aa <+18>:	18 bf	it	ne
   0x000815ac <+20>:	01 20	movne	r0, #1
   0x000815ae <+22>:	08 bd	pop	{r3, pc}
End of assembler dump.
Dump of assembler code for function curbufIsChanged:
   0x000815b0 <+0>:	08 b5	push	{r3, lr}
   0x000815b2 <+2>:	08 4b	ldr	r3, [pc, #32]	; (0x815d4 <curbufIsChanged+36>)
   0x000815b4 <+4>:	08 4a	ldr	r2, [pc, #32]	; (0x815d8 <curbufIsChanged+40>)
   0x000815b6 <+6>:	7b 44	add	r3, pc
   0x000815b8 <+8>:	9b 58	ldr	r3, [r3, r2]
   0x000815ba <+10>:	18 68	ldr	r0, [r3, #0]
   0x000815bc <+12>:	43 6e	ldr	r3, [r0, #100]	; 0x64
   0x000815be <+14>:	0b b1	cbz	r3, 0x815c4 <curbufIsChanged+20>
   0x000815c0 <+16>:	01 20	movs	r0, #1
   0x000815c2 <+18>:	08 bd	pop	{r3, pc}
   0x000815c4 <+20>:	01 21	movs	r1, #1
   0x000815c6 <+22>:	d2 f7 17 fa	bl	0x539f8 <file_ff_differs>
   0x000815ca <+26>:	00 30	adds	r0, #0
   0x000815cc <+28>:	18 bf	it	ne
   0x000815ce <+30>:	01 20	movne	r0, #1
   0x000815d0 <+32>:	08 bd	pop	{r3, pc}
   0x000815d2 <+34>:	00 bf	nop
   0x000815d4 <+36>:	e2 60	str	r2, [r4, #12]
   0x000815d6 <+38>:	02 00	movs	r2, r0
   0x000815d8 <+40>:	b0 07	lsls	r0, r6, #30
   0x000815da <+42>:	00 00	movs	r0, r0
End of assembler dump.
Dump of assembler code for function ex_undojoin:
   0x00081240 <+0>:	14 4a	ldr	r2, [pc, #80]	; (0x81294 <ex_undojoin+84>)
   0x00081242 <+2>:	15 4b	ldr	r3, [pc, #84]	; (0x81298 <ex_undojoin+88>)
   0x00081244 <+4>:	7a 44	add	r2, pc
   0x00081246 <+6>:	d3 58	ldr	r3, [r2, r3]
   0x00081248 <+8>:	1b 68	ldr	r3, [r3, #0]
   0x0008124a <+10>:	d3 f8 00 15	ldr.w	r1, [r3, #1280]	; 0x500
   0x0008124e <+14>:	d9 b1	cbz	r1, 0x81288 <ex_undojoin+72>
   0x00081250 <+16>:	d3 f8 04 05	ldr.w	r0, [r3, #1284]	; 0x504
   0x00081254 <+20>:	18 b1	cbz	r0, 0x8125e <ex_undojoin+30>
   0x00081256 <+22>:	11 48	ldr	r0, [pc, #68]	; (0x8129c <ex_undojoin+92>)
   0x00081258 <+24>:	78 44	add	r0, pc
   0x0008125a <+26>:	b7 f7 e5 b8	b.w	0x38428 <emsg>
   0x0008125e <+30>:	d3 f8 0c 05	ldr.w	r0, [r3, #1292]	; 0x50c
   0x00081262 <+34>:	88 b1	cbz	r0, 0x81288 <ex_undojoin+72>
   0x00081264 <+36>:	d3 f8 e4 05	ldr.w	r0, [r3, #1508]	; 0x5e4
   0x00081268 <+40>:	10 b4	push	{r4}
   0x0008126a <+42>:	4f f4 ee 54	mov.w	r4, #7616	; 0x1dc0
   0x0008126e <+46>:	cf f6 fe 74	movt	r4, #65534	; 0xfffe
   0x00081272 <+50>:	a0 42	cmp	r0, r4
   0x00081274 <+52>:	09 d0	beq.n	0x8128a <ex_undojoin+74>
   0x00081276 <+54>:	5d f8 04 4b	ldr.w	r4, [sp], #4
   0x0008127a <+58>:	00 28	cmp	r0, #0
   0x0008127c <+60>:	a2 bf	ittt	ge
   0x0008127e <+62>:	c3 f8 04 15	strge.w	r1, [r3, #1284]	; 0x504
   0x00081282 <+66>:	00 22	movge	r2, #0
   0x00081284 <+68>:	c3 f8 0c 25	strge.w	r2, [r3, #1292]	; 0x50c
   0x00081288 <+72>:	70 47	bx	lr
   0x0008128a <+74>:	05 48	ldr	r0, [pc, #20]	; (0x812a0 <ex_undojoin+96>)
   0x0008128c <+76>:	12 58	ldr	r2, [r2, r0]
   0x0008128e <+78>:	10 68	ldr	r0, [r2, #0]
   0x00081290 <+80>:	f1 e7	b.n	0x81276 <ex_undojoin+54>
   0x00081292 <+82>:	00 bf	nop
   0x00081294 <+84>:	54 64	str	r4, [r2, #68]	; 0x44
   0x00081296 <+86>:	02 00	movs	r2, r0
   0x00081298 <+88>:	b0 07	lsls	r0, r6, #30
   0x0008129a <+90>:	00 00	movs	r0, r0
   0x0008129c <+92>:	e8 fe 00 00	cdp2	0, 14, cr0, cr8, cr0, {0}
   0x000812a0 <+96>:	bc 08	lsrs	r4, r7, #2
   0x000812a2 <+98>:	00 00	movs	r0, r0
End of assembler dump.
