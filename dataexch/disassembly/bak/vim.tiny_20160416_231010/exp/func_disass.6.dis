GNU gdb (Ubuntu 7.10-1ubuntu2) 7.10
Copyright (C) 2015 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "arm-linux-gnueabihf".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /usr/bin/vim.tiny...Reading symbols from /usr/lib/debug//usr/bin/vim.tiny...done.
done.
Dump of assembler code for function in_win_border:
   0x000115b4 <+0>:	11 4b	ldr	r3, [pc, #68]	; (0x115fc <in_win_border+72>)
   0x000115b6 <+2>:	12 4a	ldr	r2, [pc, #72]	; (0x11600 <in_win_border+76>)
   0x000115b8 <+4>:	7b 44	add	r3, pc
   0x000115ba <+6>:	70 b5	push	{r4, r5, r6, lr}
   0x000115bc <+8>:	0e 46	mov	r6, r1
   0x000115be <+10>:	9b 58	ldr	r3, [r3, r2]
   0x000115c0 <+12>:	05 46	mov	r5, r0
   0x000115c2 <+14>:	1c 68	ldr	r4, [r3, #0]
   0x000115c4 <+16>:	2e f0 04 f9	bl	0x3f7d0 <win_col_off>
   0x000115c8 <+20>:	24 1a	subs	r4, r4, r0
   0x000115ca <+22>:	63 1e	subs	r3, r4, #1
   0x000115cc <+24>:	b3 42	cmp	r3, r6
   0x000115ce <+26>:	12 dc	bgt.n	0x115f6 <in_win_border+66>
   0x000115d0 <+28>:	0f d0	beq.n	0x115f2 <in_win_border+62>
   0x000115d2 <+30>:	28 46	mov	r0, r5
   0x000115d4 <+32>:	2e f0 1c f9	bl	0x3f810 <win_col_off2>
   0x000115d8 <+36>:	25 18	adds	r5, r4, r0
   0x000115da <+38>:	00 2d	cmp	r5, #0
   0x000115dc <+40>:	0b dd	ble.n	0x115f6 <in_win_border+66>
   0x000115de <+42>:	30 1b	subs	r0, r6, r4
   0x000115e0 <+44>:	29 46	mov	r1, r5
   0x000115e2 <+46>:	75 f0 5b ff	bl	0x8749c <__aeabi_idivmod>
   0x000115e6 <+50>:	68 1e	subs	r0, r5, #1
   0x000115e8 <+52>:	08 1a	subs	r0, r1, r0
   0x000115ea <+54>:	b0 fa 80 f0	clz	r0, r0
   0x000115ee <+58>:	40 09	lsrs	r0, r0, #5
   0x000115f0 <+60>:	70 bd	pop	{r4, r5, r6, pc}
   0x000115f2 <+62>:	01 20	movs	r0, #1
   0x000115f4 <+64>:	70 bd	pop	{r4, r5, r6, pc}
   0x000115f6 <+66>:	00 20	movs	r0, #0
   0x000115f8 <+68>:	70 bd	pop	{r4, r5, r6, pc}
   0x000115fa <+70>:	00 bf	nop
   0x000115fc <+72>:	e0 60	str	r0, [r4, #12]
   0x000115fe <+74>:	09 00	movs	r1, r1
   0x00011600 <+76>:	fc 07	lsls	r4, r7, #31
   0x00011602 <+78>:	00 00	movs	r0, r0
End of assembler dump.
Dump of assembler code for function init_chartab:
   0x000122d4 <+0>:	03 4b	ldr	r3, [pc, #12]	; (0x122e4 <init_chartab+16>)
   0x000122d6 <+2>:	01 21	movs	r1, #1
   0x000122d8 <+4>:	03 4a	ldr	r2, [pc, #12]	; (0x122e8 <init_chartab+20>)
   0x000122da <+6>:	7b 44	add	r3, pc
   0x000122dc <+8>:	9b 58	ldr	r3, [r3, r2]
   0x000122de <+10>:	18 68	ldr	r0, [r3, #0]
   0x000122e0 <+12>:	ff f7 dc bd	b.w	0x11e9c <buf_init_chartab>
   0x000122e4 <+16>:	be 53	strh	r6, [r7, r6]
   0x000122e6 <+18>:	09 00	movs	r1, r1
   0x000122e8 <+20>:	b0 07	lsls	r0, r6, #30
   0x000122ea <+22>:	00 00	movs	r0, r0
End of assembler dump.
Dump of assembler code for function lbr_chartabsize:
   0x0001168c <+0>:	70 b5	push	{r4, r5, r6, lr}
   0x0001168e <+2>:	14 4c	ldr	r4, [pc, #80]	; (0x116e0 <lbr_chartabsize+84>)
   0x00011690 <+4>:	14 4b	ldr	r3, [pc, #80]	; (0x116e4 <lbr_chartabsize+88>)
   0x00011692 <+6>:	7c 44	add	r4, pc
   0x00011694 <+8>:	e3 58	ldr	r3, [r4, r3]
   0x00011696 <+10>:	1b 68	ldr	r3, [r3, #0]
   0x00011698 <+12>:	d3 f8 c8 50	ldr.w	r5, [r3, #200]	; 0xc8
   0x0001169c <+16>:	dd b9	cbnz	r5, 0x116d6 <lbr_chartabsize+74>
   0x0001169e <+18>:	16 46	mov	r6, r2
   0x000116a0 <+20>:	0a 78	ldrb	r2, [r1, #0]
   0x000116a2 <+22>:	08 46	mov	r0, r1
   0x000116a4 <+24>:	09 2a	cmp	r2, #9
   0x000116a6 <+26>:	03 d0	beq.n	0x116b0 <lbr_chartabsize+36>
   0x000116a8 <+28>:	bd e8 70 40	ldmia.w	sp!, {r4, r5, r6, lr}
   0x000116ac <+32>:	ff f7 40 bd	b.w	0x11130 <ptr2cells>
   0x000116b0 <+36>:	d3 f8 b0 30	ldr.w	r3, [r3, #176]	; 0xb0
   0x000116b4 <+40>:	23 b1	cbz	r3, 0x116c0 <lbr_chartabsize+52>
   0x000116b6 <+42>:	0c 4b	ldr	r3, [pc, #48]	; (0x116e8 <lbr_chartabsize+92>)
   0x000116b8 <+44>:	e3 58	ldr	r3, [r4, r3]
   0x000116ba <+46>:	1b 68	ldr	r3, [r3, #0]
   0x000116bc <+48>:	00 2b	cmp	r3, #0
   0x000116be <+50>:	f3 d0	beq.n	0x116a8 <lbr_chartabsize+28>
   0x000116c0 <+52>:	0a 4b	ldr	r3, [pc, #40]	; (0x116ec <lbr_chartabsize+96>)
   0x000116c2 <+54>:	30 46	mov	r0, r6
   0x000116c4 <+56>:	e3 58	ldr	r3, [r4, r3]
   0x000116c6 <+58>:	1b 68	ldr	r3, [r3, #0]
   0x000116c8 <+60>:	d3 f8 b4 45	ldr.w	r4, [r3, #1460]	; 0x5b4
   0x000116cc <+64>:	21 46	mov	r1, r4
   0x000116ce <+66>:	75 f0 e5 fe	bl	0x8749c <__aeabi_idivmod>
   0x000116d2 <+70>:	60 1a	subs	r0, r4, r1
   0x000116d4 <+72>:	70 bd	pop	{r4, r5, r6, pc}
   0x000116d6 <+74>:	18 46	mov	r0, r3
   0x000116d8 <+76>:	00 23	movs	r3, #0
   0x000116da <+78>:	bd e8 70 40	ldmia.w	sp!, {r4, r5, r6, lr}
   0x000116de <+82>:	91 e7	b.n	0x11604 <win_nolbr_chartabsize>
   0x000116e0 <+84>:	06 60	str	r6, [r0, #0]
   0x000116e2 <+86>:	09 00	movs	r1, r1
   0x000116e4 <+88>:	24 04	lsls	r4, r4, #16
   0x000116e6 <+90>:	00 00	movs	r0, r0
   0x000116e8 <+92>:	8c 03	lsls	r4, r1, #14
   0x000116ea <+94>:	00 00	movs	r0, r0
   0x000116ec <+96>:	b0 07	lsls	r0, r6, #30
   0x000116ee <+98>:	00 00	movs	r0, r0
End of assembler dump.
Dump of assembler code for function lbr_chartabsize_adv:
   0x000116f0 <+0>:	70 b5	push	{r4, r5, r6, lr}
   0x000116f2 <+2>:	0c 46	mov	r4, r1
   0x000116f4 <+4>:	09 68	ldr	r1, [r1, #0]
   0x000116f6 <+6>:	ff f7 c9 ff	bl	0x1168c <lbr_chartabsize>
   0x000116fa <+10>:	0c 4d	ldr	r5, [pc, #48]	; (0x1172c <lbr_chartabsize_adv+60>)
   0x000116fc <+12>:	0c 4b	ldr	r3, [pc, #48]	; (0x11730 <lbr_chartabsize_adv+64>)
   0x000116fe <+14>:	7d 44	add	r5, pc
   0x00011700 <+16>:	eb 58	ldr	r3, [r5, r3]
   0x00011702 <+18>:	1b 68	ldr	r3, [r3, #0]
   0x00011704 <+20>:	06 46	mov	r6, r0
   0x00011706 <+22>:	2b b9	cbnz	r3, 0x11714 <lbr_chartabsize_adv+36>
   0x00011708 <+24>:	22 68	ldr	r2, [r4, #0]
   0x0001170a <+26>:	01 23	movs	r3, #1
   0x0001170c <+28>:	30 46	mov	r0, r6
   0x0001170e <+30>:	13 44	add	r3, r2
   0x00011710 <+32>:	23 60	str	r3, [r4, #0]
   0x00011712 <+34>:	70 bd	pop	{r4, r5, r6, pc}
   0x00011714 <+36>:	07 4b	ldr	r3, [pc, #28]	; (0x11734 <lbr_chartabsize_adv+68>)
   0x00011716 <+38>:	20 68	ldr	r0, [r4, #0]
   0x00011718 <+40>:	eb 58	ldr	r3, [r5, r3]
   0x0001171a <+42>:	1b 68	ldr	r3, [r3, #0]
   0x0001171c <+44>:	98 47	blx	r3
   0x0001171e <+46>:	22 68	ldr	r2, [r4, #0]
   0x00011720 <+48>:	03 46	mov	r3, r0
   0x00011722 <+50>:	30 46	mov	r0, r6
   0x00011724 <+52>:	13 44	add	r3, r2
   0x00011726 <+54>:	23 60	str	r3, [r4, #0]
   0x00011728 <+56>:	70 bd	pop	{r4, r5, r6, pc}
   0x0001172a <+58>:	00 bf	nop
   0x0001172c <+60>:	9a 5f	ldrsh	r2, [r3, r6]
   0x0001172e <+62>:	09 00	movs	r1, r1
   0x00011730 <+64>:	24 05	lsls	r4, r4, #20
   0x00011732 <+66>:	00 00	movs	r0, r0
   0x00011734 <+68>:	9c 03	lsls	r4, r3, #14
   0x00011736 <+70>:	00 00	movs	r0, r0
End of assembler dump.
Dump of assembler code for function linetabsize:
   0x00011764 <+0>:	10 4b	ldr	r3, [pc, #64]	; (0x117a8 <linetabsize+68>)
   0x00011766 <+2>:	11 4a	ldr	r2, [pc, #68]	; (0x117ac <linetabsize+72>)
   0x00011768 <+4>:	7b 44	add	r3, pc
   0x0001176a <+6>:	f0 b5	push	{r4, r5, r6, r7, lr}
   0x0001176c <+8>:	83 b0	sub	sp, #12
   0x0001176e <+10>:	9f 58	ldr	r7, [r3, r2]
   0x00011770 <+12>:	04 78	ldrb	r4, [r0, #0]
   0x00011772 <+14>:	00 90	str	r0, [sp, #0]
   0x00011774 <+16>:	3b 68	ldr	r3, [r7, #0]
   0x00011776 <+18>:	01 93	str	r3, [sp, #4]
   0x00011778 <+20>:	64 b1	cbz	r4, 0x11794 <linetabsize+48>
   0x0001177a <+22>:	05 46	mov	r5, r0
   0x0001177c <+24>:	6e 46	mov	r6, sp
   0x0001177e <+26>:	00 24	movs	r4, #0
   0x00011780 <+28>:	22 46	mov	r2, r4
   0x00011782 <+30>:	31 46	mov	r1, r6
   0x00011784 <+32>:	28 46	mov	r0, r5
   0x00011786 <+34>:	ff f7 b3 ff	bl	0x116f0 <lbr_chartabsize_adv>
   0x0001178a <+38>:	00 9b	ldr	r3, [sp, #0]
   0x0001178c <+40>:	1b 78	ldrb	r3, [r3, #0]
   0x0001178e <+42>:	04 44	add	r4, r0
   0x00011790 <+44>:	00 2b	cmp	r3, #0
   0x00011792 <+46>:	f5 d1	bne.n	0x11780 <linetabsize+28>
   0x00011794 <+48>:	01 9a	ldr	r2, [sp, #4]
   0x00011796 <+50>:	20 46	mov	r0, r4
   0x00011798 <+52>:	3b 68	ldr	r3, [r7, #0]
   0x0001179a <+54>:	9a 42	cmp	r2, r3
   0x0001179c <+56>:	01 d1	bne.n	0x117a2 <linetabsize+62>
   0x0001179e <+58>:	03 b0	add	sp, #12
   0x000117a0 <+60>:	f0 bd	pop	{r4, r5, r6, r7, pc}
   0x000117a2 <+62>:	fb f7 5e eb	blx	0xce60 <__stack_chk_fail@plt>
   0x000117a6 <+66>:	00 bf	nop
   0x000117a8 <+68>:	30 5f	ldrsh	r0, [r6, r4]
   0x000117aa <+70>:	09 00	movs	r1, r1
   0x000117ac <+72>:	78 03	lsls	r0, r7, #13
   0x000117ae <+74>:	00 00	movs	r0, r0
End of assembler dump.
Dump of assembler code for function linetabsize_col:
   0x00011738 <+0>:	70 b5	push	{r4, r5, r6, lr}
   0x0001173a <+2>:	82 b0	sub	sp, #8
   0x0001173c <+4>:	04 46	mov	r4, r0
   0x0001173e <+6>:	01 91	str	r1, [sp, #4]
   0x00011740 <+8>:	0b 78	ldrb	r3, [r1, #0]
   0x00011742 <+10>:	5b b1	cbz	r3, 0x1175c <linetabsize_col+36>
   0x00011744 <+12>:	01 ae	add	r6, sp, #4
   0x00011746 <+14>:	0d 46	mov	r5, r1
   0x00011748 <+16>:	22 46	mov	r2, r4
   0x0001174a <+18>:	31 46	mov	r1, r6
   0x0001174c <+20>:	28 46	mov	r0, r5
   0x0001174e <+22>:	ff f7 cf ff	bl	0x116f0 <lbr_chartabsize_adv>
   0x00011752 <+26>:	01 9b	ldr	r3, [sp, #4]
   0x00011754 <+28>:	1b 78	ldrb	r3, [r3, #0]
   0x00011756 <+30>:	04 44	add	r4, r0
   0x00011758 <+32>:	00 2b	cmp	r3, #0
   0x0001175a <+34>:	f5 d1	bne.n	0x11748 <linetabsize_col+16>
   0x0001175c <+36>:	20 46	mov	r0, r4
   0x0001175e <+38>:	02 b0	add	sp, #8
   0x00011760 <+40>:	70 bd	pop	{r4, r5, r6, pc}
End of assembler dump.
Dump of assembler code for function ptr2cells:
   0x00011130 <+0>:	09 4a	ldr	r2, [pc, #36]	; (0x11158 <ptr2cells+40>)
   0x00011132 <+2>:	0a 4b	ldr	r3, [pc, #40]	; (0x1115c <ptr2cells+44>)
   0x00011134 <+4>:	7a 44	add	r2, pc
   0x00011136 <+6>:	d3 58	ldr	r3, [r2, r3]
   0x00011138 <+8>:	1b 68	ldr	r3, [r3, #0]
   0x0001113a <+10>:	43 b1	cbz	r3, 0x1114e <ptr2cells+30>
   0x0001113c <+12>:	03 78	ldrb	r3, [r0, #0]
   0x0001113e <+14>:	19 06	lsls	r1, r3, #24
   0x00011140 <+16>:	07 d4	bmi.n	0x11152 <ptr2cells+34>
   0x00011142 <+18>:	07 49	ldr	r1, [pc, #28]	; (0x11160 <ptr2cells+48>)
   0x00011144 <+20>:	52 58	ldr	r2, [r2, r1]
   0x00011146 <+22>:	d0 5c	ldrb	r0, [r2, r3]
   0x00011148 <+24>:	00 f0 07 00	and.w	r0, r0, #7
   0x0001114c <+28>:	70 47	bx	lr
   0x0001114e <+30>:	03 78	ldrb	r3, [r0, #0]
   0x00011150 <+32>:	f7 e7	b.n	0x11142 <ptr2cells+18>
   0x00011152 <+34>:	30 f0 57 ba	b.w	0x41604 <utf_ptr2cells>
   0x00011156 <+38>:	00 bf	nop
   0x00011158 <+40>:	64 65	str	r4, [r4, #84]	; 0x54
   0x0001115a <+42>:	09 00	movs	r1, r1
   0x0001115c <+44>:	48 09	lsrs	r0, r1, #5
   0x0001115e <+46>:	00 00	movs	r0, r0
   0x00011160 <+48>:	c0 05	lsls	r0, r0, #23
   0x00011162 <+50>:	00 00	movs	r0, r0
End of assembler dump.
Dump of assembler code for function rem_backslash:
   0x000124f4 <+0>:	03 78	ldrb	r3, [r0, #0]
   0x000124f6 <+2>:	5c 2b	cmp	r3, #92	; 0x5c
   0x000124f8 <+4>:	01 d0	beq.n	0x124fe <rem_backslash+10>
   0x000124fa <+6>:	00 20	movs	r0, #0
   0x000124fc <+8>:	70 47	bx	lr
   0x000124fe <+10>:	40 78	ldrb	r0, [r0, #1]
   0x00012500 <+12>:	00 30	adds	r0, #0
   0x00012502 <+14>:	18 bf	it	ne
   0x00012504 <+16>:	01 20	movne	r0, #1
   0x00012506 <+18>:	70 47	bx	lr
End of assembler dump.
Dump of assembler code for function skipdigits:
   0x00011c40 <+0>:	03 78	ldrb	r3, [r0, #0]
   0x00011c42 <+2>:	30 3b	subs	r3, #48	; 0x30
   0x00011c44 <+4>:	09 2b	cmp	r3, #9
   0x00011c46 <+6>:	04 d8	bhi.n	0x11c52 <skipdigits+18>
   0x00011c48 <+8>:	10 f8 01 3f	ldrb.w	r3, [r0, #1]!
   0x00011c4c <+12>:	30 3b	subs	r3, #48	; 0x30
   0x00011c4e <+14>:	09 2b	cmp	r3, #9
   0x00011c50 <+16>:	fa d9	bls.n	0x11c48 <skipdigits+8>
   0x00011c52 <+18>:	70 47	bx	lr
End of assembler dump.
