GNU gdb (Ubuntu 7.10-1ubuntu2) 7.10
Copyright (C) 2015 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "arm-linux-gnueabihf".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /bin/tar...Reading symbols from /usr/lib/debug//bin/tar...done.
done.
Dump of assembler code for function dumpdir_coder:
   0x000154dc <+0>:	70 b5	push	{r4, r5, r6, lr}
   0x000154de <+2>:	18 46	mov	r0, r3
   0x000154e0 <+4>:	1c 46	mov	r4, r3
   0x000154e2 <+6>:	16 46	mov	r6, r2
   0x000154e4 <+8>:	0d 46	mov	r5, r1
   0x000154e6 <+10>:	02 f0 d3 f8	bl	0x17690 <dumpdir_size>
   0x000154ea <+14>:	29 46	mov	r1, r5
   0x000154ec <+16>:	22 46	mov	r2, r4
   0x000154ee <+18>:	03 46	mov	r3, r0
   0x000154f0 <+20>:	30 46	mov	r0, r6
   0x000154f2 <+22>:	bd e8 70 40	ldmia.w	sp!, {r4, r5, r6, lr}
   0x000154f6 <+26>:	d3 e6	b.n	0x152a0 <xheader_print_n>
End of assembler dump.
Dump of assembler code for function dumpdir_decoder:
   0x00014ccc <+0>:	70 b5	push	{r4, r5, r6, lr}
   0x00014cce <+2>:	05 46	mov	r5, r0
   0x00014cd0 <+4>:	18 46	mov	r0, r3
   0x00014cd2 <+6>:	16 46	mov	r6, r2
   0x00014cd4 <+8>:	1c 46	mov	r4, r3
   0x00014cd6 <+10>:	1a f0 2f fb	bl	0x2f338 <xmalloc>
   0x00014cda <+14>:	31 46	mov	r1, r6
   0x00014cdc <+16>:	22 46	mov	r2, r4
   0x00014cde <+18>:	c5 f8 f4 00	str.w	r0, [r5, #244]	; 0xf4
   0x00014ce2 <+22>:	bd e8 70 40	ldmia.w	sp!, {r4, r5, r6, lr}
   0x00014ce6 <+26>:	f5 f7 43 bf	b.w	0xab70 <memcpy@plt>
End of assembler dump.
Dump of assembler code for function gid_coder:
   0x0001593c <+0>:	30 b5	push	{r4, r5, lr}
   0x0001593e <+2>:	85 b0	sub	sp, #20
   0x00015940 <+4>:	c0 6c	ldr	r0, [r0, #76]	; 0x4c
   0x00015942 <+6>:	4f f0 ff 34	mov.w	r4, #4294967295
   0x00015946 <+10>:	02 92	str	r2, [sp, #8]
   0x00015948 <+12>:	00 25	movs	r5, #0
   0x0001594a <+14>:	0a 46	mov	r2, r1
   0x0001594c <+16>:	cd e9 00 45	strd	r4, r5, [sp]
   0x00015950 <+20>:	00 21	movs	r1, #0
   0x00015952 <+22>:	ff f7 cf ff	bl	0x158f4 <code_signed_num>
   0x00015956 <+26>:	05 b0	add	sp, #20
   0x00015958 <+28>:	30 bd	pop	{r4, r5, pc}
End of assembler dump.
Dump of assembler code for function gid_decoder:
   0x00015684 <+0>:	10 b5	push	{r4, lr}
   0x00015686 <+2>:	84 b0	sub	sp, #16
   0x00015688 <+4>:	04 46	mov	r4, r0
   0x0001568a <+6>:	00 23	movs	r3, #0
   0x0001568c <+8>:	00 91	str	r1, [sp, #0]
   0x0001568e <+10>:	02 a8	add	r0, sp, #8
   0x00015690 <+12>:	11 46	mov	r1, r2
   0x00015692 <+14>:	4f f0 ff 32	mov.w	r2, #4294967295
   0x00015696 <+18>:	ff f7 ab ff	bl	0x155f0 <decode_signed_num>
   0x0001569a <+22>:	08 b1	cbz	r0, 0x156a0 <gid_decoder+28>
   0x0001569c <+24>:	02 9b	ldr	r3, [sp, #8]
   0x0001569e <+26>:	e3 64	str	r3, [r4, #76]	; 0x4c
   0x000156a0 <+28>:	04 b0	add	sp, #16
   0x000156a2 <+30>:	10 bd	pop	{r4, pc}
End of assembler dump.
Dump of assembler code for function gname_coder:
   0x0001544c <+0>:	40 69	ldr	r0, [r0, #20]
   0x0001544e <+2>:	d7 e7	b.n	0x15400 <code_string>
End of assembler dump.
Dump of assembler code for function gname_decoder:
   0x00014d48 <+0>:	14 30	adds	r0, #20
   0x00014d4a <+2>:	11 46	mov	r1, r2
   0x00014d4c <+4>:	ce e7	b.n	0x14cec <decode_string>
End of assembler dump.
Dump of assembler code for function linkpath_coder:
   0x00015448 <+0>:	c0 68	ldr	r0, [r0, #12]
   0x0001544a <+2>:	d9 e7	b.n	0x15400 <code_string>
End of assembler dump.
Dump of assembler code for function linkpath_decoder:
   0x00014d40 <+0>:	0c 30	adds	r0, #12
   0x00014d42 <+2>:	11 46	mov	r1, r2
   0x00014d44 <+4>:	d2 e7	b.n	0x14cec <decode_string>
End of assembler dump.
Dump of assembler code for function locate_handler:
   0x00014dc0 <+0>:	70 b5	push	{r4, r5, r6, lr}
   0x00014dc2 <+2>:	43 f6 00 55	movw	r5, #15616	; 0x3d00
   0x00014dc6 <+6>:	43 f6 94 04	movw	r4, #14484	; 0x3894
   0x00014dca <+10>:	c0 f2 03 05	movt	r5, #3
   0x00014dce <+14>:	c0 f2 03 04	movt	r4, #3
   0x00014dd2 <+18>:	06 46	mov	r6, r0
   0x00014dd4 <+20>:	0a e0	b.n	0x14dec <locate_handler+44>
   0x00014dd6 <+22>:	f6 f7 a4 e8	blx	0xaf20 <strlen@plt+4>
   0x00014dda <+26>:	31 46	mov	r1, r6
   0x00014ddc <+28>:	02 46	mov	r2, r0
   0x00014dde <+30>:	20 46	mov	r0, r4
   0x00014de0 <+32>:	f6 f7 78 ea	blx	0xb2d4 <strncmp@plt>
   0x00014de4 <+36>:	60 b1	cbz	r0, 0x14e00 <locate_handler+64>
   0x00014de6 <+38>:	55 f8 14 4f	ldr.w	r4, [r5, #20]!
   0x00014dea <+42>:	5c b1	cbz	r4, 0x14e04 <locate_handler+68>
   0x00014dec <+44>:	2b 7c	ldrb	r3, [r5, #16]
   0x00014dee <+46>:	20 46	mov	r0, r4
   0x00014df0 <+48>:	31 46	mov	r1, r6
   0x00014df2 <+50>:	00 2b	cmp	r3, #0
   0x00014df4 <+52>:	ef d1	bne.n	0x14dd6 <locate_handler+22>
   0x00014df6 <+54>:	20 46	mov	r0, r4
   0x00014df8 <+56>:	f5 f7 38 ee	blx	0xaa6c <strcmp@plt+4>
   0x00014dfc <+60>:	00 28	cmp	r0, #0
   0x00014dfe <+62>:	f2 d1	bne.n	0x14de6 <locate_handler+38>
   0x00014e00 <+64>:	28 46	mov	r0, r5
   0x00014e02 <+66>:	70 bd	pop	{r4, r5, r6, pc}
   0x00014e04 <+68>:	20 46	mov	r0, r4
   0x00014e06 <+70>:	70 bd	pop	{r4, r5, r6, pc}
End of assembler dump.
