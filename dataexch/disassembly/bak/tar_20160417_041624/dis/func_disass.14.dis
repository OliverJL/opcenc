GNU gdb (Ubuntu 7.10-1ubuntu2) 7.10
Copyright (C) 2015 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "arm-linux-gnueabihf".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /bin/tar...Reading symbols from /usr/lib/debug//bin/tar...done.
done.
Dump of assembler code for function cdb_free:
   0x0002f99c <+0>:	00 68	ldr	r0, [r0, #0]
   0x0002f99e <+2>:	00 28	cmp	r0, #0
   0x0002f9a0 <+4>:	04 db	blt.n	0x2f9ac <cdb_free+16>
   0x0002f9a2 <+6>:	08 b5	push	{r3, lr}
   0x0002f9a4 <+8>:	db f7 a2 ec	blx	0xb2ec <close@plt>
   0x0002f9a8 <+12>:	08 b9	cbnz	r0, 0x2f9ae <cdb_free+18>
   0x0002f9aa <+14>:	08 bd	pop	{r3, pc}
   0x0002f9ac <+16>:	70 47	bx	lr
   0x0002f9ae <+18>:	4b f2 a0 00	movw	r0, #45216	; 0xb0a0
   0x0002f9b2 <+22>:	4b f2 b0 01	movw	r1, #45232	; 0xb0b0
   0x0002f9b6 <+26>:	4b f2 88 03	movw	r3, #45192	; 0xb088
   0x0002f9ba <+30>:	c0 f2 03 00	movt	r0, #3
   0x0002f9be <+34>:	c0 f2 03 01	movt	r1, #3
   0x0002f9c2 <+38>:	41 22	movs	r2, #65	; 0x41
   0x0002f9c4 <+40>:	c0 f2 03 03	movt	r3, #3
   0x0002f9c8 <+44>:	db f7 c0 ec	blx	0xb34c <__assert_fail@plt>
End of assembler dump.
Dump of assembler code for function checkpoint_compile_action:
   0x0000eeb0 <+0>:	70 b5	push	{r4, r5, r6, lr}
   0x0000eeb2 <+2>:	04 46	mov	r4, r0
   0x0000eeb4 <+4>:	03 78	ldrb	r3, [r0, #0]
   0x0000eeb6 <+6>:	82 b0	sub	sp, #8
   0x0000eeb8 <+8>:	2e 2b	cmp	r3, #46	; 0x2e
   0x0000eeba <+10>:	4d d1	bne.n	0xef58 <checkpoint_compile_action+168>
   0x0000eebc <+12>:	43 78	ldrb	r3, [r0, #1]
   0x0000eebe <+14>:	00 2b	cmp	r3, #0
   0x0000eec0 <+16>:	55 d0	beq.n	0xef6e <checkpoint_compile_action+190>
   0x0000eec2 <+18>:	43 f2 a8 31	movw	r1, #13224	; 0x33a8
   0x0000eec6 <+22>:	20 46	mov	r0, r4
   0x0000eec8 <+24>:	c0 f2 03 01	movt	r1, #3
   0x0000eecc <+28>:	fb f7 ce ed	blx	0xaa6c <strcmp@plt+4>
   0x0000eed0 <+32>:	00 28	cmp	r0, #0
   0x0000eed2 <+34>:	51 d0	beq.n	0xef78 <checkpoint_compile_action+200>
   0x0000eed4 <+36>:	43 f2 b0 31	movw	r1, #13232	; 0x33b0
   0x0000eed8 <+40>:	20 46	mov	r0, r4
   0x0000eeda <+42>:	c0 f2 03 01	movt	r1, #3
   0x0000eede <+46>:	fb f7 c6 ed	blx	0xaa6c <strcmp@plt+4>
   0x0000eee2 <+50>:	00 28	cmp	r0, #0
   0x0000eee4 <+52>:	4d d0	beq.n	0xef82 <checkpoint_compile_action+210>
   0x0000eee6 <+54>:	43 f2 b8 31	movw	r1, #13240	; 0x33b8
   0x0000eeea <+58>:	20 46	mov	r0, r4
   0x0000eeec <+60>:	c0 f2 03 01	movt	r1, #3
   0x0000eef0 <+64>:	05 22	movs	r2, #5
   0x0000eef2 <+66>:	fc f7 f0 e9	blx	0xb2d4 <strncmp@plt>
   0x0000eef6 <+70>:	00 28	cmp	r0, #0
   0x0000eef8 <+72>:	47 d0	beq.n	0xef8a <checkpoint_compile_action+218>
   0x0000eefa <+74>:	43 f2 c0 31	movw	r1, #13248	; 0x33c0
   0x0000eefe <+78>:	20 46	mov	r0, r4
   0x0000ef00 <+80>:	c0 f2 03 01	movt	r1, #3
   0x0000ef04 <+84>:	05 22	movs	r2, #5
   0x0000ef06 <+86>:	fc f7 e6 e9	blx	0xb2d4 <strncmp@plt>
   0x0000ef0a <+90>:	00 28	cmp	r0, #0
   0x0000ef0c <+92>:	47 d0	beq.n	0xef9e <checkpoint_compile_action+238>
   0x0000ef0e <+94>:	43 f2 c8 31	movw	r1, #13256	; 0x33c8
   0x0000ef12 <+98>:	20 46	mov	r0, r4
   0x0000ef14 <+100>:	c0 f2 03 01	movt	r1, #3
   0x0000ef18 <+104>:	07 22	movs	r2, #7
   0x0000ef1a <+106>:	fc f7 dc e9	blx	0xb2d4 <strncmp@plt>
   0x0000ef1e <+110>:	00 28	cmp	r0, #0
   0x0000ef20 <+112>:	3f d0	beq.n	0xefa2 <checkpoint_compile_action+242>
   0x0000ef22 <+114>:	43 f2 d0 31	movw	r1, #13264	; 0x33d0
   0x0000ef26 <+118>:	20 46	mov	r0, r4
   0x0000ef28 <+120>:	c0 f2 03 01	movt	r1, #3
   0x0000ef2c <+124>:	06 22	movs	r2, #6
   0x0000ef2e <+126>:	fc f7 d2 e9	blx	0xb2d4 <strncmp@plt>
   0x0000ef32 <+130>:	05 46	mov	r5, r0
   0x0000ef34 <+132>:	00 28	cmp	r0, #0
   0x0000ef36 <+134>:	4d d1	bne.n	0xefd4 <checkpoint_compile_action+292>
   0x0000ef38 <+136>:	a0 1d	adds	r0, r4, #6
   0x0000ef3a <+138>:	01 a9	add	r1, sp, #4
   0x0000ef3c <+140>:	0a 22	movs	r2, #10
   0x0000ef3e <+142>:	fb f7 e8 ef	blx	0xaf10 <strtoul@plt>
   0x0000ef42 <+146>:	01 9b	ldr	r3, [sp, #4]
   0x0000ef44 <+148>:	1b 78	ldrb	r3, [r3, #0]
   0x0000ef46 <+150>:	06 46	mov	r6, r0
   0x0000ef48 <+152>:	00 2b	cmp	r3, #0
   0x0000ef4a <+154>:	33 d1	bne.n	0xefb4 <checkpoint_compile_action+260>
   0x0000ef4c <+156>:	04 20	movs	r0, #4
   0x0000ef4e <+158>:	ff f7 21 ff	bl	0xed94 <alloc_action>
   0x0000ef52 <+162>:	86 60	str	r6, [r0, #8]
   0x0000ef54 <+164>:	02 b0	add	sp, #8
   0x0000ef56 <+166>:	70 bd	pop	{r4, r5, r6, pc}
   0x0000ef58 <+168>:	64 2b	cmp	r3, #100	; 0x64
   0x0000ef5a <+170>:	b2 d1	bne.n	0xeec2 <checkpoint_compile_action+18>
   0x0000ef5c <+172>:	43 78	ldrb	r3, [r0, #1]
   0x0000ef5e <+174>:	6f 2b	cmp	r3, #111	; 0x6f
   0x0000ef60 <+176>:	af d1	bne.n	0xeec2 <checkpoint_compile_action+18>
   0x0000ef62 <+178>:	83 78	ldrb	r3, [r0, #2]
   0x0000ef64 <+180>:	74 2b	cmp	r3, #116	; 0x74
   0x0000ef66 <+182>:	ac d1	bne.n	0xeec2 <checkpoint_compile_action+18>
   0x0000ef68 <+184>:	c3 78	ldrb	r3, [r0, #3]
   0x0000ef6a <+186>:	00 2b	cmp	r3, #0
   0x0000ef6c <+188>:	a9 d1	bne.n	0xeec2 <checkpoint_compile_action+18>
   0x0000ef6e <+190>:	00 20	movs	r0, #0
   0x0000ef70 <+192>:	ff f7 10 ff	bl	0xed94 <alloc_action>
   0x0000ef74 <+196>:	02 b0	add	sp, #8
   0x0000ef76 <+198>:	70 bd	pop	{r4, r5, r6, pc}
   0x0000ef78 <+200>:	01 20	movs	r0, #1
   0x0000ef7a <+202>:	ff f7 0b ff	bl	0xed94 <alloc_action>
   0x0000ef7e <+206>:	02 b0	add	sp, #8
   0x0000ef80 <+208>:	70 bd	pop	{r4, r5, r6, pc}
   0x0000ef82 <+210>:	02 20	movs	r0, #2
   0x0000ef84 <+212>:	ff f7 06 ff	bl	0xed94 <alloc_action>
   0x0000ef88 <+216>:	f4 e7	b.n	0xef74 <checkpoint_compile_action+196>
   0x0000ef8a <+218>:	02 20	movs	r0, #2
   0x0000ef8c <+220>:	ff f7 02 ff	bl	0xed94 <alloc_action>
   0x0000ef90 <+224>:	05 46	mov	r5, r0
   0x0000ef92 <+226>:	60 1d	adds	r0, r4, #5
   0x0000ef94 <+228>:	ff f7 dc fe	bl	0xed50 <copy_string_unquote>
   0x0000ef98 <+232>:	a8 60	str	r0, [r5, #8]
   0x0000ef9a <+234>:	02 b0	add	sp, #8
   0x0000ef9c <+236>:	70 bd	pop	{r4, r5, r6, pc}
   0x0000ef9e <+238>:	05 20	movs	r0, #5
   0x0000efa0 <+240>:	f4 e7	b.n	0xef8c <checkpoint_compile_action+220>
   0x0000efa2 <+242>:	03 20	movs	r0, #3
   0x0000efa4 <+244>:	ff f7 f6 fe	bl	0xed94 <alloc_action>
   0x0000efa8 <+248>:	05 46	mov	r5, r0
   0x0000efaa <+250>:	e0 1d	adds	r0, r4, #7
   0x0000efac <+252>:	ff f7 d0 fe	bl	0xed50 <copy_string_unquote>
   0x0000efb0 <+256>:	a8 60	str	r0, [r5, #8]
   0x0000efb2 <+258>:	df e7	b.n	0xef74 <checkpoint_compile_action+196>
   0x0000efb4 <+260>:	05 22	movs	r2, #5
   0x0000efb6 <+262>:	43 f2 d8 31	movw	r1, #13272	; 0x33d8
   0x0000efba <+266>:	28 46	mov	r0, r5
   0x0000efbc <+268>:	c0 f2 03 01	movt	r1, #3
   0x0000efc0 <+272>:	fb f7 2a ee	blx	0xac18 <dcgettext@plt>
   0x0000efc4 <+276>:	29 46	mov	r1, r5
   0x0000efc6 <+278>:	23 46	mov	r3, r4
   0x0000efc8 <+280>:	02 46	mov	r2, r0
   0x0000efca <+282>:	28 46	mov	r0, r5
   0x0000efcc <+284>:	fb f7 f8 ee	blx	0xadc0 <error@plt+4>
   0x0000efd0 <+288>:	03 f0 1c ff	bl	0x12e0c <fatal_exit>
   0x0000efd4 <+292>:	05 22	movs	r2, #5
   0x0000efd6 <+294>:	43 f2 f0 31	movw	r1, #13296	; 0x33f0
   0x0000efda <+298>:	00 20	movs	r0, #0
   0x0000efdc <+300>:	c0 f2 03 01	movt	r1, #3
   0x0000efe0 <+304>:	fb f7 1a ee	blx	0xac18 <dcgettext@plt>
   0x0000efe4 <+308>:	23 46	mov	r3, r4
   0x0000efe6 <+310>:	02 46	mov	r2, r0
   0x0000efe8 <+312>:	00 20	movs	r0, #0
   0x0000efea <+314>:	01 46	mov	r1, r0
   0x0000efec <+316>:	fb f7 e8 ee	blx	0xadc0 <error@plt+4>
   0x0000eff0 <+320>:	03 f0 0c ff	bl	0x12e0c <fatal_exit>
End of assembler dump.
Dump of assembler code for function checkpoint_finish_compile:
   0x0000eff4 <+0>:	46 f2 ec 23	movw	r3, #25324	; 0x62ec
   0x0000eff8 <+4>:	c0 f2 04 03	movt	r3, #4
   0x0000effc <+8>:	1a 68	ldr	r2, [r3, #0]
   0x0000effe <+10>:	32 b1	cbz	r2, 0xf00e <checkpoint_finish_compile+26>
   0x0000f000 <+12>:	45 f6 f8 03	movw	r3, #22776	; 0x58f8
   0x0000f004 <+16>:	c0 f2 04 03	movt	r3, #4
   0x0000f008 <+20>:	5b 68	ldr	r3, [r3, #4]
   0x0000f00a <+22>:	53 b1	cbz	r3, 0xf022 <checkpoint_finish_compile+46>
   0x0000f00c <+24>:	70 47	bx	lr
   0x0000f00e <+26>:	45 f6 f8 02	movw	r2, #22776	; 0x58f8
   0x0000f012 <+30>:	c0 f2 04 02	movt	r2, #4
   0x0000f016 <+34>:	52 68	ldr	r2, [r2, #4]
   0x0000f018 <+36>:	00 2a	cmp	r2, #0
   0x0000f01a <+38>:	f7 d0	beq.n	0xf00c <checkpoint_finish_compile+24>
   0x0000f01c <+40>:	0a 22	movs	r2, #10
   0x0000f01e <+42>:	1a 60	str	r2, [r3, #0]
   0x0000f020 <+44>:	70 47	bx	lr
   0x0000f022 <+46>:	43 f2 b0 30	movw	r0, #13232	; 0x33b0
   0x0000f026 <+50>:	c0 f2 03 00	movt	r0, #3
   0x0000f02a <+54>:	ff f7 41 bf	b.w	0xeeb0 <checkpoint_compile_action>
End of assembler dump.
Dump of assembler code for function checkpoint_run:
   0x0000f030 <+0>:	2d e9 f8 43	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   0x0000f034 <+4>:	46 f2 ec 23	movw	r3, #25324	; 0x62ec
   0x0000f038 <+8>:	c0 f2 04 03	movt	r3, #4
   0x0000f03c <+12>:	19 68	ldr	r1, [r3, #0]
   0x0000f03e <+14>:	51 b1	cbz	r1, 0xf056 <checkpoint_run+38>
   0x0000f040 <+16>:	45 f6 f8 05	movw	r5, #22776	; 0x58f8
   0x0000f044 <+20>:	c0 f2 04 05	movt	r5, #4
   0x0000f048 <+24>:	07 46	mov	r7, r0
   0x0000f04a <+26>:	ab 68	ldr	r3, [r5, #8]
   0x0000f04c <+28>:	58 1c	adds	r0, r3, #1
   0x0000f04e <+30>:	a8 60	str	r0, [r5, #8]
   0x0000f050 <+32>:	23 f0 5c f8	bl	0x3210c <__aeabi_uidivmod>
   0x0000f054 <+36>:	09 b1	cbz	r1, 0xf05a <checkpoint_run+42>
   0x0000f056 <+38>:	bd e8 f8 83	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   0x0000f05a <+42>:	6c 68	ldr	r4, [r5, #4]
   0x0000f05c <+44>:	00 2c	cmp	r4, #0
   0x0000f05e <+46>:	fa d0	beq.n	0xf056 <checkpoint_run+38>
   0x0000f060 <+48>:	46 f2 98 29	movw	r9, #25240	; 0x6298
   0x0000f064 <+52>:	c0 f2 04 09	movt	r9, #4
   0x0000f068 <+56>:	0e 46	mov	r6, r1
   0x0000f06a <+58>:	63 68	ldr	r3, [r4, #4]
   0x0000f06c <+60>:	05 2b	cmp	r3, #5
   0x0000f06e <+62>:	0b d8	bhi.n	0xf088 <checkpoint_run+88>
   0x0000f070 <+64>:	df e8 03 f0	tbb	[pc, r3]
   0x0000f074 <+68>:	3f 53	strh	r7, [r7, r4]
   0x0000f076 <+70>:	2a 18	adds	r2, r5, r0
   0x0000f078 <+72>:	14 03	lsls	r4, r2, #12
   0x0000f07a <+74>:	d9 f8 00 30	ldr.w	r3, [r9]
   0x0000f07e <+78>:	a0 68	ldr	r0, [r4, #8]
   0x0000f080 <+80>:	aa 68	ldr	r2, [r5, #8]
   0x0000f082 <+82>:	19 68	ldr	r1, [r3, #0]
   0x0000f084 <+84>:	10 f0 b0 fa	bl	0x1f5e8 <sys_exec_checkpoint_script>
   0x0000f088 <+88>:	24 68	ldr	r4, [r4, #0]
   0x0000f08a <+90>:	00 2c	cmp	r4, #0
   0x0000f08c <+92>:	ed d1	bne.n	0xf06a <checkpoint_run+58>
   0x0000f08e <+94>:	00 2e	cmp	r6, #0
   0x0000f090 <+96>:	e1 d0	beq.n	0xf056 <checkpoint_run+38>
   0x0000f092 <+98>:	30 46	mov	r0, r6
   0x0000f094 <+100>:	bd e8 f8 43	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   0x0000f098 <+104>:	fc f7 1c b8	b.w	0xb0d4 <fclose@plt>
   0x0000f09c <+108>:	a0 68	ldr	r0, [r4, #8]
   0x0000f09e <+110>:	fb f7 b0 ed	blx	0xac00 <sleep@plt>
   0x0000f0a2 <+114>:	f1 e7	b.n	0xf088 <checkpoint_run+88>
   0x0000f0a4 <+116>:	00 2e	cmp	r6, #0
   0x0000f0a6 <+118>:	67 d0	beq.n	0xf178 <checkpoint_run+328>
   0x0000f0a8 <+120>:	aa 68	ldr	r2, [r5, #8]
   0x0000f0aa <+122>:	39 46	mov	r1, r7
   0x0000f0ac <+124>:	a0 68	ldr	r0, [r4, #8]
   0x0000f0ae <+126>:	ff f7 87 fe	bl	0xedc0 <expand_checkpoint_string>
   0x0000f0b2 <+130>:	31 46	mov	r1, r6
   0x0000f0b4 <+132>:	80 46	mov	r8, r0
   0x0000f0b6 <+134>:	fc f7 08 e9	blx	0xb2c8 <fputs@plt>
   0x0000f0ba <+138>:	30 46	mov	r0, r6
   0x0000f0bc <+140>:	fb f7 0c ee	blx	0xacd8 <fflush_unlocked@plt>
   0x0000f0c0 <+144>:	40 46	mov	r0, r8
   0x0000f0c2 <+146>:	fb f7 2c ed	blx	0xab1c <free>
   0x0000f0c6 <+150>:	df e7	b.n	0xf088 <checkpoint_run+88>
   0x0000f0c8 <+152>:	a0 68	ldr	r0, [r4, #8]
   0x0000f0ca <+154>:	00 28	cmp	r0, #0
   0x0000f0cc <+156>:	33 d0	beq.n	0xf136 <checkpoint_run+262>
   0x0000f0ce <+158>:	39 46	mov	r1, r7
   0x0000f0d0 <+160>:	aa 68	ldr	r2, [r5, #8]
   0x0000f0d2 <+162>:	ff f7 75 fe	bl	0xedc0 <expand_checkpoint_string>
   0x0000f0d6 <+166>:	44 f2 74 62	movw	r2, #18036	; 0x4674
   0x0000f0da <+170>:	c0 f2 03 02	movt	r2, #3
   0x0000f0de <+174>:	80 46	mov	r8, r0
   0x0000f0e0 <+176>:	00 20	movs	r0, #0
   0x0000f0e2 <+178>:	01 46	mov	r1, r0
   0x0000f0e4 <+180>:	43 46	mov	r3, r8
   0x0000f0e6 <+182>:	fb f7 6c ee	blx	0xadc0 <error@plt+4>
   0x0000f0ea <+186>:	40 46	mov	r0, r8
   0x0000f0ec <+188>:	fb f7 16 ed	blx	0xab1c <free>
   0x0000f0f0 <+192>:	ca e7	b.n	0xf088 <checkpoint_run+88>
   0x0000f0f2 <+194>:	46 f2 50 08	movw	r8, #24656	; 0x6050
   0x0000f0f6 <+198>:	c0 f2 04 08	movt	r8, #4
   0x0000f0fa <+202>:	d8 f8 00 00	ldr.w	r0, [r8]
   0x0000f0fe <+206>:	43 69	ldr	r3, [r0, #20]
   0x0000f100 <+208>:	82 69	ldr	r2, [r0, #24]
   0x0000f102 <+210>:	93 42	cmp	r3, r2
   0x0000f104 <+212>:	3f bf	itttt	cc
   0x0000f106 <+214>:	59 1c	addcc	r1, r3, #1
   0x0000f108 <+216>:	41 61	strcc	r1, [r0, #20]
   0x0000f10a <+218>:	2e 22	movcc	r2, #46	; 0x2e
   0x0000f10c <+220>:	1a 70	strbcc	r2, [r3, #0]
   0x0000f10e <+222>:	41 d2	bcs.n	0xf194 <checkpoint_run+356>
   0x0000f110 <+224>:	d8 f8 00 00	ldr.w	r0, [r8]
   0x0000f114 <+228>:	fb f7 e0 ed	blx	0xacd8 <fflush_unlocked@plt>
   0x0000f118 <+232>:	b6 e7	b.n	0xf088 <checkpoint_run+88>
   0x0000f11a <+234>:	f6 b1	cbz	r6, 0xf15a <checkpoint_run+298>
   0x0000f11c <+236>:	73 69	ldr	r3, [r6, #20]
   0x0000f11e <+238>:	b2 69	ldr	r2, [r6, #24]
   0x0000f120 <+240>:	93 42	cmp	r3, r2
   0x0000f122 <+242>:	3f bf	itttt	cc
   0x0000f124 <+244>:	59 1c	addcc	r1, r3, #1
   0x0000f126 <+246>:	71 61	strcc	r1, [r6, #20]
   0x0000f128 <+248>:	07 22	movcc	r2, #7
   0x0000f12a <+250>:	1a 70	strbcc	r2, [r3, #0]
   0x0000f12c <+252>:	36 d2	bcs.n	0xf19c <checkpoint_run+364>
   0x0000f12e <+254>:	30 46	mov	r0, r6
   0x0000f130 <+256>:	fb f7 d2 ed	blx	0xacd8 <fflush_unlocked@plt>
   0x0000f134 <+260>:	a8 e7	b.n	0xf088 <checkpoint_run+88>
   0x0000f136 <+262>:	3f b1	cbz	r7, 0xf148 <checkpoint_run+280>
   0x0000f138 <+264>:	43 f2 10 41	movw	r1, #13328	; 0x3410
   0x0000f13c <+268>:	05 22	movs	r2, #5
   0x0000f13e <+270>:	c0 f2 03 01	movt	r1, #3
   0x0000f142 <+274>:	fb f7 6a ed	blx	0xac18 <dcgettext@plt>
   0x0000f146 <+278>:	c2 e7	b.n	0xf0ce <checkpoint_run+158>
   0x0000f148 <+280>:	43 f2 24 41	movw	r1, #13348	; 0x3424
   0x0000f14c <+284>:	38 46	mov	r0, r7
   0x0000f14e <+286>:	c0 f2 03 01	movt	r1, #3
   0x0000f152 <+290>:	05 22	movs	r2, #5
   0x0000f154 <+292>:	fb f7 60 ed	blx	0xac18 <dcgettext@plt>
   0x0000f158 <+296>:	b9 e7	b.n	0xf0ce <checkpoint_run+158>
   0x0000f15a <+298>:	42 f6 04 70	movw	r0, #12036	; 0x2f04
   0x0000f15e <+302>:	43 f6 ec 21	movw	r1, #15084	; 0x3aec
   0x0000f162 <+306>:	c0 f2 03 00	movt	r0, #3
   0x0000f166 <+310>:	c0 f2 03 01	movt	r1, #3
   0x0000f16a <+314>:	fc f7 64 e8	blx	0xb234 <fopen64@plt>
   0x0000f16e <+318>:	06 46	mov	r6, r0
   0x0000f170 <+320>:	00 28	cmp	r0, #0
   0x0000f172 <+322>:	d3 d1	bne.n	0xf11c <checkpoint_run+236>
   0x0000f174 <+324>:	00 26	movs	r6, #0
   0x0000f176 <+326>:	87 e7	b.n	0xf088 <checkpoint_run+88>
   0x0000f178 <+328>:	42 f6 04 70	movw	r0, #12036	; 0x2f04
   0x0000f17c <+332>:	43 f6 ec 21	movw	r1, #15084	; 0x3aec
   0x0000f180 <+336>:	c0 f2 03 00	movt	r0, #3
   0x0000f184 <+340>:	c0 f2 03 01	movt	r1, #3
   0x0000f188 <+344>:	fc f7 54 e8	blx	0xb234 <fopen64@plt>
   0x0000f18c <+348>:	06 46	mov	r6, r0
   0x0000f18e <+350>:	00 28	cmp	r0, #0
   0x0000f190 <+352>:	f0 d0	beq.n	0xf174 <checkpoint_run+324>
   0x0000f192 <+354>:	89 e7	b.n	0xf0a8 <checkpoint_run+120>
   0x0000f194 <+356>:	2e 21	movs	r1, #46	; 0x2e
   0x0000f196 <+358>:	fb f7 e0 ef	blx	0xb158 <__overflow@plt+4>
   0x0000f19a <+362>:	b9 e7	b.n	0xf110 <checkpoint_run+224>
   0x0000f19c <+364>:	30 46	mov	r0, r6
   0x0000f19e <+366>:	07 21	movs	r1, #7
   0x0000f1a0 <+368>:	fb f7 da ef	blx	0xb158 <__overflow@plt+4>
   0x0000f1a4 <+372>:	c3 e7	b.n	0xf12e <checkpoint_run+254>
End of assembler dump.
Dump of assembler code for function alloc_action:
   0x0000ed94 <+0>:	10 b5	push	{r4, lr}
   0x0000ed96 <+2>:	04 46	mov	r4, r0
   0x0000ed98 <+4>:	0c 20	movs	r0, #12
   0x0000ed9a <+6>:	20 f0 63 fb	bl	0x2f464 <xzalloc>
   0x0000ed9e <+10>:	45 f6 f8 03	movw	r3, #22776	; 0x58f8
   0x0000eda2 <+14>:	c0 f2 04 03	movt	r3, #4
   0x0000eda6 <+18>:	19 68	ldr	r1, [r3, #0]
   0x0000eda8 <+20>:	02 46	mov	r2, r0
   0x0000edaa <+22>:	21 b1	cbz	r1, 0xedb6 <alloc_action+34>
   0x0000edac <+24>:	08 60	str	r0, [r1, #0]
   0x0000edae <+26>:	10 46	mov	r0, r2
   0x0000edb0 <+28>:	1a 60	str	r2, [r3, #0]
   0x0000edb2 <+30>:	54 60	str	r4, [r2, #4]
   0x0000edb4 <+32>:	10 bd	pop	{r4, pc}
   0x0000edb6 <+34>:	58 60	str	r0, [r3, #4]
   0x0000edb8 <+36>:	10 46	mov	r0, r2
   0x0000edba <+38>:	1a 60	str	r2, [r3, #0]
   0x0000edbc <+40>:	54 60	str	r4, [r2, #4]
   0x0000edbe <+42>:	10 bd	pop	{r4, pc}
End of assembler dump.
Dump of assembler code for function copy_string_unquote:
   0x0000ed50 <+0>:	38 b5	push	{r3, r4, r5, lr}
   0x0000ed52 <+2>:	20 f0 a5 fb	bl	0x2f4a0 <xstrdup>
   0x0000ed56 <+6>:	04 46	mov	r4, r0
   0x0000ed58 <+8>:	fc f7 e2 e8	blx	0xaf20 <strlen@plt+4>
   0x0000ed5c <+12>:	23 78	ldrb	r3, [r4, #0]
   0x0000ed5e <+14>:	22 2b	cmp	r3, #34	; 0x22
   0x0000ed60 <+16>:	18 bf	it	ne
   0x0000ed62 <+18>:	27 2b	cmpne	r3, #39	; 0x27
   0x0000ed64 <+20>:	04 d1	bne.n	0xed70 <copy_string_unquote+32>
   0x0000ed66 <+22>:	22 18	adds	r2, r4, r0
   0x0000ed68 <+24>:	12 f8 01 2c	ldrb.w	r2, [r2, #-1]
   0x0000ed6c <+28>:	9a 42	cmp	r2, r3
   0x0000ed6e <+30>:	04 d0	beq.n	0xed7a <copy_string_unquote+42>
   0x0000ed70 <+32>:	20 46	mov	r0, r4
   0x0000ed72 <+34>:	0b f0 d5 fe	bl	0x1ab20 <unquote_string>
   0x0000ed76 <+38>:	20 46	mov	r0, r4
   0x0000ed78 <+40>:	38 bd	pop	{r3, r4, r5, pc}
   0x0000ed7a <+42>:	85 1e	subs	r5, r0, #2
   0x0000ed7c <+44>:	61 1c	adds	r1, r4, #1
   0x0000ed7e <+46>:	20 46	mov	r0, r4
   0x0000ed80 <+48>:	2a 46	mov	r2, r5
   0x0000ed82 <+50>:	fb f7 b8 ee	blx	0xaaf4 <memmove@plt>
   0x0000ed86 <+54>:	00 23	movs	r3, #0
   0x0000ed88 <+56>:	20 46	mov	r0, r4
   0x0000ed8a <+58>:	63 55	strb	r3, [r4, r5]
   0x0000ed8c <+60>:	0b f0 c8 fe	bl	0x1ab20 <unquote_string>
   0x0000ed90 <+64>:	20 46	mov	r0, r4
   0x0000ed92 <+66>:	38 bd	pop	{r3, r4, r5, pc}
End of assembler dump.
Dump of assembler code for function expand_checkpoint_string:
   0x0000edc0 <+0>:	2d e9 f0 47	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, lr}
   0x0000edc4 <+4>:	45 f2 70 76	movw	r6, #22384	; 0x5770
   0x0000edc8 <+8>:	c0 f2 04 06	movt	r6, #4
   0x0000edcc <+12>:	88 b0	sub	sp, #32
   0x0000edce <+14>:	04 46	mov	r4, r0
   0x0000edd0 <+16>:	15 46	mov	r5, r2
   0x0000edd2 <+18>:	33 68	ldr	r3, [r6, #0]
   0x0000edd4 <+20>:	07 93	str	r3, [sp, #28]
   0x0000edd6 <+22>:	00 29	cmp	r1, #0
   0x0000edd8 <+24>:	5e d0	beq.n	0xee98 <expand_checkpoint_string+216>
   0x0000edda <+26>:	46 f6 48 21	movw	r1, #27208	; 0x6a48
   0x0000edde <+30>:	00 20	movs	r0, #0
   0x0000ede0 <+32>:	c0 f2 03 01	movt	r1, #3
   0x0000ede4 <+36>:	05 22	movs	r2, #5
   0x0000ede6 <+38>:	fb f7 18 ef	blx	0xac18 <dcgettext@plt>
   0x0000edea <+42>:	07 46	mov	r7, r0
   0x0000edec <+44>:	38 46	mov	r0, r7
   0x0000edee <+46>:	fc f7 98 e8	blx	0xaf20 <strlen@plt+4>
   0x0000edf2 <+50>:	00 21	movs	r1, #0
   0x0000edf4 <+52>:	01 aa	add	r2, sp, #4
   0x0000edf6 <+54>:	82 46	mov	r10, r0
   0x0000edf8 <+56>:	28 46	mov	r0, r5
   0x0000edfa <+58>:	1c f0 f9 ff	bl	0x2bdf0 <umaxtostr>
   0x0000edfe <+62>:	aa f1 02 0a	sub.w	r10, r10, #2
   0x0000ee02 <+66>:	80 46	mov	r8, r0
   0x0000ee04 <+68>:	fc f7 8c e8	blx	0xaf20 <strlen@plt+4>
   0x0000ee08 <+72>:	81 46	mov	r9, r0
   0x0000ee0a <+74>:	20 46	mov	r0, r4
   0x0000ee0c <+76>:	fc f7 88 e8	blx	0xaf20 <strlen@plt+4>
   0x0000ee10 <+80>:	a9 f1 02 09	sub.w	r9, r9, #2
   0x0000ee14 <+84>:	05 46	mov	r5, r0
   0x0000ee16 <+86>:	20 46	mov	r0, r4
   0x0000ee18 <+88>:	08 e0	b.n	0xee2c <expand_checkpoint_string+108>
   0x0000ee1a <+90>:	43 78	ldrb	r3, [r0, #1]
   0x0000ee1c <+92>:	73 2b	cmp	r3, #115	; 0x73
   0x0000ee1e <+94>:	08 bf	it	eq
   0x0000ee20 <+96>:	55 44	addeq	r5, r10
   0x0000ee22 <+98>:	02 d0	beq.n	0xee2a <expand_checkpoint_string+106>
   0x0000ee24 <+100>:	75 2b	cmp	r3, #117	; 0x75
   0x0000ee26 <+102>:	08 bf	it	eq
   0x0000ee28 <+104>:	4d 44	addeq	r5, r9
   0x0000ee2a <+106>:	01 30	adds	r0, #1
   0x0000ee2c <+108>:	25 21	movs	r1, #37	; 0x25
   0x0000ee2e <+110>:	fc f7 7e e8	blx	0xaf2c <strchr@plt>
   0x0000ee32 <+114>:	00 28	cmp	r0, #0
   0x0000ee34 <+116>:	f1 d1	bne.n	0xee1a <expand_checkpoint_string+90>
   0x0000ee36 <+118>:	68 1c	adds	r0, r5, #1
   0x0000ee38 <+120>:	20 f0 7e fa	bl	0x2f338 <xmalloc>
   0x0000ee3c <+124>:	05 46	mov	r5, r0
   0x0000ee3e <+126>:	02 46	mov	r2, r0
   0x0000ee40 <+128>:	23 78	ldrb	r3, [r4, #0]
   0x0000ee42 <+130>:	9b b1	cbz	r3, 0xee6c <expand_checkpoint_string+172>
   0x0000ee44 <+132>:	25 2b	cmp	r3, #37	; 0x25
   0x0000ee46 <+134>:	1e bf	ittt	ne
   0x0000ee48 <+136>:	13 70	strbne	r3, [r2, #0]
   0x0000ee4a <+138>:	01 34	addne	r4, #1
   0x0000ee4c <+140>:	01 32	addne	r2, #1
   0x0000ee4e <+142>:	f7 d1	bne.n	0xee40 <expand_checkpoint_string+128>
   0x0000ee50 <+144>:	61 78	ldrb	r1, [r4, #1]
   0x0000ee52 <+146>:	73 29	cmp	r1, #115	; 0x73
   0x0000ee54 <+148>:	1a d0	beq.n	0xee8c <expand_checkpoint_string+204>
   0x0000ee56 <+150>:	75 29	cmp	r1, #117	; 0x75
   0x0000ee58 <+152>:	11 d1	bne.n	0xee7e <expand_checkpoint_string+190>
   0x0000ee5a <+154>:	10 46	mov	r0, r2
   0x0000ee5c <+156>:	41 46	mov	r1, r8
   0x0000ee5e <+158>:	fb f7 d6 ee	blx	0xac0c <stpcpy@plt>
   0x0000ee62 <+162>:	02 46	mov	r2, r0
   0x0000ee64 <+164>:	02 34	adds	r4, #2
   0x0000ee66 <+166>:	23 78	ldrb	r3, [r4, #0]
   0x0000ee68 <+168>:	00 2b	cmp	r3, #0
   0x0000ee6a <+170>:	eb d1	bne.n	0xee44 <expand_checkpoint_string+132>
   0x0000ee6c <+172>:	07 9c	ldr	r4, [sp, #28]
   0x0000ee6e <+174>:	28 46	mov	r0, r5
   0x0000ee70 <+176>:	31 68	ldr	r1, [r6, #0]
   0x0000ee72 <+178>:	13 70	strb	r3, [r2, #0]
   0x0000ee74 <+180>:	8c 42	cmp	r4, r1
   0x0000ee76 <+182>:	19 d1	bne.n	0xeeac <expand_checkpoint_string+236>
   0x0000ee78 <+184>:	08 b0	add	sp, #32
   0x0000ee7a <+186>:	bd e8 f0 87	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, pc}
   0x0000ee7e <+190>:	11 46	mov	r1, r2
   0x0000ee80 <+192>:	01 f8 02 3b	strb.w	r3, [r1], #2
   0x0000ee84 <+196>:	63 78	ldrb	r3, [r4, #1]
   0x0000ee86 <+198>:	53 70	strb	r3, [r2, #1]
   0x0000ee88 <+200>:	0a 46	mov	r2, r1
   0x0000ee8a <+202>:	eb e7	b.n	0xee64 <expand_checkpoint_string+164>
   0x0000ee8c <+204>:	10 46	mov	r0, r2
   0x0000ee8e <+206>:	39 46	mov	r1, r7
   0x0000ee90 <+208>:	fb f7 bc ee	blx	0xac0c <stpcpy@plt>
   0x0000ee94 <+212>:	02 46	mov	r2, r0
   0x0000ee96 <+214>:	e5 e7	b.n	0xee64 <expand_checkpoint_string+164>
   0x0000ee98 <+216>:	08 46	mov	r0, r1
   0x0000ee9a <+218>:	05 22	movs	r2, #5
   0x0000ee9c <+220>:	42 f6 34 51	movw	r1, #11572	; 0x2d34
   0x0000eea0 <+224>:	c0 f2 03 01	movt	r1, #3
   0x0000eea4 <+228>:	fb f7 b8 ee	blx	0xac18 <dcgettext@plt>
   0x0000eea8 <+232>:	07 46	mov	r7, r0
   0x0000eeaa <+234>:	9f e7	b.n	0xedec <expand_checkpoint_string+44>
   0x0000eeac <+236>:	fb f7 ba ee	blx	0xac24 <__stack_chk_fail@plt>
End of assembler dump.
Dump of assembler code for function dup_cloexec:
   0x00030d48 <+0>:	40 f2 06 41	movw	r1, #1030	; 0x406
   0x00030d4c <+4>:	00 22	movs	r2, #0
   0x00030d4e <+6>:	fe f7 3b bf	b.w	0x2fbc8 <rpl_fcntl>
End of assembler dump.
Dump of assembler code for function set_cloexec_flag:
   0x00030d04 <+0>:	38 b5	push	{r3, r4, r5, lr}
   0x00030d06 <+2>:	00 22	movs	r2, #0
   0x00030d08 <+4>:	0c 46	mov	r4, r1
   0x00030d0a <+6>:	01 21	movs	r1, #1
   0x00030d0c <+8>:	05 46	mov	r5, r0
   0x00030d0e <+10>:	fe f7 5b ff	bl	0x2fbc8 <rpl_fcntl>
   0x00030d12 <+14>:	00 28	cmp	r0, #0
   0x00030d14 <+16>:	14 db	blt.n	0x30d40 <set_cloexec_flag+60>
   0x00030d16 <+18>:	40 f0 01 02	orr.w	r2, r0, #1
   0x00030d1a <+22>:	5c b1	cbz	r4, 0x30d34 <set_cloexec_flag+48>
   0x00030d1c <+24>:	82 42	cmp	r2, r0
   0x00030d1e <+26>:	0d d0	beq.n	0x30d3c <set_cloexec_flag+56>
   0x00030d20 <+28>:	28 46	mov	r0, r5
   0x00030d22 <+30>:	02 21	movs	r1, #2
   0x00030d24 <+32>:	fe f7 50 ff	bl	0x2fbc8 <rpl_fcntl>
   0x00030d28 <+36>:	01 30	adds	r0, #1
   0x00030d2a <+38>:	4f f0 ff 30	mov.w	r0, #4294967295
   0x00030d2e <+42>:	18 bf	it	ne
   0x00030d30 <+44>:	00 20	movne	r0, #0
   0x00030d32 <+46>:	38 bd	pop	{r3, r4, r5, pc}
   0x00030d34 <+48>:	20 f0 01 02	bic.w	r2, r0, #1
   0x00030d38 <+52>:	82 42	cmp	r2, r0
   0x00030d3a <+54>:	f1 d1	bne.n	0x30d20 <set_cloexec_flag+28>
   0x00030d3c <+56>:	00 20	movs	r0, #0
   0x00030d3e <+58>:	38 bd	pop	{r3, r4, r5, pc}
   0x00030d40 <+60>:	4f f0 ff 30	mov.w	r0, #4294967295
   0x00030d44 <+64>:	38 bd	pop	{r3, r4, r5, pc}
End of assembler dump.
