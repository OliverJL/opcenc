GNU gdb (Ubuntu 7.10-1ubuntu2) 7.10
Copyright (C) 2015 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "arm-linux-gnueabihf".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /bin/tar...Reading symbols from /usr/lib/debug//bin/tar...done.
done.
Dump of assembler code for function xheader_xattr_free:
   0x0001607c <+0>:	f8 b5	push	{r3, r4, r5, r6, r7, lr}
   0x0001607e <+2>:	00 24	movs	r4, #0
   0x00016080 <+4>:	06 46	mov	r6, r0
   0x00016082 <+6>:	0f 46	mov	r7, r1
   0x00016084 <+8>:	25 46	mov	r5, r4
   0x00016086 <+10>:	51 b1	cbz	r1, 0x1609e <xheader_xattr_free+34>
   0x00016088 <+12>:	30 59	ldr	r0, [r6, r4]
   0x0001608a <+14>:	01 35	adds	r5, #1
   0x0001608c <+16>:	f4 f7 46 ed	blx	0xab1c <free>
   0x00016090 <+20>:	33 19	adds	r3, r6, r4
   0x00016092 <+22>:	0c 34	adds	r4, #12
   0x00016094 <+24>:	58 68	ldr	r0, [r3, #4]
   0x00016096 <+26>:	f4 f7 42 ed	blx	0xab1c <free>
   0x0001609a <+30>:	bd 42	cmp	r5, r7
   0x0001609c <+32>:	f4 d1	bne.n	0x16088 <xheader_xattr_free+12>
   0x0001609e <+34>:	30 46	mov	r0, r6
   0x000160a0 <+36>:	bd e8 f8 40	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   0x000160a4 <+40>:	f4 f7 38 bd	b.w	0xab18 <free@plt>
End of assembler dump.
Dump of assembler code for function xheader_xattr_init:
   0x00016064 <+0>:	00 23	movs	r3, #0
   0x00016066 <+2>:	c0 f8 d4 30	str.w	r3, [r0, #212]	; 0xd4
   0x0001606a <+6>:	c0 f8 d0 30	str.w	r3, [r0, #208]	; 0xd0
   0x0001606e <+10>:	c3 61	str	r3, [r0, #28]
   0x00016070 <+12>:	03 62	str	r3, [r0, #32]
   0x00016072 <+14>:	43 62	str	r3, [r0, #36]	; 0x24
   0x00016074 <+16>:	83 62	str	r3, [r0, #40]	; 0x28
   0x00016076 <+18>:	83 61	str	r3, [r0, #24]
   0x00016078 <+20>:	70 47	bx	lr
End of assembler dump.
Dump of assembler code for function xheader_xhdr_name:
   0x00015fbc <+0>:	38 b5	push	{r3, r4, r5, lr}
   0x00015fbe <+2>:	45 f6 4c 14	movw	r4, #22860	; 0x594c
   0x00015fc2 <+6>:	c0 f2 04 04	movt	r4, #4
   0x00015fc6 <+10>:	05 46	mov	r5, r0
   0x00015fc8 <+12>:	21 69	ldr	r1, [r4, #16]
   0x00015fca <+14>:	29 b1	cbz	r1, 0x15fd8 <xheader_xhdr_name+28>
   0x00015fcc <+16>:	28 46	mov	r0, r5
   0x00015fce <+18>:	00 22	movs	r2, #0
   0x00015fd0 <+20>:	bd e8 38 40	ldmia.w	sp!, {r3, r4, r5, lr}
   0x00015fd4 <+24>:	ff f7 1c bf	b.w	0x15e10 <xheader_format_name>
   0x00015fd8 <+28>:	04 f1 10 00	add.w	r0, r4, #16
   0x00015fdc <+32>:	44 f2 64 21	movw	r1, #16996	; 0x4264
   0x00015fe0 <+36>:	c0 f2 03 01	movt	r1, #3
   0x00015fe4 <+40>:	04 f0 90 fd	bl	0x1ab08 <assign_string>
   0x00015fe8 <+44>:	21 69	ldr	r1, [r4, #16]
   0x00015fea <+46>:	28 46	mov	r0, r5
   0x00015fec <+48>:	00 22	movs	r2, #0
   0x00015fee <+50>:	bd e8 38 40	ldmia.w	sp!, {r3, r4, r5, lr}
   0x00015ff2 <+54>:	ff f7 0d bf	b.w	0x15e10 <xheader_format_name>
End of assembler dump.
Dump of assembler code for function assign_time_option:
   0x000151b8 <+0>:	70 b5	push	{r4, r5, r6, lr}
   0x000151ba <+2>:	84 b0	sub	sp, #16
   0x000151bc <+4>:	00 23	movs	r3, #0
   0x000151be <+6>:	14 46	mov	r4, r2
   0x000151c0 <+8>:	06 46	mov	r6, r0
   0x000151c2 <+10>:	0d 46	mov	r5, r1
   0x000151c4 <+12>:	02 a8	add	r0, sp, #8
   0x000151c6 <+14>:	11 46	mov	r1, r2
   0x000151c8 <+16>:	01 aa	add	r2, sp, #4
   0x000151ca <+18>:	05 f0 69 ff	bl	0x1b0a0 <decode_timespec>
   0x000151ce <+22>:	03 9b	ldr	r3, [sp, #12]
   0x000151d0 <+24>:	00 2b	cmp	r3, #0
   0x000151d2 <+26>:	02 db	blt.n	0x151da <assign_time_option+34>
   0x000151d4 <+28>:	01 9b	ldr	r3, [sp, #4]
   0x000151d6 <+30>:	1b 78	ldrb	r3, [r3, #0]
   0x000151d8 <+32>:	a3 b1	cbz	r3, 0x15204 <assign_time_option+76>
   0x000151da <+34>:	05 22	movs	r2, #5
   0x000151dc <+36>:	44 f2 58 11	movw	r1, #16728	; 0x4158
   0x000151e0 <+40>:	00 20	movs	r0, #0
   0x000151e2 <+42>:	c0 f2 03 01	movt	r1, #3
   0x000151e6 <+46>:	f5 f7 18 ed	blx	0xac18 <dcgettext@plt>
   0x000151ea <+50>:	02 46	mov	r2, r0
   0x000151ec <+52>:	00 20	movs	r0, #0
   0x000151ee <+54>:	01 46	mov	r1, r0
   0x000151f0 <+56>:	f5 f7 e6 ed	blx	0xadc0 <error@plt+4>
   0x000151f4 <+60>:	45 f6 ac 63	movw	r3, #24236	; 0x5eac
   0x000151f8 <+64>:	c0 f2 04 03	movt	r3, #4
   0x000151fc <+68>:	02 22	movs	r2, #2
   0x000151fe <+70>:	1a 60	str	r2, [r3, #0]
   0x00015200 <+72>:	04 b0	add	sp, #16
   0x00015202 <+74>:	70 bd	pop	{r4, r5, r6, pc}
   0x00015204 <+76>:	02 9b	ldr	r3, [sp, #8]
   0x00015206 <+78>:	30 46	mov	r0, r6
   0x00015208 <+80>:	21 46	mov	r1, r4
   0x0001520a <+82>:	2b 60	str	r3, [r5, #0]
   0x0001520c <+84>:	05 f0 7c fc	bl	0x1ab08 <assign_string>
   0x00015210 <+88>:	04 b0	add	sp, #16
   0x00015212 <+90>:	70 bd	pop	{r4, r5, r6, pc}
End of assembler dump.
Dump of assembler code for function atime_coder:
   0x00015ad8 <+0>:	f0 b5	push	{r4, r5, r6, r7, lr}
   0x00015ada <+2>:	98 30	adds	r0, #152	; 0x98
   0x00015adc <+4>:	45 f2 70 74	movw	r4, #22384	; 0x5770
   0x00015ae0 <+8>:	c0 f2 04 04	movt	r4, #4
   0x00015ae4 <+12>:	8d b0	sub	sp, #52	; 0x34
   0x00015ae6 <+14>:	0d 46	mov	r5, r1
   0x00015ae8 <+16>:	27 68	ldr	r7, [r4, #0]
   0x00015aea <+18>:	01 ab	add	r3, sp, #4
   0x00015aec <+20>:	03 c8	ldmia	r0, {r0, r1}
   0x00015aee <+22>:	16 46	mov	r6, r2
   0x00015af0 <+24>:	03 aa	add	r2, sp, #12
   0x00015af2 <+26>:	0b 97	str	r7, [sp, #44]	; 0x2c
   0x00015af4 <+28>:	83 e8 03 00	stmia.w	r3, {r0, r1}
   0x00015af8 <+32>:	05 f0 98 fa	bl	0x1b02c <code_timespec>
   0x00015afc <+36>:	29 46	mov	r1, r5
   0x00015afe <+38>:	02 46	mov	r2, r0
   0x00015b00 <+40>:	30 46	mov	r0, r6
   0x00015b02 <+42>:	ff f7 6f fc	bl	0x153e4 <xheader_print>
   0x00015b06 <+46>:	0b 9a	ldr	r2, [sp, #44]	; 0x2c
   0x00015b08 <+48>:	23 68	ldr	r3, [r4, #0]
   0x00015b0a <+50>:	9a 42	cmp	r2, r3
   0x00015b0c <+52>:	01 d1	bne.n	0x15b12 <atime_coder+58>
   0x00015b0e <+54>:	0d b0	add	sp, #52	; 0x34
   0x00015b10 <+56>:	f0 bd	pop	{r4, r5, r6, r7, pc}
   0x00015b12 <+58>:	f5 f7 88 e8	blx	0xac24 <__stack_chk_fail@plt>
End of assembler dump.
Dump of assembler code for function atime_decoder:
   0x000155cc <+0>:	30 b5	push	{r4, r5, lr}
   0x000155ce <+2>:	83 b0	sub	sp, #12
   0x000155d0 <+4>:	0b 46	mov	r3, r1
   0x000155d2 <+6>:	05 46	mov	r5, r0
   0x000155d4 <+8>:	11 46	mov	r1, r2
   0x000155d6 <+10>:	68 46	mov	r0, sp
   0x000155d8 <+12>:	1a 46	mov	r2, r3
   0x000155da <+14>:	ff f7 8d ff	bl	0x154f8 <decode_time>
   0x000155de <+18>:	28 b1	cbz	r0, 0x155ec <atime_decoder+32>
   0x000155e0 <+20>:	9d e8 03 00	ldmia.w	sp, {r0, r1}
   0x000155e4 <+24>:	05 f1 98 03	add.w	r3, r5, #152	; 0x98
   0x000155e8 <+28>:	83 e8 03 00	stmia.w	r3, {r0, r1}
   0x000155ec <+32>:	03 b0	add	sp, #12
   0x000155ee <+34>:	30 bd	pop	{r4, r5, pc}
End of assembler dump.
Dump of assembler code for function code_signed_num:
   0x000158f4 <+0>:	2d e9 f0 4d	stmdb	sp!, {r4, r5, r6, r7, r8, r10, r11, lr}
   0x000158f8 <+4>:	8c b0	sub	sp, #48	; 0x30
   0x000158fa <+6>:	45 f2 70 76	movw	r6, #22384	; 0x5770
   0x000158fe <+10>:	c0 f2 04 06	movt	r6, #4
   0x00015902 <+14>:	dd e9 14 ab	ldrd	r10, r11, [sp, #80]	; 0x50
   0x00015906 <+18>:	00 23	movs	r3, #0
   0x00015908 <+20>:	34 68	ldr	r4, [r6, #0]
   0x0001590a <+22>:	90 46	mov	r8, r2
   0x0001590c <+24>:	05 ad	add	r5, sp, #20
   0x0001590e <+26>:	00 22	movs	r2, #0
   0x00015910 <+28>:	cd e9 00 ab	strd	r10, r11, [sp]
   0x00015914 <+32>:	02 95	str	r5, [sp, #8]
   0x00015916 <+34>:	16 9f	ldr	r7, [sp, #88]	; 0x58
   0x00015918 <+36>:	0b 94	str	r4, [sp, #44]	; 0x2c
   0x0001591a <+38>:	05 f0 d5 fa	bl	0x1aec8 <sysinttostr>
   0x0001591e <+42>:	41 46	mov	r1, r8
   0x00015920 <+44>:	02 46	mov	r2, r0
   0x00015922 <+46>:	38 46	mov	r0, r7
   0x00015924 <+48>:	ff f7 5e fd	bl	0x153e4 <xheader_print>
   0x00015928 <+52>:	0b 9a	ldr	r2, [sp, #44]	; 0x2c
   0x0001592a <+54>:	33 68	ldr	r3, [r6, #0]
   0x0001592c <+56>:	9a 42	cmp	r2, r3
   0x0001592e <+58>:	02 d1	bne.n	0x15936 <code_signed_num+66>
   0x00015930 <+60>:	0c b0	add	sp, #48	; 0x30
   0x00015932 <+62>:	bd e8 f0 8d	ldmia.w	sp!, {r4, r5, r6, r7, r8, r10, r11, pc}
   0x00015936 <+66>:	f5 f7 76 e9	blx	0xac24 <__stack_chk_fail@plt>
End of assembler dump.
Dump of assembler code for function code_string:
   0x00015400 <+0>:	70 b5	push	{r4, r5, r6, lr}
   0x00015402 <+2>:	82 b0	sub	sp, #8
   0x00015404 <+4>:	04 46	mov	r4, r0
   0x00015406 <+6>:	0d 46	mov	r5, r1
   0x00015408 <+8>:	16 46	mov	r6, r2
   0x0001540a <+10>:	01 46	mov	r1, r0
   0x0001540c <+12>:	01 aa	add	r2, sp, #4
   0x0001540e <+14>:	01 20	movs	r0, #1
   0x00015410 <+16>:	0d f0 1e f9	bl	0x22650 <utf8_convert>
   0x00015414 <+20>:	48 b1	cbz	r0, 0x1542a <code_string+42>
   0x00015416 <+22>:	01 9a	ldr	r2, [sp, #4]
   0x00015418 <+24>:	30 46	mov	r0, r6
   0x0001541a <+26>:	29 46	mov	r1, r5
   0x0001541c <+28>:	ff f7 e2 ff	bl	0x153e4 <xheader_print>
   0x00015420 <+32>:	01 98	ldr	r0, [sp, #4]
   0x00015422 <+34>:	f5 f7 7c eb	blx	0xab1c <free>
   0x00015426 <+38>:	02 b0	add	sp, #8
   0x00015428 <+40>:	70 bd	pop	{r4, r5, r6, pc}
   0x0001542a <+42>:	20 46	mov	r0, r4
   0x0001542c <+44>:	1a f0 38 f8	bl	0x2f4a0 <xstrdup>
   0x00015430 <+48>:	02 46	mov	r2, r0
   0x00015432 <+50>:	01 90	str	r0, [sp, #4]
   0x00015434 <+52>:	f0 e7	b.n	0x15418 <code_string+24>
End of assembler dump.
Dump of assembler code for function ctime_coder:
   0x00015b18 <+0>:	f0 b5	push	{r4, r5, r6, r7, lr}
   0x00015b1a <+2>:	a8 30	adds	r0, #168	; 0xa8
   0x00015b1c <+4>:	45 f2 70 74	movw	r4, #22384	; 0x5770
   0x00015b20 <+8>:	c0 f2 04 04	movt	r4, #4
   0x00015b24 <+12>:	8d b0	sub	sp, #52	; 0x34
   0x00015b26 <+14>:	0d 46	mov	r5, r1
   0x00015b28 <+16>:	27 68	ldr	r7, [r4, #0]
   0x00015b2a <+18>:	01 ab	add	r3, sp, #4
   0x00015b2c <+20>:	03 c8	ldmia	r0, {r0, r1}
   0x00015b2e <+22>:	16 46	mov	r6, r2
   0x00015b30 <+24>:	03 aa	add	r2, sp, #12
   0x00015b32 <+26>:	0b 97	str	r7, [sp, #44]	; 0x2c
   0x00015b34 <+28>:	83 e8 03 00	stmia.w	r3, {r0, r1}
   0x00015b38 <+32>:	05 f0 78 fa	bl	0x1b02c <code_timespec>
   0x00015b3c <+36>:	29 46	mov	r1, r5
   0x00015b3e <+38>:	02 46	mov	r2, r0
   0x00015b40 <+40>:	30 46	mov	r0, r6
   0x00015b42 <+42>:	ff f7 4f fc	bl	0x153e4 <xheader_print>
   0x00015b46 <+46>:	0b 9a	ldr	r2, [sp, #44]	; 0x2c
   0x00015b48 <+48>:	23 68	ldr	r3, [r4, #0]
   0x00015b4a <+50>:	9a 42	cmp	r2, r3
   0x00015b4c <+52>:	01 d1	bne.n	0x15b52 <ctime_coder+58>
   0x00015b4e <+54>:	0d b0	add	sp, #52	; 0x34
   0x00015b50 <+56>:	f0 bd	pop	{r4, r5, r6, r7, pc}
   0x00015b52 <+58>:	f5 f7 68 e8	blx	0xac24 <__stack_chk_fail@plt>
End of assembler dump.
