GNU gdb (Ubuntu 7.10-1ubuntu2) 7.10
Copyright (C) 2015 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "arm-linux-gnueabihf".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /bin/tar...Reading symbols from /usr/lib/debug//bin/tar...done.
done.
Dump of assembler code for function xheader_print:
   0x000153e4 <+0>:	70 b5	push	{r4, r5, r6, lr}
   0x000153e6 <+2>:	05 46	mov	r5, r0
   0x000153e8 <+4>:	10 46	mov	r0, r2
   0x000153ea <+6>:	14 46	mov	r4, r2
   0x000153ec <+8>:	0e 46	mov	r6, r1
   0x000153ee <+10>:	f5 f7 98 ed	blx	0xaf20 <strlen@plt+4>
   0x000153f2 <+14>:	31 46	mov	r1, r6
   0x000153f4 <+16>:	22 46	mov	r2, r4
   0x000153f6 <+18>:	03 46	mov	r3, r0
   0x000153f8 <+20>:	28 46	mov	r0, r5
   0x000153fa <+22>:	bd e8 70 40	ldmia.w	sp!, {r4, r5, r6, lr}
   0x000153fe <+26>:	4f e7	b.n	0x152a0 <xheader_print_n>
End of assembler dump.
Dump of assembler code for function xheader_print_n:
   0x000152a0 <+0>:	2d e9 f0 4f	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
   0x000152a4 <+4>:	45 f2 70 74	movw	r4, #22384	; 0x5770
   0x000152a8 <+8>:	8f b0	sub	sp, #60	; 0x3c
   0x000152aa <+10>:	c0 f2 04 04	movt	r4, #4
   0x000152ae <+14>:	45 f6 4c 1a	movw	r10, #22860	; 0x594c
   0x000152b2 <+18>:	c0 f2 04 0a	movt	r10, #4
   0x000152b6 <+22>:	02 94	str	r4, [sp, #8]
   0x000152b8 <+24>:	07 46	mov	r7, r0
   0x000152ba <+26>:	24 68	ldr	r4, [r4, #0]
   0x000152bc <+28>:	da f8 04 00	ldr.w	r0, [r10, #4]
   0x000152c0 <+32>:	05 92	str	r2, [sp, #20]
   0x000152c2 <+34>:	04 93	str	r3, [sp, #16]
   0x000152c4 <+36>:	0d 94	str	r4, [sp, #52]	; 0x34
   0x000152c6 <+38>:	00 28	cmp	r0, #0
   0x000152c8 <+40>:	7b d0	beq.n	0x153c2 <xheader_print_n+290>
   0x000152ca <+42>:	06 46	mov	r6, r0
   0x000152cc <+44>:	00 23	movs	r3, #0
   0x000152ce <+46>:	03 70	strb	r3, [r0, #0]
   0x000152d0 <+48>:	0c 78	ldrb	r4, [r1, #0]
   0x000152d2 <+50>:	25 46	mov	r5, r4
   0x000152d4 <+52>:	a4 b3	cbz	r4, 0x15340 <xheader_print_n+160>
   0x000152d6 <+54>:	44 f2 7c 13	movw	r3, #16764	; 0x417c
   0x000152da <+58>:	c0 f2 03 03	movt	r3, #3
   0x000152de <+62>:	45 f6 4c 18	movw	r8, #22860	; 0x594c
   0x000152e2 <+66>:	44 f2 80 15	movw	r5, #16768	; 0x4180
   0x000152e6 <+70>:	32 46	mov	r2, r6
   0x000152e8 <+72>:	c0 f2 03 05	movt	r5, #3
   0x000152ec <+76>:	d3 46	mov	r11, r10
   0x000152ee <+78>:	03 95	str	r5, [sp, #12]
   0x000152f0 <+80>:	c0 f2 04 08	movt	r8, #4
   0x000152f4 <+84>:	00 25	movs	r5, #0
   0x000152f6 <+86>:	0e 46	mov	r6, r1
   0x000152f8 <+88>:	9a 46	mov	r10, r3
   0x000152fa <+90>:	12 e0	b.n	0x15322 <xheader_print_n+130>
   0x000152fc <+92>:	25 2c	cmp	r4, #37	; 0x25
   0x000152fe <+94>:	02 bf	ittt	eq
   0x00015300 <+96>:	da f8 00 00	ldreq.w	r0, [r10]
   0x00015304 <+100>:	50 51	streq	r0, [r2, r5]
   0x00015306 <+102>:	4d 46	moveq	r5, r9
   0x00015308 <+104>:	07 d0	beq.n	0x1531a <xheader_print_n+122>
   0x0001530a <+106>:	3d 2c	cmp	r4, #61	; 0x3d
   0x0001530c <+108>:	11 bf	iteee	ne
   0x0001530e <+110>:	54 55	strbne	r4, [r2, r5]
   0x00015310 <+112>:	03 9b	ldreq	r3, [sp, #12]
   0x00015312 <+114>:	18 68	ldreq	r0, [r3, #0]
   0x00015314 <+116>:	50 51	streq	r0, [r2, r5]
   0x00015316 <+118>:	08 bf	it	eq
   0x00015318 <+120>:	4d 46	moveq	r5, r9
   0x0001531a <+122>:	16 f8 01 4f	ldrb.w	r4, [r6, #1]!
   0x0001531e <+126>:	01 35	adds	r5, #1
   0x00015320 <+128>:	6c b1	cbz	r4, 0x1533e <xheader_print_n+158>
   0x00015322 <+130>:	db f8 08 30	ldr.w	r3, [r11, #8]
   0x00015326 <+134>:	05 f1 02 09	add.w	r9, r5, #2
   0x0001532a <+138>:	99 45	cmp	r9, r3
   0x0001532c <+140>:	e6 d3	bcc.n	0x152fc <xheader_print_n+92>
   0x0001532e <+142>:	10 46	mov	r0, r2
   0x00015330 <+144>:	2b 49	ldr	r1, [pc, #172]	; (0x153e0 <xheader_print_n+320>)
   0x00015332 <+146>:	1a f0 7b f8	bl	0x2f42c <x2realloc>
   0x00015336 <+150>:	02 46	mov	r2, r0
   0x00015338 <+152>:	c8 f8 04 00	str.w	r0, [r8, #4]
   0x0001533c <+156>:	de e7	b.n	0x152fc <xheader_print_n+92>
   0x0001533e <+158>:	16 46	mov	r6, r2
   0x00015340 <+160>:	4f f0 00 0a	mov.w	r10, #0
   0x00015344 <+164>:	30 46	mov	r0, r6
   0x00015346 <+166>:	06 f8 05 a0	strb.w	r10, [r6, r5]
   0x0001534a <+170>:	0c ad	add	r5, sp, #48	; 0x30
   0x0001534c <+172>:	f5 f7 e8 ed	blx	0xaf20 <strlen@plt+4>
   0x00015350 <+176>:	04 9c	ldr	r4, [sp, #16]
   0x00015352 <+178>:	03 34	adds	r4, #3
   0x00015354 <+180>:	80 46	mov	r8, r0
   0x00015356 <+182>:	04 44	add	r4, r0
   0x00015358 <+184>:	00 e0	b.n	0x1535c <xheader_print_n+188>
   0x0001535a <+186>:	9a 46	mov	r10, r3
   0x0001535c <+188>:	0a eb 04 00	add.w	r0, r10, r4
   0x00015360 <+192>:	00 21	movs	r1, #0
   0x00015362 <+194>:	07 aa	add	r2, sp, #28
   0x00015364 <+196>:	16 f0 44 fd	bl	0x2bdf0 <umaxtostr>
   0x00015368 <+200>:	2b 1a	subs	r3, r5, r0
   0x0001536a <+202>:	9a 45	cmp	r10, r3
   0x0001536c <+204>:	f5 d1	bne.n	0x1535a <xheader_print_n+186>
   0x0001536e <+206>:	3c 1d	adds	r4, r7, #4
   0x00015370 <+208>:	02 46	mov	r2, r0
   0x00015372 <+210>:	53 46	mov	r3, r10
   0x00015374 <+212>:	38 68	ldr	r0, [r7, #0]
   0x00015376 <+214>:	21 46	mov	r1, r4
   0x00015378 <+216>:	ff f7 62 ff	bl	0x15240 <x_obstack_grow>
   0x0001537c <+220>:	21 46	mov	r1, r4
   0x0001537e <+222>:	38 68	ldr	r0, [r7, #0]
   0x00015380 <+224>:	20 22	movs	r2, #32
   0x00015382 <+226>:	ff f7 79 ff	bl	0x15278 <x_obstack_1grow>
   0x00015386 <+230>:	43 46	mov	r3, r8
   0x00015388 <+232>:	21 46	mov	r1, r4
   0x0001538a <+234>:	32 46	mov	r2, r6
   0x0001538c <+236>:	38 68	ldr	r0, [r7, #0]
   0x0001538e <+238>:	ff f7 57 ff	bl	0x15240 <x_obstack_grow>
   0x00015392 <+242>:	21 46	mov	r1, r4
   0x00015394 <+244>:	38 68	ldr	r0, [r7, #0]
   0x00015396 <+246>:	3d 22	movs	r2, #61	; 0x3d
   0x00015398 <+248>:	ff f7 6e ff	bl	0x15278 <x_obstack_1grow>
   0x0001539c <+252>:	04 9b	ldr	r3, [sp, #16]
   0x0001539e <+254>:	21 46	mov	r1, r4
   0x000153a0 <+256>:	05 9a	ldr	r2, [sp, #20]
   0x000153a2 <+258>:	38 68	ldr	r0, [r7, #0]
   0x000153a4 <+260>:	ff f7 4c ff	bl	0x15240 <x_obstack_grow>
   0x000153a8 <+264>:	21 46	mov	r1, r4
   0x000153aa <+266>:	0a 22	movs	r2, #10
   0x000153ac <+268>:	38 68	ldr	r0, [r7, #0]
   0x000153ae <+270>:	ff f7 63 ff	bl	0x15278 <x_obstack_1grow>
   0x000153b2 <+274>:	02 9c	ldr	r4, [sp, #8]
   0x000153b4 <+276>:	0d 9a	ldr	r2, [sp, #52]	; 0x34
   0x000153b6 <+278>:	23 68	ldr	r3, [r4, #0]
   0x000153b8 <+280>:	9a 42	cmp	r2, r3
   0x000153ba <+282>:	0e d1	bne.n	0x153da <xheader_print_n+314>
   0x000153bc <+284>:	0f b0	add	sp, #60	; 0x3c
   0x000153be <+286>:	bd e8 f0 8f	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}
   0x000153c2 <+290>:	4f f4 80 70	mov.w	r0, #256	; 0x100
   0x000153c6 <+294>:	ca f8 08 00	str.w	r0, [r10, #8]
   0x000153ca <+298>:	01 91	str	r1, [sp, #4]
   0x000153cc <+300>:	19 f0 b4 ff	bl	0x2f338 <xmalloc>
   0x000153d0 <+304>:	01 99	ldr	r1, [sp, #4]
   0x000153d2 <+306>:	06 46	mov	r6, r0
   0x000153d4 <+308>:	ca f8 04 00	str.w	r0, [r10, #4]
   0x000153d8 <+312>:	7a e7	b.n	0x152d0 <xheader_print_n+48>
   0x000153da <+314>:	f5 f7 24 ec	blx	0xac24 <__stack_chk_fail@plt>
   0x000153de <+318>:	00 bf	nop
   0x000153e0 <+320>:	54 59	ldr	r4, [r2, r5]
   0x000153e2 <+322>:	04 00	movs	r4, r0
End of assembler dump.
Dump of assembler code for function xheader_xattr__add:
   0x00014d50 <+0>:	2d e9 f8 43	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   0x00014d54 <+4>:	04 46	mov	r4, r0
   0x00014d56 <+6>:	0d 68	ldr	r5, [r1, #0]
   0x00014d58 <+8>:	90 46	mov	r8, r2
   0x00014d5a <+10>:	00 68	ldr	r0, [r0, #0]
   0x00014d5c <+12>:	99 46	mov	r9, r3
   0x00014d5e <+14>:	01 35	adds	r5, #1
   0x00014d60 <+16>:	0d 60	str	r5, [r1, #0]
   0x00014d62 <+18>:	08 9e	ldr	r6, [sp, #32]
   0x00014d64 <+20>:	05 eb 45 05	add.w	r5, r5, r5, lsl #1
   0x00014d68 <+24>:	a9 00	lsls	r1, r5, #2
   0x00014d6a <+26>:	a1 f1 0c 05	sub.w	r5, r1, #12
   0x00014d6e <+30>:	1a f0 07 fb	bl	0x2f380 <xrealloc>
   0x00014d72 <+34>:	07 46	mov	r7, r0
   0x00014d74 <+36>:	40 46	mov	r0, r8
   0x00014d76 <+38>:	27 60	str	r7, [r4, #0]
   0x00014d78 <+40>:	1a f0 92 fb	bl	0x2f4a0 <xstrdup>
   0x00014d7c <+44>:	71 1c	adds	r1, r6, #1
   0x00014d7e <+46>:	78 51	str	r0, [r7, r5]
   0x00014d80 <+48>:	48 46	mov	r0, r9
   0x00014d82 <+50>:	23 68	ldr	r3, [r4, #0]
   0x00014d84 <+52>:	5f 19	adds	r7, r3, r5
   0x00014d86 <+54>:	1a f0 7f fb	bl	0x2f488 <xmemdup>
   0x00014d8a <+58>:	78 60	str	r0, [r7, #4]
   0x00014d8c <+60>:	23 68	ldr	r3, [r4, #0]
   0x00014d8e <+62>:	1d 44	add	r5, r3
   0x00014d90 <+64>:	ae 60	str	r6, [r5, #8]
   0x00014d92 <+66>:	bd e8 f8 83	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
End of assembler dump.
Dump of assembler code for function x2realloc:
   0x0002f42c <+0>:	08 b5	push	{r3, lr}
   0x0002f42e <+2>:	0b 68	ldr	r3, [r1, #0]
   0x0002f430 <+4>:	60 b1	cbz	r0, 0x2f44c <x2realloc+32>
   0x0002f432 <+6>:	b3 f1 aa 3f	cmp.w	r3, #2863311530	; 0xaaaaaaaa
   0x0002f436 <+10>:	3c bf	itt	cc
   0x0002f438 <+12>:	5a 1c	addcc	r2, r3, #1
   0x0002f43a <+14>:	03 eb 52 03	addcc.w	r3, r3, r2, lsr #1
   0x0002f43e <+18>:	0e d2	bcs.n	0x2f45e <x2realloc+50>
   0x0002f440 <+20>:	0b 60	str	r3, [r1, #0]
   0x0002f442 <+22>:	19 46	mov	r1, r3
   0x0002f444 <+24>:	bd e8 08 40	ldmia.w	sp!, {r3, lr}
   0x0002f448 <+28>:	ff f7 9a bf	b.w	0x2f380 <xrealloc>
   0x0002f44c <+32>:	00 2b	cmp	r3, #0
   0x0002f44e <+34>:	08 bf	it	eq
   0x0002f450 <+36>:	40 23	moveq	r3, #64	; 0x40
   0x0002f452 <+38>:	0b 60	str	r3, [r1, #0]
   0x0002f454 <+40>:	19 46	mov	r1, r3
   0x0002f456 <+42>:	bd e8 08 40	ldmia.w	sp!, {r3, lr}
   0x0002f45a <+46>:	ff f7 91 bf	b.w	0x2f380 <xrealloc>
   0x0002f45e <+50>:	e3 f7 ed fc	bl	0x12e3c <xalloc_die>
End of assembler dump.
Dump of assembler code for function xcalloc:
   0x0002f478 <+0>:	08 b5	push	{r3, lr}
   0x0002f47a <+2>:	db f7 be ea	blx	0xa9f8 <calloc@plt>
   0x0002f47e <+6>:	00 b1	cbz	r0, 0x2f482 <xcalloc+10>
   0x0002f480 <+8>:	08 bd	pop	{r3, pc}
   0x0002f482 <+10>:	e3 f7 db fc	bl	0x12e3c <xalloc_die>
End of assembler dump.
Dump of assembler code for function xmalloc:
   0x0002f338 <+0>:	10 b5	push	{r4, lr}
   0x0002f33a <+2>:	04 46	mov	r4, r0
   0x0002f33c <+4>:	db f7 7c ed	blx	0xae38 <malloc@plt>
   0x0002f340 <+8>:	00 2c	cmp	r4, #0
   0x0002f342 <+10>:	b0 fa 80 f3	clz	r3, r0
   0x0002f346 <+14>:	4f ea 53 13	mov.w	r3, r3, lsr #5
   0x0002f34a <+18>:	08 bf	it	eq
   0x0002f34c <+20>:	00 23	moveq	r3, #0
   0x0002f34e <+22>:	03 b9	cbnz	r3, 0x2f352 <xmalloc+26>
   0x0002f350 <+24>:	10 bd	pop	{r4, pc}
   0x0002f352 <+26>:	e3 f7 73 fd	bl	0x12e3c <xalloc_die>
End of assembler dump.
Dump of assembler code for function xmemdup:
   0x0002f488 <+0>:	38 b5	push	{r3, r4, r5, lr}
   0x0002f48a <+2>:	0c 46	mov	r4, r1
   0x0002f48c <+4>:	05 46	mov	r5, r0
   0x0002f48e <+6>:	08 46	mov	r0, r1
   0x0002f490 <+8>:	ff f7 52 ff	bl	0x2f338 <xmalloc>
   0x0002f494 <+12>:	29 46	mov	r1, r5
   0x0002f496 <+14>:	22 46	mov	r2, r4
   0x0002f498 <+16>:	bd e8 38 40	ldmia.w	sp!, {r3, r4, r5, lr}
   0x0002f49c <+20>:	db f7 68 bb	b.w	0xab70 <memcpy@plt>
End of assembler dump.
Dump of assembler code for function xrealloc:
   0x0002f380 <+0>:	b1 fa 81 f3	clz	r3, r1
   0x0002f384 <+4>:	00 28	cmp	r0, #0
   0x0002f386 <+6>:	10 b5	push	{r4, lr}
   0x0002f388 <+8>:	4f ea 53 13	mov.w	r3, r3, lsr #5
   0x0002f38c <+12>:	08 bf	it	eq
   0x0002f38e <+14>:	00 23	moveq	r3, #0
   0x0002f390 <+16>:	5b b9	cbnz	r3, 0x2f3aa <xrealloc+42>
   0x0002f392 <+18>:	0c 46	mov	r4, r1
   0x0002f394 <+20>:	db f7 5e ec	blx	0xac54 <realloc@plt>
   0x0002f398 <+24>:	00 2c	cmp	r4, #0
   0x0002f39a <+26>:	b0 fa 80 f3	clz	r3, r0
   0x0002f39e <+30>:	4f ea 53 13	mov.w	r3, r3, lsr #5
   0x0002f3a2 <+34>:	08 bf	it	eq
   0x0002f3a4 <+36>:	00 23	moveq	r3, #0
   0x0002f3a6 <+38>:	23 b9	cbnz	r3, 0x2f3b2 <xrealloc+50>
   0x0002f3a8 <+40>:	10 bd	pop	{r4, pc}
   0x0002f3aa <+42>:	db f7 b8 eb	blx	0xab1c <free>
   0x0002f3ae <+46>:	00 20	movs	r0, #0
   0x0002f3b0 <+48>:	10 bd	pop	{r4, pc}
   0x0002f3b2 <+50>:	e3 f7 43 fd	bl	0x12e3c <xalloc_die>
End of assembler dump.
Dump of assembler code for function xstrdup:
   0x0002f4a0 <+0>:	10 b5	push	{r4, lr}
   0x0002f4a2 <+2>:	04 46	mov	r4, r0
   0x0002f4a4 <+4>:	db f7 3c ed	blx	0xaf20 <strlen@plt+4>
   0x0002f4a8 <+8>:	41 1c	adds	r1, r0, #1
   0x0002f4aa <+10>:	20 46	mov	r0, r4
   0x0002f4ac <+12>:	bd e8 10 40	ldmia.w	sp!, {r4, lr}
   0x0002f4b0 <+16>:	ff f7 ea bf	b.w	0x2f488 <xmemdup>
End of assembler dump.
