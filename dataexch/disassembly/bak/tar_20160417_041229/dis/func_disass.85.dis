GNU gdb (Ubuntu 7.10-1ubuntu2) 7.10
Copyright (C) 2015 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "arm-linux-gnueabihf".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from /bin/tar...Reading symbols from /usr/lib/debug//bin/tar...done.
done.
Dump of assembler code for function xattr_acls_d_coder:
   0x000154bc <+0>:	10 b4	push	{r4}
   0x000154be <+2>:	04 46	mov	r4, r0
   0x000154c0 <+4>:	a3 6a	ldr	r3, [r4, #40]	; 0x28
   0x000154c2 <+6>:	10 46	mov	r0, r2
   0x000154c4 <+8>:	62 6a	ldr	r2, [r4, #36]	; 0x24
   0x000154c6 <+10>:	5d f8 04 4b	ldr.w	r4, [sp], #4
   0x000154ca <+14>:	e9 e6	b.n	0x152a0 <xheader_print_n>
End of assembler dump.
Dump of assembler code for function xattr_acls_d_decoder:
   0x00014d98 <+0>:	38 b5	push	{r3, r4, r5, lr}
   0x00014d9a <+2>:	59 1c	adds	r1, r3, #1
   0x00014d9c <+4>:	04 46	mov	r4, r0
   0x00014d9e <+6>:	10 46	mov	r0, r2
   0x00014da0 <+8>:	1d 46	mov	r5, r3
   0x00014da2 <+10>:	1a f0 71 fb	bl	0x2f488 <xmemdup>
   0x00014da6 <+14>:	a5 62	str	r5, [r4, #40]	; 0x28
   0x00014da8 <+16>:	60 62	str	r0, [r4, #36]	; 0x24
   0x00014daa <+18>:	38 bd	pop	{r3, r4, r5, pc}
End of assembler dump.
Dump of assembler code for function xattr_coder:
   0x000154a0 <+0>:	30 b4	push	{r4, r5}
   0x000154a2 <+2>:	1c 68	ldr	r4, [r3, #0]
   0x000154a4 <+4>:	d0 f8 d4 50	ldr.w	r5, [r0, #212]	; 0xd4
   0x000154a8 <+8>:	10 46	mov	r0, r2
   0x000154aa <+10>:	04 eb 44 04	add.w	r4, r4, r4, lsl #1
   0x000154ae <+14>:	05 eb 84 03	add.w	r3, r5, r4, lsl #2
   0x000154b2 <+18>:	30 bc	pop	{r4, r5}
   0x000154b4 <+20>:	5a 68	ldr	r2, [r3, #4]
   0x000154b6 <+22>:	9b 68	ldr	r3, [r3, #8]
   0x000154b8 <+24>:	f2 e6	b.n	0x152a0 <xheader_print_n>
End of assembler dump.
Dump of assembler code for function xattr_decoder:
   0x00016104 <+0>:	2d e9 f0 4f	stmdb	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
   0x00016108 <+4>:	83 b0	sub	sp, #12
   0x0001610a <+6>:	45 f2 70 78	movw	r8, #22384	; 0x5770
   0x0001610e <+10>:	c0 f2 04 08	movt	r8, #4
   0x00016112 <+14>:	0c 46	mov	r4, r1
   0x00016114 <+16>:	00 af	add	r7, sp, #0
   0x00016116 <+18>:	83 46	mov	r11, r0
   0x00016118 <+20>:	d8 f8 00 10	ldr.w	r1, [r8]
   0x0001611c <+24>:	20 46	mov	r0, r4
   0x0001611e <+26>:	9a 46	mov	r10, r3
   0x00016120 <+28>:	15 46	mov	r5, r2
   0x00016122 <+30>:	79 60	str	r1, [r7, #4]
   0x00016124 <+32>:	f4 f7 fc ee	blx	0xaf20 <strlen@plt+4>
   0x00016128 <+36>:	21 46	mov	r1, r4
   0x0001612a <+38>:	00 f1 0f 03	add.w	r3, r0, #15
   0x0001612e <+42>:	42 1c	adds	r2, r0, #1
   0x00016130 <+44>:	23 f0 07 03	bic.w	r3, r3, #7
   0x00016134 <+48>:	ad eb 03 0d	sub.w	sp, sp, r3
   0x00016138 <+52>:	68 46	mov	r0, sp
   0x0001613a <+54>:	e9 46	mov	r9, sp
   0x0001613c <+56>:	f4 f7 1a ed	blx	0xab74 <memcpy@plt+4>
   0x00016140 <+60>:	0a f1 0f 03	add.w	r3, r10, #15
   0x00016144 <+64>:	23 f0 07 03	bic.w	r3, r3, #7
   0x00016148 <+68>:	29 46	mov	r1, r5
   0x0001614a <+70>:	ad eb 03 0d	sub.w	sp, sp, r3
   0x0001614e <+74>:	0a f1 01 02	add.w	r2, r10, #1
   0x00016152 <+78>:	09 f1 01 06	add.w	r6, r9, #1
   0x00016156 <+82>:	4c 46	mov	r4, r9
   0x00016158 <+84>:	68 46	mov	r0, sp
   0x0001615a <+86>:	f4 f7 0c ed	blx	0xab74 <memcpy@plt+4>
   0x0001615e <+90>:	3d 21	movs	r1, #61	; 0x3d
   0x00016160 <+92>:	03 46	mov	r3, r0
   0x00016162 <+94>:	05 e0	b.n	0x16170 <xattr_decoder+108>
   0x00016164 <+96>:	06 f8 01 5c	strb.w	r5, [r6, #-1]
   0x00016168 <+100>:	25 78	ldrb	r5, [r4, #0]
   0x0001616a <+102>:	ad b1	cbz	r5, 0x16198 <xattr_decoder+148>
   0x0001616c <+104>:	01 34	adds	r4, #1
   0x0001616e <+106>:	01 36	adds	r6, #1
   0x00016170 <+108>:	25 78	ldrb	r5, [r4, #0]
   0x00016172 <+110>:	25 2d	cmp	r5, #37	; 0x25
   0x00016174 <+112>:	f6 d1	bne.n	0x16164 <xattr_decoder+96>
   0x00016176 <+114>:	62 78	ldrb	r2, [r4, #1]
   0x00016178 <+116>:	33 2a	cmp	r2, #51	; 0x33
   0x0001617a <+118>:	1d d0	beq.n	0x161b8 <xattr_decoder+180>
   0x0001617c <+120>:	32 2a	cmp	r2, #50	; 0x32
   0x0001617e <+122>:	f1 d1	bne.n	0x16164 <xattr_decoder+96>
   0x00016180 <+124>:	a2 78	ldrb	r2, [r4, #2]
   0x00016182 <+126>:	35 2a	cmp	r2, #53	; 0x35
   0x00016184 <+128>:	04 bf	itt	eq
   0x00016186 <+130>:	06 f8 01 5c	strbeq.w	r5, [r6, #-1]
   0x0001618a <+134>:	03 34	addeq	r4, #3
   0x0001618c <+136>:	ef d0	beq.n	0x1616e <xattr_decoder+106>
   0x0001618e <+138>:	06 f8 01 5c	strb.w	r5, [r6, #-1]
   0x00016192 <+142>:	25 78	ldrb	r5, [r4, #0]
   0x00016194 <+144>:	00 2d	cmp	r5, #0
   0x00016196 <+146>:	e9 d1	bne.n	0x1616c <xattr_decoder+104>
   0x00016198 <+148>:	1a 46	mov	r2, r3
   0x0001619a <+150>:	58 46	mov	r0, r11
   0x0001619c <+152>:	53 46	mov	r3, r10
   0x0001619e <+154>:	09 f1 0d 01	add.w	r1, r9, #13
   0x000161a2 <+158>:	ff f7 81 ff	bl	0x160a8 <xheader_xattr_add>
   0x000161a6 <+162>:	7a 68	ldr	r2, [r7, #4]
   0x000161a8 <+164>:	d8 f8 00 30	ldr.w	r3, [r8]
   0x000161ac <+168>:	9a 42	cmp	r2, r3
   0x000161ae <+170>:	0b d1	bne.n	0x161c8 <xattr_decoder+196>
   0x000161b0 <+172>:	0c 37	adds	r7, #12
   0x000161b2 <+174>:	bd 46	mov	sp, r7
   0x000161b4 <+176>:	bd e8 f0 8f	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, r10, r11, pc}
   0x000161b8 <+180>:	a2 78	ldrb	r2, [r4, #2]
   0x000161ba <+182>:	44 2a	cmp	r2, #68	; 0x44
   0x000161bc <+184>:	04 bf	itt	eq
   0x000161be <+186>:	06 f8 01 1c	strbeq.w	r1, [r6, #-1]
   0x000161c2 <+190>:	03 34	addeq	r4, #3
   0x000161c4 <+192>:	ce d1	bne.n	0x16164 <xattr_decoder+96>
   0x000161c6 <+194>:	d2 e7	b.n	0x1616e <xattr_decoder+106>
   0x000161c8 <+196>:	f4 f7 2c ed	blx	0xac24 <__stack_chk_fail@plt>
End of assembler dump.
Dump of assembler code for function xattr_selinux_coder:
   0x00015438 <+0>:	80 69	ldr	r0, [r0, #24]
   0x0001543a <+2>:	e1 e7	b.n	0x15400 <code_string>
End of assembler dump.
Dump of assembler code for function xattr_selinux_decoder:
   0x00014d18 <+0>:	18 30	adds	r0, #24
   0x00014d1a <+2>:	11 46	mov	r1, r2
   0x00014d1c <+4>:	e6 e7	b.n	0x14cec <decode_string>
End of assembler dump.
Dump of assembler code for function xheader_init:
   0x00015214 <+0>:	30 b5	push	{r4, r5, lr}
   0x00015216 <+2>:	05 46	mov	r5, r0
   0x00015218 <+4>:	83 b0	sub	sp, #12
   0x0001521a <+6>:	2c 20	movs	r0, #44	; 0x2c
   0x0001521c <+8>:	1a f0 8c f8	bl	0x2f338 <xmalloc>
   0x00015220 <+12>:	00 21	movs	r1, #0
   0x00015222 <+14>:	0a 46	mov	r2, r1
   0x00015224 <+16>:	4a f6 1c 34	movw	r4, #43804	; 0xab1c
   0x00015228 <+20>:	4f f2 39 33	movw	r3, #62265	; 0xf339
   0x0001522c <+24>:	c0 f2 00 04	movt	r4, #0
   0x00015230 <+28>:	c0 f2 02 03	movt	r3, #2
   0x00015234 <+32>:	00 94	str	r4, [sp, #0]
   0x00015236 <+34>:	28 60	str	r0, [r5, #0]
   0x00015238 <+36>:	f5 f7 00 ed	blx	0xac3c <_obstack_begin@plt>
   0x0001523c <+40>:	03 b0	add	sp, #12
   0x0001523e <+42>:	30 bd	pop	{r4, r5, pc}
End of assembler dump.
Dump of assembler code for function xheader_keyword_override_p:
   0x00014c74 <+0>:	38 b5	push	{r3, r4, r5, lr}
   0x00014c76 <+2>:	45 f6 4c 13	movw	r3, #22860	; 0x594c
   0x00014c7a <+6>:	c0 f2 04 03	movt	r3, #4
   0x00014c7e <+10>:	05 46	mov	r5, r0
   0x00014c80 <+12>:	1c 68	ldr	r4, [r3, #0]
   0x00014c82 <+14>:	14 b9	cbnz	r4, 0x14c8a <xheader_keyword_override_p+22>
   0x00014c84 <+16>:	09 e0	b.n	0x14c9a <xheader_keyword_override_p+38>
   0x00014c86 <+18>:	24 68	ldr	r4, [r4, #0]
   0x00014c88 <+20>:	3c b1	cbz	r4, 0x14c9a <xheader_keyword_override_p+38>
   0x00014c8a <+22>:	60 68	ldr	r0, [r4, #4]
   0x00014c8c <+24>:	29 46	mov	r1, r5
   0x00014c8e <+26>:	f5 f7 ee ee	blx	0xaa6c <strcmp@plt+4>
   0x00014c92 <+30>:	00 28	cmp	r0, #0
   0x00014c94 <+32>:	f7 d1	bne.n	0x14c86 <xheader_keyword_override_p+18>
   0x00014c96 <+34>:	01 20	movs	r0, #1
   0x00014c98 <+36>:	38 bd	pop	{r3, r4, r5, pc}
   0x00014c9a <+38>:	20 46	mov	r0, r4
   0x00014c9c <+40>:	38 bd	pop	{r3, r4, r5, pc}
End of assembler dump.
Dump of assembler code for function xheader_list_append:
   0x00014ca0 <+0>:	f8 b5	push	{r3, r4, r5, r6, r7, lr}
   0x00014ca2 <+2>:	05 46	mov	r5, r0
   0x00014ca4 <+4>:	0c 20	movs	r0, #12
   0x00014ca6 <+6>:	0f 46	mov	r7, r1
   0x00014ca8 <+8>:	16 46	mov	r6, r2
   0x00014caa <+10>:	1a f0 45 fb	bl	0x2f338 <xmalloc>
   0x00014cae <+14>:	04 46	mov	r4, r0
   0x00014cb0 <+16>:	38 46	mov	r0, r7
   0x00014cb2 <+18>:	1a f0 f5 fb	bl	0x2f4a0 <xstrdup>
   0x00014cb6 <+22>:	60 60	str	r0, [r4, #4]
   0x00014cb8 <+24>:	30 46	mov	r0, r6
   0x00014cba <+26>:	0e b1	cbz	r6, 0x14cc0 <xheader_list_append+32>
   0x00014cbc <+28>:	1a f0 f0 fb	bl	0x2f4a0 <xstrdup>
   0x00014cc0 <+32>:	2b 68	ldr	r3, [r5, #0]
   0x00014cc2 <+34>:	a0 60	str	r0, [r4, #8]
   0x00014cc4 <+36>:	2c 60	str	r4, [r5, #0]
   0x00014cc6 <+38>:	23 60	str	r3, [r4, #0]
   0x00014cc8 <+40>:	f8 bd	pop	{r3, r4, r5, r6, r7, pc}
End of assembler dump.
